/* automatically generated by rust-bindgen 0.72.0 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::core::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::core::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::core::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::core::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::core::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const MAX_STRING: u32 = 256;
pub const MAX_VA_STRING: u32 = 1024;
pub const MAX_SYSPATH: u32 = 1024;
pub const MAX_MODS: u32 = 512;
pub const MAX_QPATH: u32 = 64;
pub const MAX_OSPATH: u32 = 260;
pub const CS_SIZE: u32 = 64;
pub const CS_TIME: u32 = 16;
pub const PITCH: u32 = 0;
pub const YAW: u32 = 1;
pub const ROLL: u32 = 2;
pub const NUMVERTEXNORMALS: u32 = 162;
pub const SIDE_FRONT: u32 = 0;
pub const SIDE_BACK: u32 = 1;
pub const SIDE_ON: u32 = 2;
pub const SIDE_CROSS: i32 = -2;
pub const PLANE_X: u32 = 0;
pub const PLANE_Y: u32 = 1;
pub const PLANE_Z: u32 = 2;
pub const PLANE_NONAXIAL: u32 = 3;
pub const EQUAL_EPSILON: f64 = 0.001;
pub const STOP_EPSILON: f64 = 0.1;
pub const ON_EPSILON: f64 = 0.1;
pub const RAD_TO_STUDIO: f64 = 10430.378350470453;
pub const STUDIO_TO_RAD: f64 = 0.00009587379924285257;
pub const INV127F: f64 = 0.007874015748031496;
pub const INV255F: f64 = 0.00392156862745098;
pub const FL_FLY: u32 = 1;
pub const FL_SWIM: u32 = 2;
pub const FL_CONVEYOR: u32 = 4;
pub const FL_CLIENT: u32 = 8;
pub const FL_INWATER: u32 = 16;
pub const FL_MONSTER: u32 = 32;
pub const FL_GODMODE: u32 = 64;
pub const FL_NOTARGET: u32 = 128;
pub const FL_SKIPLOCALHOST: u32 = 256;
pub const FL_ONGROUND: u32 = 512;
pub const FL_PARTIALGROUND: u32 = 1024;
pub const FL_WATERJUMP: u32 = 2048;
pub const FL_FROZEN: u32 = 4096;
pub const FL_FAKECLIENT: u32 = 8192;
pub const FL_DUCKING: u32 = 16384;
pub const FL_FLOAT: u32 = 32768;
pub const FL_GRAPHED: u32 = 65536;
pub const FL_IMMUNE_WATER: u32 = 131072;
pub const FL_IMMUNE_SLIME: u32 = 262144;
pub const FL_IMMUNE_LAVA: u32 = 524288;
pub const FL_PROXY: u32 = 1048576;
pub const FL_ALWAYSTHINK: u32 = 2097152;
pub const FL_BASEVELOCITY: u32 = 4194304;
pub const FL_MONSTERCLIP: u32 = 8388608;
pub const FL_ONTRAIN: u32 = 16777216;
pub const FL_WORLDBRUSH: u32 = 33554432;
pub const FL_SPECTATOR: u32 = 67108864;
pub const FL_LASERDOT: u32 = 134217728;
pub const FL_CUSTOMENTITY: u32 = 536870912;
pub const FL_KILLME: u32 = 1073741824;
pub const FL_DORMANT: u32 = 2147483648;
pub const FTRACE_SIMPLEBOX: u32 = 1;
pub const FTRACE_IGNORE_GLASS: u32 = 2;
pub const WALKMOVE_NORMAL: u32 = 0;
pub const WALKMOVE_WORLDONLY: u32 = 1;
pub const WALKMOVE_CHECKONLY: u32 = 2;
pub const MOVETYPE_NONE: u32 = 0;
pub const MOVETYPE_WALK: u32 = 3;
pub const MOVETYPE_STEP: u32 = 4;
pub const MOVETYPE_FLY: u32 = 5;
pub const MOVETYPE_TOSS: u32 = 6;
pub const MOVETYPE_PUSH: u32 = 7;
pub const MOVETYPE_NOCLIP: u32 = 8;
pub const MOVETYPE_FLYMISSILE: u32 = 9;
pub const MOVETYPE_BOUNCE: u32 = 10;
pub const MOVETYPE_BOUNCEMISSILE: u32 = 11;
pub const MOVETYPE_FOLLOW: u32 = 12;
pub const MOVETYPE_PUSHSTEP: u32 = 13;
pub const MOVETYPE_COMPOUND: u32 = 14;
pub const SOLID_NOT: u32 = 0;
pub const SOLID_TRIGGER: u32 = 1;
pub const SOLID_BBOX: u32 = 2;
pub const SOLID_SLIDEBOX: u32 = 3;
pub const SOLID_BSP: u32 = 4;
pub const SOLID_CUSTOM: u32 = 5;
pub const SOLID_PORTAL: u32 = 6;
pub const DEAD_NO: u32 = 0;
pub const DEAD_DYING: u32 = 1;
pub const DEAD_DEAD: u32 = 2;
pub const DEAD_RESPAWNABLE: u32 = 3;
pub const DEAD_DISCARDBODY: u32 = 4;
pub const DAMAGE_NO: u32 = 0;
pub const DAMAGE_YES: u32 = 1;
pub const DAMAGE_AIM: u32 = 2;
pub const EF_BRIGHTFIELD: u32 = 1;
pub const EF_MUZZLEFLASH: u32 = 2;
pub const EF_BRIGHTLIGHT: u32 = 4;
pub const EF_DIMLIGHT: u32 = 8;
pub const EF_INVLIGHT: u32 = 16;
pub const EF_NOINTERP: u32 = 32;
pub const EF_LIGHT: u32 = 64;
pub const EF_NODRAW: u32 = 128;
pub const EF_WATERSIDES: u32 = 67108864;
pub const EF_FULLBRIGHT: u32 = 134217728;
pub const EF_NOSHADOW: u32 = 268435456;
pub const EF_MERGE_VISIBILITY: u32 = 536870912;
pub const EF_REQUEST_PHS: u32 = 1073741824;
pub const EFLAG_SLERP: u32 = 1;
pub const TE_BEAMPOINTS: u32 = 0;
pub const TE_BEAMENTPOINT: u32 = 1;
pub const TE_GUNSHOT: u32 = 2;
pub const TE_EXPLOSION: u32 = 3;
pub const TE_EXPLFLAG_NONE: u32 = 0;
pub const TE_EXPLFLAG_NOADDITIVE: u32 = 1;
pub const TE_EXPLFLAG_NODLIGHTS: u32 = 2;
pub const TE_EXPLFLAG_NOSOUND: u32 = 4;
pub const TE_EXPLFLAG_NOPARTICLES: u32 = 8;
pub const TE_EXPLFLAG_DRAWALPHA: u32 = 16;
pub const TE_EXPLFLAG_ROTATE: u32 = 32;
pub const TE_TAREXPLOSION: u32 = 4;
pub const TE_SMOKE: u32 = 5;
pub const TE_TRACER: u32 = 6;
pub const TE_LIGHTNING: u32 = 7;
pub const TE_BEAMENTS: u32 = 8;
pub const TE_SPARKS: u32 = 9;
pub const TE_LAVASPLASH: u32 = 10;
pub const TE_TELEPORT: u32 = 11;
pub const TE_EXPLOSION2: u32 = 12;
pub const TE_BSPDECAL: u32 = 13;
pub const TE_IMPLOSION: u32 = 14;
pub const TE_SPRITETRAIL: u32 = 15;
pub const TE_BEAM: u32 = 16;
pub const TE_SPRITE: u32 = 17;
pub const TE_BEAMSPRITE: u32 = 18;
pub const TE_BEAMTORUS: u32 = 19;
pub const TE_BEAMDISK: u32 = 20;
pub const TE_BEAMCYLINDER: u32 = 21;
pub const TE_BEAMFOLLOW: u32 = 22;
pub const TE_GLOWSPRITE: u32 = 23;
pub const TE_BEAMRING: u32 = 24;
pub const TE_STREAK_SPLASH: u32 = 25;
pub const TE_BEAMHOSE: u32 = 26;
pub const TE_DLIGHT: u32 = 27;
pub const TE_ELIGHT: u32 = 28;
pub const TE_TEXTMESSAGE: u32 = 29;
pub const TE_LINE: u32 = 30;
pub const TE_BOX: u32 = 31;
pub const TE_KILLBEAM: u32 = 99;
pub const TE_LARGEFUNNEL: u32 = 100;
pub const TE_BLOODSTREAM: u32 = 101;
pub const TE_SHOWLINE: u32 = 102;
pub const TE_BLOOD: u32 = 103;
pub const TE_DECAL: u32 = 104;
pub const TE_FIZZ: u32 = 105;
pub const TE_MODEL: u32 = 106;
pub const TE_EXPLODEMODEL: u32 = 107;
pub const TE_BREAKMODEL: u32 = 108;
pub const TE_GUNSHOTDECAL: u32 = 109;
pub const TE_SPRITE_SPRAY: u32 = 110;
pub const TE_ARMOR_RICOCHET: u32 = 111;
pub const TE_PLAYERDECAL: u32 = 112;
pub const TE_BUBBLES: u32 = 113;
pub const TE_BUBBLETRAIL: u32 = 114;
pub const TE_BLOODSPRITE: u32 = 115;
pub const TE_WORLDDECAL: u32 = 116;
pub const TE_WORLDDECALHIGH: u32 = 117;
pub const TE_DECALHIGH: u32 = 118;
pub const TE_PROJECTILE: u32 = 119;
pub const TE_SPRAY: u32 = 120;
pub const TE_PLAYERSPRITES: u32 = 121;
pub const TE_PARTICLEBURST: u32 = 122;
pub const TE_FIREFIELD: u32 = 123;
pub const TEFIRE_FLAG_ALLFLOAT: u32 = 1;
pub const TEFIRE_FLAG_SOMEFLOAT: u32 = 2;
pub const TEFIRE_FLAG_LOOP: u32 = 4;
pub const TEFIRE_FLAG_ALPHA: u32 = 8;
pub const TEFIRE_FLAG_PLANAR: u32 = 16;
pub const TEFIRE_FLAG_ADDITIVE: u32 = 32;
pub const TE_PLAYERATTACHMENT: u32 = 124;
pub const TE_KILLPLAYERATTACHMENTS: u32 = 125;
pub const TE_MULTIGUNSHOT: u32 = 126;
pub const TE_USERTRACER: u32 = 127;
pub const MSG_BROADCAST: u32 = 0;
pub const MSG_ONE: u32 = 1;
pub const MSG_ALL: u32 = 2;
pub const MSG_INIT: u32 = 3;
pub const MSG_PVS: u32 = 4;
pub const MSG_PAS: u32 = 5;
pub const MSG_PVS_R: u32 = 6;
pub const MSG_PAS_R: u32 = 7;
pub const MSG_ONE_UNRELIABLE: u32 = 8;
pub const MSG_SPEC: u32 = 9;
pub const CONTENTS_EMPTY: i32 = -1;
pub const CONTENTS_SOLID: i32 = -2;
pub const CONTENTS_WATER: i32 = -3;
pub const CONTENTS_SLIME: i32 = -4;
pub const CONTENTS_LAVA: i32 = -5;
pub const CONTENTS_SKY: i32 = -6;
pub const CONTENTS_ORIGIN: i32 = -7;
pub const CONTENTS_CLIP: i32 = -8;
pub const CONTENTS_CURRENT_0: i32 = -9;
pub const CONTENTS_CURRENT_90: i32 = -10;
pub const CONTENTS_CURRENT_180: i32 = -11;
pub const CONTENTS_CURRENT_270: i32 = -12;
pub const CONTENTS_CURRENT_UP: i32 = -13;
pub const CONTENTS_CURRENT_DOWN: i32 = -14;
pub const CONTENTS_TRANSLUCENT: i32 = -15;
pub const CONTENTS_LADDER: i32 = -16;
pub const CONTENT_FLYFIELD: i32 = -17;
pub const CONTENT_GRAVITY_FLYFIELD: i32 = -18;
pub const CONTENT_FOG: i32 = -19;
pub const CHAN_AUTO: u32 = 0;
pub const CHAN_WEAPON: u32 = 1;
pub const CHAN_VOICE: u32 = 2;
pub const CHAN_ITEM: u32 = 3;
pub const CHAN_BODY: u32 = 4;
pub const CHAN_STREAM: u32 = 5;
pub const CHAN_STATIC: u32 = 6;
pub const CHAN_NETWORKVOICE_BASE: u32 = 7;
pub const CHAN_NETWORKVOICE_END: u32 = 500;
pub const ATTN_NONE: u32 = 0;
pub const PITCH_NORM: u32 = 100;
pub const PITCH_LOW: u32 = 95;
pub const PITCH_HIGH: u32 = 120;
pub const VOL_NORM: f64 = 1.0;
pub const PLAT_LOW_TRIGGER: u32 = 1;
pub const SF_TRAIN_WAIT_RETRIGGER: u32 = 1;
pub const SF_TRAIN_START_ON: u32 = 4;
pub const SF_TRAIN_PASSABLE: u32 = 8;
pub const IN_ATTACK: u32 = 1;
pub const IN_JUMP: u32 = 2;
pub const IN_DUCK: u32 = 4;
pub const IN_FORWARD: u32 = 8;
pub const IN_BACK: u32 = 16;
pub const IN_USE: u32 = 32;
pub const IN_CANCEL: u32 = 64;
pub const IN_LEFT: u32 = 128;
pub const IN_RIGHT: u32 = 256;
pub const IN_MOVELEFT: u32 = 512;
pub const IN_MOVERIGHT: u32 = 1024;
pub const IN_ATTACK2: u32 = 2048;
pub const IN_RUN: u32 = 4096;
pub const IN_RELOAD: u32 = 8192;
pub const IN_ALT1: u32 = 16384;
pub const IN_SCORE: u32 = 32768;
pub const BREAK_TYPEMASK: u32 = 79;
pub const BREAK_GLASS: u32 = 1;
pub const BREAK_METAL: u32 = 2;
pub const BREAK_FLESH: u32 = 4;
pub const BREAK_WOOD: u32 = 8;
pub const BREAK_SMOKE: u32 = 16;
pub const BREAK_TRANS: u32 = 32;
pub const BREAK_CONCRETE: u32 = 64;
pub const BREAK_2: u32 = 128;
pub const BOUNCE_GLASS: u32 = 1;
pub const BOUNCE_METAL: u32 = 2;
pub const BOUNCE_FLESH: u32 = 4;
pub const BOUNCE_WOOD: u32 = 8;
pub const BOUNCE_SHRAP: u32 = 16;
pub const BOUNCE_SHELL: u32 = 32;
pub const BOUNCE_CONCRETE: u32 = 64;
pub const BOUNCE_SHOTSHELL: u32 = 128;
pub const TE_BOUNCE_NULL: u32 = 0;
pub const TE_BOUNCE_SHELL: u32 = 1;
pub const TE_BOUNCE_SHOTSHELL: u32 = 2;
pub const PORT_ANY: i32 = -1;
pub const NETAPI_REQUEST_SERVERLIST: u32 = 0;
pub const NETAPI_REQUEST_PING: u32 = 1;
pub const NETAPI_REQUEST_RULES: u32 = 2;
pub const NETAPI_REQUEST_PLAYERS: u32 = 3;
pub const NETAPI_REQUEST_DETAILS: u32 = 4;
pub const FNETAPI_MULTIPLE_RESPONSE: u32 = 1;
pub const FNETAPI_LEGACY_PROTOCOL: u32 = 2;
pub const NET_SUCCESS: u32 = 0;
pub const NET_ERROR_TIMEOUT: u32 = 1;
pub const NET_ERROR_PROTO_UNSUPPORTED: u32 = 2;
pub const NET_ERROR_UNDEFINED: u32 = 4;
pub const NET_ERROR_FORBIDDEN: u32 = 8;
pub const HISTORY_MAX: u32 = 64;
pub const HISTORY_MASK: u32 = 63;
pub const ENTITY_NORMAL: u32 = 1;
pub const ENTITY_BEAM: u32 = 2;
pub const MAX_PHYSINFO_STRING: u32 = 256;
pub const MAX_LOCAL_WEAPONS: u32 = 64;
pub const FEVENT_ORIGIN: u32 = 1;
pub const FEVENT_ANGLES: u32 = 2;
pub const RF_DRAW_WORLD: u32 = 1;
pub const RF_DRAW_CUBEMAP: u32 = 2;
pub const RF_DRAW_OVERVIEW: u32 = 4;
pub const RF_ONLY_CLIENTDRAW: u32 = 8;
pub const Q1BSP_VERSION: u32 = 29;
pub const HLBSP_VERSION: u32 = 30;
pub const EXTRA_VERSION: u32 = 4;
pub const DELUXEMAP_VERSION: u32 = 1;
pub const ANGLE_UP: i32 = -1;
pub const ANGLE_DOWN: i32 = -2;
pub const MAX_MAP_HULLS: u32 = 4;
pub const LM_STYLES: u32 = 4;
pub const LS_NORMAL: u32 = 0;
pub const LS_UNUSED: u32 = 254;
pub const LS_NONE: u32 = 255;
pub const MAX_MAP_CLIPNODES_HLBSP: u32 = 32767;
pub const MAX_MAP_CLIPNODES_BSP2: u32 = 524288;
pub const MAX_MAP_MODELS: u32 = 2048;
pub const MAX_MAP_ENTSTRING: u32 = 2097152;
pub const MAX_MAP_PLANES: u32 = 131072;
pub const MAX_MAP_NODES: u32 = 262144;
pub const MAX_MAP_CLIPNODES: u32 = 524288;
pub const MAX_MAP_LEAFS: u32 = 131072;
pub const MAX_MAP_VERTS: u32 = 524288;
pub const MAX_MAP_FACES: u32 = 262144;
pub const MAX_MAP_MARKSURFACES: u32 = 524288;
pub const MAX_MAP_ENTITIES: u32 = 8192;
pub const MAX_MAP_TEXINFO: u32 = 262144;
pub const MAX_MAP_EDGES: u32 = 1048576;
pub const MAX_MAP_SURFEDGES: u32 = 2097152;
pub const MAX_MAP_TEXTURES: u32 = 2048;
pub const MAX_MAP_MIPTEX: u32 = 33554432;
pub const MAX_MAP_LIGHTING: u32 = 33554432;
pub const MAX_MAP_VISIBILITY: u32 = 16777216;
pub const MAX_MAP_FACEINFO: u32 = 8192;
pub const LUMP_ENTITIES: u32 = 0;
pub const LUMP_PLANES: u32 = 1;
pub const LUMP_TEXTURES: u32 = 2;
pub const LUMP_VERTEXES: u32 = 3;
pub const LUMP_VISIBILITY: u32 = 4;
pub const LUMP_NODES: u32 = 5;
pub const LUMP_TEXINFO: u32 = 6;
pub const LUMP_FACES: u32 = 7;
pub const LUMP_LIGHTING: u32 = 8;
pub const LUMP_CLIPNODES: u32 = 9;
pub const LUMP_LEAFS: u32 = 10;
pub const LUMP_MARKSURFACES: u32 = 11;
pub const LUMP_EDGES: u32 = 12;
pub const LUMP_SURFEDGES: u32 = 13;
pub const LUMP_MODELS: u32 = 14;
pub const HEADER_LUMPS: u32 = 15;
pub const LUMP_LIGHTVECS: u32 = 0;
pub const LUMP_FACEINFO: u32 = 1;
pub const LUMP_CUBEMAPS: u32 = 2;
pub const LUMP_VERTNORMALS: u32 = 3;
pub const LUMP_LEAF_LIGHTING: u32 = 4;
pub const LUMP_WORLDLIGHTS: u32 = 5;
pub const LUMP_COLLISION: u32 = 6;
pub const LUMP_AINODEGRAPH: u32 = 7;
pub const LUMP_SHADOWMAP: u32 = 8;
pub const LUMP_VERTEX_LIGHT: u32 = 9;
pub const LUMP_UNUSED0: u32 = 10;
pub const LUMP_UNUSED1: u32 = 11;
pub const EXTRA_LUMPS: u32 = 12;
pub const STUDIO_RENDER: u32 = 1;
pub const STUDIO_EVENTS: u32 = 2;
pub const MIPLEVELS: u32 = 4;
pub const VERTEXSIZE: u32 = 7;
pub const MAXLIGHTMAPS: u32 = 4;
pub const MAXDYNLIGHTS: u32 = 8;
pub const MAX_SCOREBOARDNAME: u32 = 32;
pub const MAX_INFO_STRING: u32 = 256;
pub const RES_FATALIFMISSING: u32 = 1;
pub const RES_WASMISSING: u32 = 2;
pub const RES_CUSTOM: u32 = 4;
pub const RES_REQUESTED: u32 = 8;
pub const RES_PRECACHED: u32 = 16;
pub const RES_ALWAYS: u32 = 32;
pub const RES_CHECKFILE: u32 = 128;
pub const FCUST_FROMHPAK: u32 = 1;
pub const FCUST_WIPEDATA: u32 = 2;
pub const FCUST_IGNOREINIT: u32 = 4;
pub const MAXALIASVERTS: u32 = 2048;
pub const MAXALIASFRAMES: u32 = 256;
pub const MAXALIASTRIS: u32 = 4096;
pub const MAX_SKINS: u32 = 32;
pub const SUIT_HUE_START: u32 = 192;
pub const SUIT_HUE_END: u32 = 223;
pub const PLATE_HUE_START: u32 = 160;
pub const PLATE_HUE_END: u32 = 191;
pub const SHIRT_HUE_START: u32 = 16;
pub const SHIRT_HUE_END: u32 = 32;
pub const PANTS_HUE_START: u32 = 96;
pub const PANTS_HUE_END: u32 = 112;
pub const DIST_EPSILON: f64 = 0.03125;
pub const FRAC_EPSILON: f64 = 0.0009765625;
pub const BACKFACE_EPSILON: f64 = 0.01;
pub const MAX_BOX_LEAFS: u32 = 256;
pub const ANIM_CYCLE: u32 = 2;
pub const MOD_FRAMES: u32 = 20;
pub const MAX_DEMOS: u32 = 32;
pub const MAX_MOVIES: u32 = 8;
pub const MAX_CDTRACKS: u32 = 32;
pub const MAX_CLIENT_SPRITES: u32 = 512;
pub const MAX_REQUESTS: u32 = 64;
pub const CL_RENDER_INTERFACE_VERSION: u32 = 37;
pub const MAX_STUDIO_DECALS: u32 = 4096;
pub const PARM_TEX_WIDTH: u32 = 1;
pub const PARM_TEX_HEIGHT: u32 = 2;
pub const PARM_TEX_SRC_WIDTH: u32 = 3;
pub const PARM_TEX_SRC_HEIGHT: u32 = 4;
pub const PARM_TEX_SKYBOX: u32 = 5;
pub const PARM_TEX_SKYTEXNUM: u32 = 6;
pub const PARM_TEX_LIGHTMAP: u32 = 7;
pub const PARM_TEX_TARGET: u32 = 8;
pub const PARM_TEX_TEXNUM: u32 = 9;
pub const PARM_TEX_FLAGS: u32 = 10;
pub const PARM_TEX_DEPTH: u32 = 11;
pub const PARM_TEX_GLFORMAT: u32 = 13;
pub const PARM_TEX_ENCODE: u32 = 14;
pub const PARM_TEX_MIPCOUNT: u32 = 15;
pub const PARM_BSP2_SUPPORTED: u32 = 16;
pub const PARM_SKY_SPHERE: u32 = 17;
pub const PARAM_GAMEPAUSED: u32 = 18;
pub const PARM_MAP_HAS_DELUXE: u32 = 19;
pub const PARM_MAX_ENTITIES: u32 = 20;
pub const PARM_WIDESCREEN: u32 = 21;
pub const PARM_FULLSCREEN: u32 = 22;
pub const PARM_SCREEN_WIDTH: u32 = 23;
pub const PARM_SCREEN_HEIGHT: u32 = 24;
pub const PARM_CLIENT_INGAME: u32 = 25;
pub const PARM_FEATURES: u32 = 26;
pub const PARM_ACTIVE_TMU: u32 = 27;
pub const PARM_LIGHTSTYLEVALUE: u32 = 28;
pub const PARM_MAX_IMAGE_UNITS: u32 = 29;
pub const PARM_CLIENT_ACTIVE: u32 = 30;
pub const PARM_REBUILD_GAMMA: u32 = 31;
pub const PARM_DEDICATED_SERVER: u32 = 32;
pub const PARM_SURF_SAMPLESIZE: u32 = 33;
pub const PARM_GL_CONTEXT_TYPE: u32 = 34;
pub const PARM_GLES_WRAPPER: u32 = 35;
pub const PARM_STENCIL_ACTIVE: u32 = 36;
pub const PARM_WATER_ALPHA: u32 = 37;
pub const PARM_TEX_MEMORY: u32 = 38;
pub const PARM_DELUXEDATA: u32 = 39;
pub const PARM_SHADOWDATA: u32 = 40;
pub const MAX_PHYSENTS: u32 = 600;
pub const MAX_MOVEENTS: u32 = 64;
pub const MAX_CLIP_PLANES: u32 = 5;
pub const PM_NORMAL: u32 = 0;
pub const PM_STUDIO_IGNORE: u32 = 1;
pub const PM_STUDIO_BOX: u32 = 2;
pub const PM_GLASS_IGNORE: u32 = 4;
pub const PM_WORLD_ONLY: u32 = 8;
pub const PM_CUSTOM_IGNORE: u32 = 16;
pub const PM_TRACELINE_PHYSENTSONLY: u32 = 0;
pub const PM_TRACELINE_ANYVISIBLE: u32 = 1;
pub const EVENT_API_VERSION: u32 = 1;
pub const MAX_ALIAS_NAME: u32 = 32;
pub const SCRINFO_SCREENFLASH: u32 = 1;
pub const SCRINFO_STRETCHED: u32 = 2;
pub const CLDLL_INTERFACE_VERSION: u32 = 7;
pub const MAX_ENT_LEAFS_32: u32 = 24;
pub const MAX_ENT_LEAFS_16: u32 = 48;
pub const INTERFACE_VERSION: u32 = 140;
pub const MAX_LEVEL_CONNECTIONS: u32 = 16;
pub const FENTTABLE_PLAYER: u32 = 2147483648;
pub const FENTTABLE_REMOVED: u32 = 1073741824;
pub const FENTTABLE_MOVEABLE: u32 = 536870912;
pub const FENTTABLE_GLOBAL: u32 = 268435456;
pub const FTYPEDESC_GLOBAL: u32 = 1;
pub const FTYPEDESC_SAVE: u32 = 2;
pub const FTYPEDESC_KEY: u32 = 4;
pub const FTYPEDESC_FUNCTIONTABLE: u32 = 8;
pub const NEW_DLL_FUNCTIONS_VERSION: u32 = 1;
pub const SPRITE_VERSION_Q1: u32 = 1;
pub const SPRITE_VERSION_HL: u32 = 2;
pub const SPRITE_VERSION_32: u32 = 32;
pub const DXT_ENCODE_DEFAULT: u32 = 0;
pub const DXT_ENCODE_COLOR_YCoCg: u32 = 6657;
pub const DXT_ENCODE_ALPHA_1BIT: u32 = 6658;
pub const DXT_ENCODE_ALPHA_8BIT: u32 = 6659;
pub const DXT_ENCODE_ALPHA_SDF: u32 = 6660;
pub const DXT_ENCODE_NORMAL_AG_ORTHO: u32 = 6661;
pub const DXT_ENCODE_NORMAL_AG_STEREO: u32 = 6662;
pub const DXT_ENCODE_NORMAL_AG_PARABOLOID: u32 = 6663;
pub const DXT_ENCODE_NORMAL_AG_QUARTIC: u32 = 6664;
pub const DXT_ENCODE_NORMAL_AG_AZIMUTHAL: u32 = 6665;
pub const TRI_API_VERSION: u32 = 1;
pub const TRI_TRIANGLES: u32 = 0;
pub const TRI_TRIANGLE_FAN: u32 = 1;
pub const TRI_QUADS: u32 = 2;
pub const TRI_POLYGON: u32 = 3;
pub const TRI_LINES: u32 = 4;
pub const TRI_TRIANGLE_STRIP: u32 = 5;
pub const TRI_QUAD_STRIP: u32 = 6;
pub const TRI_POINTS: u32 = 7;
pub const STUDIO_VERSION: u32 = 10;
pub const MAXSTUDIOVERTS: u32 = 16384;
pub const MAXSTUDIOSEQUENCES: u32 = 256;
pub const MAXSTUDIOSKINS: u32 = 256;
pub const MAXSTUDIOSRCBONES: u32 = 512;
pub const MAXSTUDIOBONES: u32 = 128;
pub const MAXSTUDIOMODELS: u32 = 32;
pub const MAXSTUDIOBODYPARTS: u32 = 32;
pub const MAXSTUDIOGROUPS: u32 = 16;
pub const MAXSTUDIOMESHES: u32 = 256;
pub const MAXSTUDIOCONTROLLERS: u32 = 32;
pub const MAXSTUDIOATTACHMENTS: u32 = 64;
pub const MAXSTUDIOBONEWEIGHTS: u32 = 4;
pub const MAXSTUDIONAME: u32 = 32;
pub const MAXSTUDIOPOSEPARAM: u32 = 24;
pub const MAX_STUDIO_LIGHTMAP_SIZE: u32 = 256;
pub const STUDIO_ROCKET: u32 = 1;
pub const STUDIO_GRENADE: u32 = 2;
pub const STUDIO_GIB: u32 = 4;
pub const STUDIO_ROTATE: u32 = 8;
pub const STUDIO_TRACER: u32 = 16;
pub const STUDIO_ZOMGIB: u32 = 32;
pub const STUDIO_TRACER2: u32 = 64;
pub const STUDIO_TRACER3: u32 = 128;
pub const STUDIO_AMBIENT_LIGHT: u32 = 256;
pub const STUDIO_TRACE_HITBOX: u32 = 512;
pub const STUDIO_FORCE_SKYLIGHT: u32 = 1024;
pub const STUDIO_HAS_BUMP: u32 = 65536;
pub const STUDIO_STATIC_PROP: u32 = 536870912;
pub const STUDIO_HAS_BONEINFO: u32 = 1073741824;
pub const STUDIO_HAS_BONEWEIGHTS: u32 = 2147483648;
pub const STUDIO_NF_FLATSHADE: u32 = 1;
pub const STUDIO_NF_CHROME: u32 = 2;
pub const STUDIO_NF_FULLBRIGHT: u32 = 4;
pub const STUDIO_NF_NOMIPS: u32 = 8;
pub const STUDIO_NF_SMOOTH: u32 = 16;
pub const STUDIO_NF_ADDITIVE: u32 = 32;
pub const STUDIO_NF_MASKED: u32 = 64;
pub const STUDIO_NF_NORMALMAP: u32 = 128;
pub const STUDIO_NF_GLOSSMAP: u32 = 256;
pub const STUDIO_NF_GLOSSPOWER: u32 = 512;
pub const STUDIO_NF_LUMA: u32 = 1024;
pub const STUDIO_NF_ALPHASOLID: u32 = 2048;
pub const STUDIO_NF_TWOSIDE: u32 = 4096;
pub const STUDIO_NF_HEIGHTMAP: u32 = 8192;
pub const STUDIO_NF_NODRAW: u32 = 65536;
pub const STUDIO_NF_NODLIGHT: u32 = 131072;
pub const STUDIO_NF_NOSUNLIGHT: u32 = 262144;
pub const STUDIO_NF_HAS_ALPHA: u32 = 1048576;
pub const STUDIO_NF_HAS_DETAIL: u32 = 2097152;
pub const STUDIO_NF_COLORMAP: u32 = 1073741824;
pub const STUDIO_NF_UV_COORDS: u32 = 2147483648;
pub const STUDIO_X: u32 = 1;
pub const STUDIO_Y: u32 = 2;
pub const STUDIO_Z: u32 = 4;
pub const STUDIO_XR: u32 = 8;
pub const STUDIO_YR: u32 = 16;
pub const STUDIO_ZR: u32 = 32;
pub const STUDIO_LX: u32 = 64;
pub const STUDIO_LY: u32 = 128;
pub const STUDIO_LZ: u32 = 256;
pub const STUDIO_LXR: u32 = 512;
pub const STUDIO_LYR: u32 = 1024;
pub const STUDIO_LZR: u32 = 2048;
pub const STUDIO_LINEAR: u32 = 4096;
pub const STUDIO_QUADRATIC_MOTION: u32 = 8192;
pub const STUDIO_RESERVED: u32 = 16384;
pub const STUDIO_TYPES: u32 = 32767;
pub const STUDIO_RLOOP: u32 = 32768;
pub const STUDIO_MOUTH: u32 = 4;
pub const STUDIO_LOOPING: u32 = 1;
pub const STUDIO_SNAP: u32 = 2;
pub const STUDIO_DELTA: u32 = 4;
pub const STUDIO_AUTOPLAY: u32 = 8;
pub const STUDIO_POST: u32 = 16;
pub const STUDIO_ALLZEROS: u32 = 32;
pub const STUDIO_BLENDPOSE: u32 = 64;
pub const STUDIO_CYCLEPOSE: u32 = 128;
pub const STUDIO_REALTIME: u32 = 256;
pub const STUDIO_LOCAL: u32 = 512;
pub const STUDIO_HIDDEN: u32 = 1024;
pub const STUDIO_IKRULES: u32 = 2048;
pub const STUDIO_ACTIVITY: u32 = 4096;
pub const STUDIO_EVENT: u32 = 8192;
pub const STUDIO_WORLD: u32 = 16384;
pub const STUDIO_LIGHT_FROM_ROOT: u32 = 32768;
pub const STUDIO_AL_POST: u32 = 1;
pub const STUDIO_AL_SPLINE: u32 = 2;
pub const STUDIO_AL_XFADE: u32 = 4;
pub const STUDIO_AL_NOBLEND: u32 = 8;
pub const STUDIO_AL_LOCAL: u32 = 16;
pub const STUDIO_AL_POSE: u32 = 32;
pub const BONE_ALWAYS_PROCEDURAL: u32 = 1;
pub const BONE_SCREEN_ALIGN_SPHERE: u32 = 2;
pub const BONE_SCREEN_ALIGN_CYLINDER: u32 = 4;
pub const BONE_JIGGLE_PROCEDURAL: u32 = 8;
pub const BONE_FIXED_ALIGNMENT: u32 = 16;
pub const BONE_USED_BY_HITBOX: u32 = 256;
pub const BONE_USED_BY_ATTACHMENT: u32 = 512;
pub const BONE_USED_BY_VERTEX: u32 = 1024;
pub const BONE_USED_BY_BONE_MERGE: u32 = 2048;
pub const STUDIO_PROC_AXISINTERP: u32 = 1;
pub const STUDIO_PROC_QUATINTERP: u32 = 2;
pub const STUDIO_PROC_AIMATBONE: u32 = 3;
pub const STUDIO_PROC_AIMATATTACH: u32 = 4;
pub const STUDIO_PROC_JIGGLE: u32 = 5;
pub const JIGGLE_IS_FLEXIBLE: u32 = 1;
pub const JIGGLE_IS_RIGID: u32 = 2;
pub const JIGGLE_HAS_YAW_CONSTRAINT: u32 = 4;
pub const JIGGLE_HAS_PITCH_CONSTRAINT: u32 = 8;
pub const JIGGLE_HAS_ANGLE_CONSTRAINT: u32 = 16;
pub const JIGGLE_HAS_LENGTH_CONSTRAINT: u32 = 32;
pub const JIGGLE_HAS_BASE_SPRING: u32 = 64;
pub const JIGGLE_IS_BOING: u32 = 128;
pub const MAXEVENTSTRING: u32 = 64;
pub const STUDIO_ATTACHMENT_LOCAL: u32 = 1;
pub const IK_SELF: u32 = 1;
pub const IK_WORLD: u32 = 2;
pub const IK_GROUND: u32 = 3;
pub const IK_RELEASE: u32 = 4;
pub const IK_ATTACHMENT: u32 = 5;
pub const IK_UNLATCH: u32 = 6;
pub const FBEAM_STARTENTITY: u32 = 1;
pub const FBEAM_ENDENTITY: u32 = 2;
pub const FBEAM_FADEIN: u32 = 4;
pub const FBEAM_FADEOUT: u32 = 8;
pub const FBEAM_SINENOISE: u32 = 16;
pub const FBEAM_SOLID: u32 = 32;
pub const FBEAM_SHADEIN: u32 = 64;
pub const FBEAM_SHADEOUT: u32 = 128;
pub const FBEAM_STARTVISIBLE: u32 = 268435456;
pub const FBEAM_ENDVISIBLE: u32 = 536870912;
pub const FBEAM_ISACTIVE: u32 = 1073741824;
pub const FBEAM_FOREVER: u32 = 2147483648;
pub const TRACER_COLORINDEX_DEFAULT: u32 = 4;
pub const TENTPRIORITY_LOW: u32 = 0;
pub const TENTPRIORITY_HIGH: u32 = 1;
pub const FTENT_NONE: u32 = 0;
pub const FTENT_SINEWAVE: u32 = 1;
pub const FTENT_GRAVITY: u32 = 2;
pub const FTENT_ROTATE: u32 = 4;
pub const FTENT_SLOWGRAVITY: u32 = 8;
pub const FTENT_SMOKETRAIL: u32 = 16;
pub const FTENT_COLLIDEWORLD: u32 = 32;
pub const FTENT_FLICKER: u32 = 64;
pub const FTENT_FADEOUT: u32 = 128;
pub const FTENT_SPRANIMATE: u32 = 256;
pub const FTENT_HITSOUND: u32 = 512;
pub const FTENT_SPIRAL: u32 = 1024;
pub const FTENT_SPRCYCLE: u32 = 2048;
pub const FTENT_COLLIDEALL: u32 = 4096;
pub const FTENT_PERSIST: u32 = 8192;
pub const FTENT_COLLIDEKILL: u32 = 16384;
pub const FTENT_PLYRATTACHMENT: u32 = 32768;
pub const FTENT_SPRANIMATELOOP: u32 = 65536;
pub const FTENT_SPARKSHOWER: u32 = 131072;
pub const FTENT_NOMODEL: u32 = 262144;
pub const FTENT_CLIENTCUSTOM: u32 = 524288;
pub const FTENT_SCALE: u32 = 1048576;
pub const GFL_NOMODELS: u32 = 1;
pub const GFL_NOSKILLS: u32 = 2;
pub const GFL_RENDER_PICBUTTON_TEXT: u32 = 4;
pub const GFL_HD_BACKGROUND: u32 = 8;
pub const GFL_ANIMATED_TITLE: u32 = 16;
pub const GAMEINFO_VERSION: u32 = 2;
pub const FS_API_VERSION: u32 = 4;
#[allow(unsafe_code)]
pub const FS_API_CREATEINTERFACE_TAG: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"XashFileSystem004\0") };
#[allow(unsafe_code)]
pub const FILESYSTEM_INTERFACE_VERSION: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"VFileSystem009\0") };
#[allow(unsafe_code)]
pub const GET_FS_API: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"GetFSAPI\0") };
pub const PROTOCOL_VERSION: u32 = 49;
pub const svc_bad: u32 = 0;
pub const svc_nop: u32 = 1;
pub const svc_disconnect: u32 = 2;
pub const svc_event: u32 = 3;
pub const svc_changing: u32 = 4;
pub const svc_setview: u32 = 5;
pub const svc_sound: u32 = 6;
pub const svc_time: u32 = 7;
pub const svc_print: u32 = 8;
pub const svc_stufftext: u32 = 9;
pub const svc_setangle: u32 = 10;
pub const svc_serverdata: u32 = 11;
pub const svc_lightstyle: u32 = 12;
pub const svc_updateuserinfo: u32 = 13;
pub const svc_deltatable: u32 = 14;
pub const svc_clientdata: u32 = 15;
pub const svc_resource: u32 = 16;
pub const svc_pings: u32 = 17;
pub const svc_particle: u32 = 18;
pub const svc_restoresound: u32 = 19;
pub const svc_spawnstatic: u32 = 20;
pub const svc_event_reliable: u32 = 21;
pub const svc_spawnbaseline: u32 = 22;
pub const svc_temp_entity: u32 = 23;
pub const svc_setpause: u32 = 24;
pub const svc_signonnum: u32 = 25;
pub const svc_centerprint: u32 = 26;
pub const svc_intermission: u32 = 30;
pub const svc_finale: u32 = 31;
pub const svc_cdtrack: u32 = 32;
pub const svc_restore: u32 = 33;
pub const svc_cutscene: u32 = 34;
pub const svc_weaponanim: u32 = 35;
pub const svc_bspdecal: u32 = 36;
pub const svc_roomtype: u32 = 37;
pub const svc_addangle: u32 = 38;
pub const svc_usermessage: u32 = 39;
pub const svc_packetentities: u32 = 40;
pub const svc_deltapacketentities: u32 = 41;
pub const svc_choke: u32 = 42;
pub const svc_resourcelist: u32 = 43;
pub const svc_deltamovevars: u32 = 44;
pub const svc_resourcerequest: u32 = 45;
pub const svc_customization: u32 = 46;
pub const svc_crosshairangle: u32 = 47;
pub const svc_soundfade: u32 = 48;
pub const svc_filetxferfailed: u32 = 49;
pub const svc_hltv: u32 = 50;
pub const svc_director: u32 = 51;
pub const svc_voiceinit: u32 = 52;
pub const svc_voicedata: u32 = 53;
pub const svc_resourcelocation: u32 = 56;
pub const svc_querycvarvalue: u32 = 57;
pub const svc_querycvarvalue2: u32 = 58;
pub const svc_exec: u32 = 59;
pub const svc_lastmsg: u32 = 59;
pub const clc_bad: u32 = 0;
pub const clc_nop: u32 = 1;
pub const clc_move: u32 = 2;
pub const clc_stringcmd: u32 = 3;
pub const clc_delta: u32 = 4;
pub const clc_resourcelist: u32 = 5;
pub const clc_fileconsistency: u32 = 7;
pub const clc_voicedata: u32 = 8;
pub const clc_requestcvarvalue: u32 = 9;
pub const clc_requestcvarvalue2: u32 = 10;
pub const clc_lastmsg: u32 = 11;
pub const MAX_VISIBLE_PACKET_BITS: u32 = 11;
pub const MAX_VISIBLE_PACKET: u32 = 2048;
pub const MAX_VISIBLE_PACKET_VIS_BYTES: u32 = 256;
pub const MAX_CLIENT_BITS: u32 = 5;
pub const MAX_CLIENTS: u32 = 32;
pub const MAX_WEAPON_BITS: u32 = 6;
pub const MAX_WEAPONS: u32 = 64;
pub const MAX_EVENT_BITS: u32 = 10;
pub const MAX_EVENTS: u32 = 1024;
pub const MAX_MODEL_BITS: u32 = 12;
pub const MAX_MODELS: u32 = 4096;
pub const MAX_SOUND_BITS: u32 = 11;
pub const MAX_SOUNDS: u32 = 2048;
pub const MAX_SOUNDS_NONSENTENCE: u32 = 2048;
pub const MAX_ENTITY_BITS: u32 = 13;
pub const MAX_EDICTS: u32 = 8192;
pub const MAX_EDICTS_BYTES: u32 = 1024;
pub const LAST_EDICT: u32 = 8191;
pub const MIN_EDICTS: u32 = 64;
pub const MAX_CUSTOM_BITS: u32 = 10;
pub const MAX_CUSTOM: u32 = 1024;
pub const MAX_USER_MESSAGES: u32 = 197;
pub const MAX_DLIGHTS: u32 = 32;
pub const MAX_ELIGHTS: u32 = 128;
pub const MAX_LIGHTSTYLES: u32 = 256;
pub const MAX_RENDER_DECALS: u32 = 4096;
pub const MAX_SND_FLAGS_BITS: u32 = 14;
pub const MAX_SND_CHAN_BITS: u32 = 4;
pub const SND_VOLUME: u32 = 1;
pub const SND_ATTENUATION: u32 = 2;
pub const SND_SEQUENCE: u32 = 4;
pub const SND_PITCH: u32 = 8;
pub const SND_SENTENCE: u32 = 16;
pub const SND_STOP: u32 = 32;
pub const SND_CHANGE_VOL: u32 = 64;
pub const SND_CHANGE_PITCH: u32 = 128;
pub const SND_SPAWNING: u32 = 256;
pub const SND_LOCALSOUND: u32 = 512;
pub const SND_STOP_LOOPING: u32 = 1024;
pub const SND_FILTER_CLIENT: u32 = 2048;
pub const SND_RESTORE_POSITION: u32 = 4096;
pub const FDECAL_PERMANENT: u32 = 1;
pub const FDECAL_USE_LANDMARK: u32 = 2;
pub const FDECAL_CUSTOM: u32 = 4;
pub const FDECAL_DONTSAVE: u32 = 32;
pub const FDECAL_STUDIO: u32 = 64;
pub const FDECAL_LOCAL_SPACE: u32 = 128;
pub const GAME_SINGLEPLAYER: u32 = 0;
pub const GAME_DEATHMATCH: u32 = 1;
pub const GAME_COOP: u32 = 2;
pub const GAME_TEAMPLAY: u32 = 4;
pub const NUM_BACKUP_COMMAND_BITS: u32 = 4;
pub const MAX_TOTAL_CMDS: u32 = 32;
pub const MAX_RESOURCES: u32 = 8192;
pub const MAX_RESOURCE_BITS: u32 = 13;
pub const FRAGMENT_MIN_SIZE: u32 = 508;
pub const FRAGMENT_DEFAULT_SIZE: u32 = 1200;
pub const FRAGMENT_MAX_SIZE: u32 = 64000;
pub const FRAGMENT_LOCAL_SIZE: u32 = 64000;
pub const PROTOCOL_VERSION_QUAKE: u32 = 15;
pub const svc_updatestat: u32 = 3;
pub const svc_version: u32 = 4;
pub const svc_updatename: u32 = 13;
pub const svc_updatefrags: u32 = 14;
pub const svc_stopsound: u32 = 16;
pub const svc_updatecolors: u32 = 17;
pub const svc_damage: u32 = 19;
pub const svc_spawnbinary: u32 = 21;
pub const svc_killedmonster: u32 = 27;
pub const svc_foundsecret: u32 = 28;
pub const svc_spawnstaticsound: u32 = 29;
pub const svc_sellscreen: u32 = 33;
pub const svc_showlmp: u32 = 35;
pub const svc_hidelmp: u32 = 36;
pub const svc_skybox: u32 = 37;
pub const svc_skyboxsize: u32 = 50;
pub const svc_fog: u32 = 51;
pub const U_MOREBITS: u32 = 1;
pub const U_ORIGIN1: u32 = 2;
pub const U_ORIGIN2: u32 = 4;
pub const U_ORIGIN3: u32 = 8;
pub const U_ANGLE2: u32 = 16;
pub const U_NOLERP: u32 = 32;
pub const U_FRAME: u32 = 64;
pub const U_SIGNAL: u32 = 128;
pub const U_ANGLE1: u32 = 256;
pub const U_ANGLE3: u32 = 512;
pub const U_MODEL: u32 = 1024;
pub const U_COLORMAP: u32 = 2048;
pub const U_SKIN: u32 = 4096;
pub const U_EFFECTS: u32 = 8192;
pub const U_LONGENTITY: u32 = 16384;
pub const U_TRANS: u32 = 32768;
pub const SU_VIEWHEIGHT: u32 = 1;
pub const SU_IDEALPITCH: u32 = 2;
pub const SU_PUNCH1: u32 = 4;
pub const SU_PUNCH2: u32 = 8;
pub const SU_PUNCH3: u32 = 16;
pub const SU_VELOCITY1: u32 = 32;
pub const SU_VELOCITY2: u32 = 64;
pub const SU_VELOCITY3: u32 = 128;
pub const SU_ITEMS: u32 = 512;
pub const SU_ONGROUND: u32 = 1024;
pub const SU_INWATER: u32 = 2048;
pub const SU_WEAPONFRAME: u32 = 4096;
pub const SU_ARMOR: u32 = 8192;
pub const SU_WEAPON: u32 = 16384;
pub const NET_EXT_SPLITSIZE: u32 = 1;
pub const PROTOCOL_LEGACY_VERSION: u32 = 48;
pub const svc_legacy_modelindex: u32 = 31;
pub const svc_legacy_soundindex: u32 = 28;
pub const svc_legacy_eventindex: u32 = 34;
pub const svc_legacy_ambientsound: u32 = 29;
pub const svc_legacy_chokecount: u32 = 42;
pub const svc_legacy_event: u32 = 27;
pub const svc_legacy_changing: u32 = 3;
pub const clc_legacy_userinfo: u32 = 6;
pub const SND_LEGACY_LARGE_INDEX: u32 = 4;
pub const MAX_LEGACY_ENTITY_BITS: u32 = 12;
pub const MAX_LEGACY_WEAPON_BITS: u32 = 5;
pub const MAX_LEGACY_MODEL_BITS: u32 = 11;
pub const MAX_LEGACY_TOTAL_CMDS: u32 = 16;
pub const MAX_LEGACY_BACKUP_CMDS: u32 = 12;
pub const MAX_LEGACY_EDICTS: u32 = 4096;
pub const MIN_LEGACY_EDICTS: u32 = 30;
pub const MS_SCAN_REQUEST: &[u8; 13] = b"1\xFF0.0.0.0:0\0\0";
pub const PROTOCOL_GOLDSRC_VERSION: u32 = 48;
pub const svc_goldsrc_version: u32 = 4;
pub const svc_goldsrc_stopsound: u32 = 16;
pub const svc_goldsrc_damage: u32 = 19;
pub const svc_goldsrc_killedmonster: u32 = 27;
pub const svc_goldsrc_foundsecret: u32 = 28;
pub const svc_goldsrc_spawnstaticsound: u32 = 29;
pub const svc_goldsrc_decalname: u32 = 36;
pub const svc_goldsrc_sendextrainfo: u32 = 54;
pub const svc_goldsrc_timescale: u32 = 55;
pub const clc_goldsrc_hltv: u32 = 9;
pub const clc_goldsrc_requestcvarvalue: u32 = 10;
pub const clc_goldsrc_requestcvarvalue2: u32 = 11;
pub const clc_goldsrc_lastmsg: u32 = 11;
pub const MAX_GOLDSRC_BACKUP_CMDS: u32 = 8;
pub const MAX_GOLDSRC_TOTAL_CMDS: u32 = 16;
pub const MAX_GOLDSRC_EXTENDED_TOTAL_CMDS: u32 = 62;
pub const MAX_GOLDSRC_MODEL_BITS: u32 = 10;
pub const MAX_GOLDSRC_RESOURCE_BITS: u32 = 12;
pub const MAX_GOLDSRC_ENTITY_BITS: u32 = 11;
#[allow(unsafe_code)]
pub const A2A_PING: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"ping\0") };
#[allow(unsafe_code)]
pub const A2A_ACK: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"ack\0") };
#[allow(unsafe_code)]
pub const A2A_INFO: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"info\0") };
#[allow(unsafe_code)]
pub const A2A_NETINFO: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"netinfo\0") };
#[allow(unsafe_code)]
pub const A2A_GOLDSRC_PING: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"i\0") };
#[allow(unsafe_code)]
pub const A2A_GOLDSRC_ACK: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"j\0") };
#[allow(unsafe_code)]
pub const A2S_GOLDSRC_INFO: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"TSource Engine Query\0") };
pub const A2S_GOLDSRC_RULES: u8 = 86u8;
pub const A2S_GOLDSRC_PLAYERS: u8 = 85u8;
pub const S2A_GOLDSRC_INFO: u8 = 73u8;
pub const S2A_GOLDSRC_RULES: u8 = 69u8;
pub const S2A_GOLDSRC_PLAYERS: u8 = 68u8;
#[allow(unsafe_code)]
pub const M2S_CHALLENGE: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"s\0") };
#[allow(unsafe_code)]
pub const M2S_NAT_CONNECT: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"c\0") };
#[allow(unsafe_code)]
pub const S2M_INFO: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"0\n\0") };
#[allow(unsafe_code)]
pub const C2S_BANDWIDTHTEST: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"bandwidth\0") };
#[allow(unsafe_code)]
pub const C2S_GETCHALLENGE: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"getchallenge\0") };
#[allow(unsafe_code)]
pub const C2S_CONNECT: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"connect\0") };
#[allow(unsafe_code)]
pub const C2S_RCON: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"rcon\0") };
#[allow(unsafe_code)]
pub const S2C_BANDWIDTHTEST: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"testpacket\0") };
#[allow(unsafe_code)]
pub const S2C_CHALLENGE: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"challenge\0") };
#[allow(unsafe_code)]
pub const S2C_CONNECTION: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"client_connect\0") };
#[allow(unsafe_code)]
pub const S2C_ERRORMSG: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"errormsg\0") };
#[allow(unsafe_code)]
pub const S2C_REJECT: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"disconnect\0") };
pub const S2C_GOLDSRC_REJECT_BADPASSWORD: u8 = 56u8;
pub const S2C_GOLDSRC_REJECT: u8 = 57u8;
#[allow(unsafe_code)]
pub const S2C_GOLDSRC_CHALLENGE: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"A00000000\0") };
#[allow(unsafe_code)]
pub const S2C_GOLDSRC_CONNECTION: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"B\0") };
#[allow(unsafe_code)]
pub const A2C_PRINT: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"print\0") };
pub const A2C_GOLDSRC_PRINT: u8 = 108u8;
#[allow(unsafe_code)]
pub const M2A_SERVERSLIST: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"f\0") };
pub const REF_API_VERSION: u32 = 10;
pub const VID_SCREENSHOT: u32 = 0;
pub const VID_LEVELSHOT: u32 = 1;
pub const VID_MINISHOT: u32 = 2;
pub const VID_MAPSHOT: u32 = 3;
pub const VID_SNAPSHOT: u32 = 4;
pub const kRenderScreenFadeModulate: u32 = 4096;
pub const SKYBOX_MAX_SIDES: u32 = 6;
#[allow(unsafe_code)]
pub const REF_DEFAULT_TEXTURE: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"*default\0") };
#[allow(unsafe_code)]
pub const REF_GRAY_TEXTURE: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"*gray\0") };
#[allow(unsafe_code)]
pub const REF_WHITE_TEXTURE: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"*white\0") };
#[allow(unsafe_code)]
pub const REF_BLACK_TEXTURE: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"*black\0") };
#[allow(unsafe_code)]
pub const REF_PARTICLE_TEXTURE: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"*particle\0") };
#[allow(unsafe_code)]
pub const GET_REF_API: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"GetRefAPI\0") };
pub const PIC_NEAREST: u32 = 1;
pub const PIC_KEEP_SOURCE: u32 = 2;
pub const PIC_NOFLIP_TGA: u32 = 4;
pub const PIC_EXPAND_SOURCE: u32 = 8;
pub const PFILE_IGNOREBRACKET: u32 = 1;
pub const PFILE_HANDLECOLON: u32 = 2;
pub const PFILE_IGNOREHASHCMT: u32 = 4;
pub const MENU_EXTENDED_API_VERSION: u32 = 1;
#[allow(unsafe_code)]
pub const PLATFORM_UPDATE_PAGE: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"PlatformUpdatePage\0") };
#[allow(unsafe_code)]
pub const GENERIC_UPDATE_PAGE: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"GenericUpdatePage\0") };
pub type byte = u8;
pub type vec_t = f32;
pub type vec2_t = [vec_t; 2usize];
pub type vec3_t = [vec_t; 3usize];
pub type vec4_t = [vec_t; 4usize];
pub type quat_t = [vec_t; 4usize];
pub type rgba_t = [byte; 4usize];
pub type rgb_t = [byte; 3usize];
pub type matrix3x4 = [[vec_t; 4usize]; 3usize];
pub type matrix4x4 = [[vec_t; 4usize]; 4usize];
pub type poolhandle_t = u32;
pub const false_: _bindgen_ty_2 = 0;
pub const true_: _bindgen_ty_2 = 1;
pub type _bindgen_ty_2 = ::core::ffi::c_uint;
pub type qboolean = ::core::ffi::c_int;
pub type dword = ::core::ffi::c_uint;
pub type string = [::core::ffi::c_char; 256usize];
pub type fs_offset_t = off_t;
pub type fs_size_t = isize;
pub type pfnCreateInterface_t = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::core::ffi::c_char,
        arg2: *mut ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_void,
>;
pub type mplane_t = mplane_s;
pub type mstudiobone_t = mstudiobone_s;
pub type mstudioanim_t = mstudioanim_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub union float_bits_t {
    pub fl: f32,
    pub u: u32,
    pub i: i32,
}
pub const kRenderNormal: _bindgen_ty_3 = 0;
pub const kRenderTransColor: _bindgen_ty_3 = 1;
pub const kRenderTransTexture: _bindgen_ty_3 = 2;
pub const kRenderGlow: _bindgen_ty_3 = 3;
pub const kRenderTransAlpha: _bindgen_ty_3 = 4;
pub const kRenderTransAdd: _bindgen_ty_3 = 5;
pub type _bindgen_ty_3 = ::core::ffi::c_uint;
pub const kRenderFxNone: _bindgen_ty_4 = 0;
pub const kRenderFxPulseSlow: _bindgen_ty_4 = 1;
pub const kRenderFxPulseFast: _bindgen_ty_4 = 2;
pub const kRenderFxPulseSlowWide: _bindgen_ty_4 = 3;
pub const kRenderFxPulseFastWide: _bindgen_ty_4 = 4;
pub const kRenderFxFadeSlow: _bindgen_ty_4 = 5;
pub const kRenderFxFadeFast: _bindgen_ty_4 = 6;
pub const kRenderFxSolidSlow: _bindgen_ty_4 = 7;
pub const kRenderFxSolidFast: _bindgen_ty_4 = 8;
pub const kRenderFxStrobeSlow: _bindgen_ty_4 = 9;
pub const kRenderFxStrobeFast: _bindgen_ty_4 = 10;
pub const kRenderFxStrobeFaster: _bindgen_ty_4 = 11;
pub const kRenderFxFlickerSlow: _bindgen_ty_4 = 12;
pub const kRenderFxFlickerFast: _bindgen_ty_4 = 13;
pub const kRenderFxNoDissipation: _bindgen_ty_4 = 14;
pub const kRenderFxDistort: _bindgen_ty_4 = 15;
pub const kRenderFxHologram: _bindgen_ty_4 = 16;
pub const kRenderFxDeadPlayer: _bindgen_ty_4 = 17;
pub const kRenderFxExplode: _bindgen_ty_4 = 18;
pub const kRenderFxGlowShell: _bindgen_ty_4 = 19;
pub const kRenderFxClampMinScale: _bindgen_ty_4 = 20;
pub const kRenderFxLightMultiplier: _bindgen_ty_4 = 21;
pub type _bindgen_ty_4 = ::core::ffi::c_uint;
pub type func_t = ::core::ffi::c_int;
pub type string_t = ::core::ffi::c_int;
pub type word = ::core::ffi::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct color24 {
    pub r: byte,
    pub g: byte,
    pub b: byte,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct colorVec {
    pub r: ::core::ffi::c_uint,
    pub g: ::core::ffi::c_uint,
    pub b: ::core::ffi::c_uint,
    pub a: ::core::ffi::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct link_s {
    pub prev: *mut link_s,
    pub next: *mut link_s,
}
pub type link_t = link_s;
pub type edict_t = edict_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct plane_t {
    pub normal: vec3_t,
    pub dist: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct trace_t {
    pub allsolid: qboolean,
    pub startsolid: qboolean,
    pub inopen: qboolean,
    pub inwater: qboolean,
    pub fraction: f32,
    pub endpos: vec3_t,
    pub plane: plane_t,
    pub ent: *mut edict_t,
    pub hitgroup: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct con_nprint_s {
    pub index: ::core::ffi::c_int,
    pub time_to_live: f32,
    pub color: [f32; 3usize],
}
pub type con_nprint_t = con_nprint_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct usercmd_s {
    pub lerp_msec: ::core::ffi::c_short,
    pub msec: byte,
    pub viewangles: vec3_t,
    pub forwardmove: f32,
    pub sidemove: f32,
    pub upmove: f32,
    pub lightlevel: byte,
    pub buttons: ::core::ffi::c_ushort,
    pub impulse: byte,
    pub weaponselect: byte,
    pub impact_index: ::core::ffi::c_int,
    pub impact_position: vec3_t,
}
pub type usercmd_t = usercmd_s;
pub const netadrtype_e_NA_UNDEFINED: netadrtype_e = 0;
pub const netadrtype_e_NA_LOOPBACK: netadrtype_e = 1;
pub const netadrtype_e_NA_BROADCAST: netadrtype_e = 2;
pub const netadrtype_e_NA_IP: netadrtype_e = 3;
pub const netadrtype_e_NA_IPX: netadrtype_e = 4;
pub const netadrtype_e_NA_BROADCAST_IPX: netadrtype_e = 5;
pub const netadrtype_e_NA_IP6: netadrtype_e = 6;
pub const netadrtype_e_NA_MULTICAST_IP6: netadrtype_e = 7;
pub type netadrtype_e = ::core::ffi::c_uint;
pub use self::netadrtype_e as netadrtype_t;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct netadr_s {
    pub type_: u16,
    pub ip6_0: [u8; 2usize],
    pub __bindgen_anon_1: netadr_s__bindgen_ty_1,
    pub port: u16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union netadr_s__bindgen_ty_1 {
    pub ip6_1: [u8; 14usize],
    pub __bindgen_anon_1: netadr_s__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct netadr_s__bindgen_ty_1__bindgen_ty_1 {
    pub __bindgen_anon_1: netadr_s__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub ipx: [u8; 10usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union netadr_s__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub ip: [u8; 4usize],
    pub ip4: u32,
}
pub type netadr_t = netadr_s;
pub type net_api_response_func_t =
    ::core::option::Option<unsafe extern "C" fn(response: *mut net_response_s)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct net_adrlist_s {
    pub next: *mut net_adrlist_s,
    pub remote_address: netadr_t,
}
pub type net_adrlist_t = net_adrlist_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct net_response_s {
    pub error: ::core::ffi::c_int,
    pub context: ::core::ffi::c_int,
    pub type_: ::core::ffi::c_int,
    pub remote_address: netadr_t,
    pub ping: f64,
    pub response: *mut ::core::ffi::c_void,
}
pub type net_response_t = net_response_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct net_status_s {
    pub connected: ::core::ffi::c_int,
    pub local_address: netadr_t,
    pub remote_address: netadr_t,
    pub packet_loss: ::core::ffi::c_int,
    pub latency: f64,
    pub connection_time: f64,
    pub rate: f64,
}
pub type net_status_t = net_status_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct net_api_s {
    pub InitNetworking: ::core::option::Option<unsafe extern "C" fn()>,
    pub Status: ::core::option::Option<unsafe extern "C" fn(status: *mut net_status_s)>,
    pub SendRequest: ::core::option::Option<
        unsafe extern "C" fn(
            context: ::core::ffi::c_int,
            request: ::core::ffi::c_int,
            flags: ::core::ffi::c_int,
            timeout: f64,
            remote_address: *mut netadr_s,
            response: net_api_response_func_t,
        ),
    >,
    pub CancelRequest: ::core::option::Option<unsafe extern "C" fn(context: ::core::ffi::c_int)>,
    pub CancelAllRequests: ::core::option::Option<unsafe extern "C" fn()>,
    pub AdrToString: ::core::option::Option<
        unsafe extern "C" fn(a: *mut netadr_s) -> *const ::core::ffi::c_char,
    >,
    pub CompareAdr: ::core::option::Option<
        unsafe extern "C" fn(a: *mut netadr_s, b: *mut netadr_s) -> ::core::ffi::c_int,
    >,
    pub StringToAdr: ::core::option::Option<
        unsafe extern "C" fn(s: *mut ::core::ffi::c_char, a: *mut netadr_s) -> ::core::ffi::c_int,
    >,
    pub ValueForKey: ::core::option::Option<
        unsafe extern "C" fn(
            s: *const ::core::ffi::c_char,
            key: *const ::core::ffi::c_char,
        ) -> *const ::core::ffi::c_char,
    >,
    pub RemoveKey: ::core::option::Option<
        unsafe extern "C" fn(s: *mut ::core::ffi::c_char, key: *const ::core::ffi::c_char),
    >,
    pub SetValueForKey: ::core::option::Option<
        unsafe extern "C" fn(
            s: *mut ::core::ffi::c_char,
            key: *const ::core::ffi::c_char,
            value: *const ::core::ffi::c_char,
            maxsize: ::core::ffi::c_int,
        ),
    >,
}
pub type net_api_t = net_api_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct efrag_s {
    pub leaf: *mut mleaf_s,
    pub leafnext: *mut efrag_s,
    pub entity: *mut cl_entity_s,
    pub entnext: *mut efrag_s,
}
pub type efrag_t = efrag_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mouth_t {
    pub mouthopen: byte,
    pub sndcount: byte,
    pub sndavg: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct latchedvars_t {
    pub prevanimtime: f32,
    pub sequencetime: f32,
    pub prevseqblending: [byte; 2usize],
    pub prevorigin: vec3_t,
    pub prevangles: vec3_t,
    pub prevsequence: ::core::ffi::c_int,
    pub prevframe: f32,
    pub prevcontroller: [byte; 4usize],
    pub prevblending: [byte; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct position_history_t {
    pub animtime: f32,
    pub origin: vec3_t,
    pub angles: vec3_t,
}
pub type cl_entity_t = cl_entity_s;
pub type entity_state_t = entity_state_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct entity_state_s {
    pub entityType: ::core::ffi::c_int,
    pub number: ::core::ffi::c_int,
    pub msg_time: f32,
    pub messagenum: ::core::ffi::c_int,
    pub origin: vec3_t,
    pub angles: vec3_t,
    pub modelindex: ::core::ffi::c_int,
    pub sequence: ::core::ffi::c_int,
    pub frame: f32,
    pub colormap: ::core::ffi::c_int,
    pub skin: ::core::ffi::c_short,
    pub solid: ::core::ffi::c_short,
    pub effects: ::core::ffi::c_int,
    pub scale: f32,
    pub eflags: byte,
    pub rendermode: ::core::ffi::c_int,
    pub renderamt: ::core::ffi::c_int,
    pub rendercolor: color24,
    pub renderfx: ::core::ffi::c_int,
    pub movetype: ::core::ffi::c_int,
    pub animtime: f32,
    pub framerate: f32,
    pub body: ::core::ffi::c_int,
    pub controller: [byte; 4usize],
    pub blending: [byte; 4usize],
    pub velocity: vec3_t,
    pub mins: vec3_t,
    pub maxs: vec3_t,
    pub aiment: ::core::ffi::c_int,
    pub owner: ::core::ffi::c_int,
    pub friction: f32,
    pub gravity: f32,
    pub team: ::core::ffi::c_int,
    pub playerclass: ::core::ffi::c_int,
    pub health: ::core::ffi::c_int,
    pub spectator: qboolean,
    pub weaponmodel: ::core::ffi::c_int,
    pub gaitsequence: ::core::ffi::c_int,
    pub basevelocity: vec3_t,
    pub usehull: ::core::ffi::c_int,
    pub oldbuttons: ::core::ffi::c_int,
    pub onground: ::core::ffi::c_int,
    pub iStepLeft: ::core::ffi::c_int,
    pub flFallVelocity: f32,
    pub fov: f32,
    pub weaponanim: ::core::ffi::c_int,
    pub startpos: vec3_t,
    pub endpos: vec3_t,
    pub impacttime: f32,
    pub starttime: f32,
    pub iuser1: ::core::ffi::c_int,
    pub iuser2: ::core::ffi::c_int,
    pub iuser3: ::core::ffi::c_int,
    pub iuser4: ::core::ffi::c_int,
    pub fuser1: f32,
    pub fuser2: f32,
    pub fuser3: f32,
    pub fuser4: f32,
    pub vuser1: vec3_t,
    pub vuser2: vec3_t,
    pub vuser3: vec3_t,
    pub vuser4: vec3_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clientdata_s {
    pub origin: vec3_t,
    pub velocity: vec3_t,
    pub viewmodel: ::core::ffi::c_int,
    pub punchangle: vec3_t,
    pub flags: ::core::ffi::c_int,
    pub waterlevel: ::core::ffi::c_int,
    pub watertype: ::core::ffi::c_int,
    pub view_ofs: vec3_t,
    pub health: f32,
    pub bInDuck: ::core::ffi::c_int,
    pub weapons: ::core::ffi::c_int,
    pub flTimeStepSound: ::core::ffi::c_int,
    pub flDuckTime: ::core::ffi::c_int,
    pub flSwimTime: ::core::ffi::c_int,
    pub waterjumptime: ::core::ffi::c_int,
    pub maxspeed: f32,
    pub fov: f32,
    pub weaponanim: ::core::ffi::c_int,
    pub m_iId: ::core::ffi::c_int,
    pub ammo_shells: ::core::ffi::c_int,
    pub ammo_nails: ::core::ffi::c_int,
    pub ammo_cells: ::core::ffi::c_int,
    pub ammo_rockets: ::core::ffi::c_int,
    pub m_flNextAttack: f32,
    pub tfstate: ::core::ffi::c_int,
    pub pushmsec: ::core::ffi::c_int,
    pub deadflag: ::core::ffi::c_int,
    pub physinfo: [::core::ffi::c_char; 256usize],
    pub iuser1: ::core::ffi::c_int,
    pub iuser2: ::core::ffi::c_int,
    pub iuser3: ::core::ffi::c_int,
    pub iuser4: ::core::ffi::c_int,
    pub fuser1: f32,
    pub fuser2: f32,
    pub fuser3: f32,
    pub fuser4: f32,
    pub vuser1: vec3_t,
    pub vuser2: vec3_t,
    pub vuser3: vec3_t,
    pub vuser4: vec3_t,
}
pub type clientdata_t = clientdata_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct weapon_data_s {
    pub m_iId: ::core::ffi::c_int,
    pub m_iClip: ::core::ffi::c_int,
    pub m_flNextPrimaryAttack: f32,
    pub m_flNextSecondaryAttack: f32,
    pub m_flTimeWeaponIdle: f32,
    pub m_fInReload: ::core::ffi::c_int,
    pub m_fInSpecialReload: ::core::ffi::c_int,
    pub m_flNextReload: f32,
    pub m_flPumpTime: f32,
    pub m_fReloadTime: f32,
    pub m_fAimedDamage: f32,
    pub m_fNextAimBonus: f32,
    pub m_fInZoom: ::core::ffi::c_int,
    pub m_iWeaponState: ::core::ffi::c_int,
    pub iuser1: ::core::ffi::c_int,
    pub iuser2: ::core::ffi::c_int,
    pub iuser3: ::core::ffi::c_int,
    pub iuser4: ::core::ffi::c_int,
    pub fuser1: f32,
    pub fuser2: f32,
    pub fuser3: f32,
    pub fuser4: f32,
}
pub type weapon_data_t = weapon_data_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct local_state_s {
    pub playerstate: entity_state_t,
    pub client: clientdata_t,
    pub weapondata: [weapon_data_t; 64usize],
}
pub type local_state_t = local_state_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct event_args_s {
    pub flags: ::core::ffi::c_int,
    pub entindex: ::core::ffi::c_int,
    pub origin: [f32; 3usize],
    pub angles: [f32; 3usize],
    pub velocity: [f32; 3usize],
    pub ducking: ::core::ffi::c_int,
    pub fparam1: f32,
    pub fparam2: f32,
    pub iparam1: ::core::ffi::c_int,
    pub iparam2: ::core::ffi::c_int,
    pub bparam1: ::core::ffi::c_int,
    pub bparam2: ::core::ffi::c_int,
}
pub type event_args_t = event_args_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_entity_s {
    pub index: ::core::ffi::c_int,
    pub player: qboolean,
    pub baseline: entity_state_t,
    pub prevstate: entity_state_t,
    pub curstate: entity_state_t,
    pub current_position: ::core::ffi::c_int,
    pub ph: [position_history_t; 64usize],
    pub mouth: mouth_t,
    pub latched: latchedvars_t,
    pub lastmove: f32,
    pub origin: vec3_t,
    pub angles: vec3_t,
    pub attachment: [vec3_t; 4usize],
    pub trivial_accept: ::core::ffi::c_int,
    pub model: *mut model_s,
    pub efrag: *mut efrag_s,
    pub topnode: *mut mnode_s,
    pub syncbase: f32,
    pub visframe: ::core::ffi::c_int,
    pub cvFloorColor: colorVec,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ref_params_s {
    pub vieworg: vec3_t,
    pub viewangles: vec3_t,
    pub forward: vec3_t,
    pub right: vec3_t,
    pub up: vec3_t,
    pub frametime: f32,
    pub time: f32,
    pub intermission: ::core::ffi::c_int,
    pub paused: ::core::ffi::c_int,
    pub spectator: ::core::ffi::c_int,
    pub onground: ::core::ffi::c_int,
    pub waterlevel: ::core::ffi::c_int,
    pub simvel: vec3_t,
    pub simorg: vec3_t,
    pub viewheight: vec3_t,
    pub idealpitch: f32,
    pub cl_viewangles: vec3_t,
    pub health: ::core::ffi::c_int,
    pub crosshairangle: vec3_t,
    pub viewsize: f32,
    pub punchangle: vec3_t,
    pub maxclients: ::core::ffi::c_int,
    pub viewentity: ::core::ffi::c_int,
    pub playernum: ::core::ffi::c_int,
    pub max_entities: ::core::ffi::c_int,
    pub demoplayback: ::core::ffi::c_int,
    pub hardware: ::core::ffi::c_int,
    pub smoothing: ::core::ffi::c_int,
    pub cmd: *mut usercmd_s,
    pub movevars: *mut movevars_s,
    pub viewport: [::core::ffi::c_int; 4usize],
    pub nextView: ::core::ffi::c_int,
    pub onlyClientDraw: ::core::ffi::c_int,
}
pub type ref_params_t = ref_params_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ref_overview_s {
    pub origin: vec3_t,
    pub rotated: qboolean,
    pub xLeft: f32,
    pub xRight: f32,
    pub yTop: f32,
    pub yBottom: f32,
    pub zFar: f32,
    pub zNear: f32,
    pub flZoom: f32,
}
pub type ref_overview_t = ref_overview_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ref_viewpass_s {
    pub viewport: [::core::ffi::c_int; 4usize],
    pub vieworigin: vec3_t,
    pub viewangles: vec3_t,
    pub viewentity: ::core::ffi::c_int,
    pub fov_x: f32,
    pub fov_y: f32,
    pub flags: ::core::ffi::c_int,
}
pub type ref_viewpass_t = ref_viewpass_s;
pub const AMBIENT_WATER: _bindgen_ty_5 = 0;
pub const AMBIENT_SKY: _bindgen_ty_5 = 1;
pub const AMBIENT_SLIME: _bindgen_ty_5 = 2;
pub const AMBIENT_LAVA: _bindgen_ty_5 = 3;
pub const NUM_AMBIENTS: _bindgen_ty_5 = 4;
pub type _bindgen_ty_5 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dlump_t {
    pub fileofs: ::core::ffi::c_int,
    pub filelen: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dheader_t {
    pub version: ::core::ffi::c_int,
    pub lumps: [dlump_t; 15usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dextrahdr_t {
    pub id: ::core::ffi::c_int,
    pub version: ::core::ffi::c_int,
    pub lumps: [dlump_t; 12usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dmodel_t {
    pub mins: vec3_t,
    pub maxs: vec3_t,
    pub origin: vec3_t,
    pub headnode: [::core::ffi::c_int; 4usize],
    pub visleafs: ::core::ffi::c_int,
    pub firstface: ::core::ffi::c_int,
    pub numfaces: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dmiptexlump_t {
    pub nummiptex: ::core::ffi::c_int,
    pub dataofs: [::core::ffi::c_int; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dvertex_t {
    pub point: vec3_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dplane_t {
    pub normal: vec3_t,
    pub dist: f32,
    pub type_: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dnode_t {
    pub planenum: ::core::ffi::c_int,
    pub children: [::core::ffi::c_short; 2usize],
    pub mins: [::core::ffi::c_short; 3usize],
    pub maxs: [::core::ffi::c_short; 3usize],
    pub firstface: word,
    pub numfaces: word,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dnode32_t {
    pub planenum: ::core::ffi::c_int,
    pub children: [::core::ffi::c_int; 2usize],
    pub mins: [f32; 3usize],
    pub maxs: [f32; 3usize],
    pub firstface: ::core::ffi::c_int,
    pub numfaces: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dleaf_t {
    pub contents: ::core::ffi::c_int,
    pub visofs: ::core::ffi::c_int,
    pub mins: [::core::ffi::c_short; 3usize],
    pub maxs: [::core::ffi::c_short; 3usize],
    pub firstmarksurface: word,
    pub nummarksurfaces: word,
    pub ambient_level: [byte; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dleaf32_t {
    pub contents: ::core::ffi::c_int,
    pub visofs: ::core::ffi::c_int,
    pub mins: [f32; 3usize],
    pub maxs: [f32; 3usize],
    pub firstmarksurface: ::core::ffi::c_int,
    pub nummarksurfaces: ::core::ffi::c_int,
    pub ambient_level: [byte; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dclipnode_t {
    pub planenum: ::core::ffi::c_int,
    pub children: [::core::ffi::c_short; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dclipnode32_t {
    pub planenum: ::core::ffi::c_int,
    pub children: [::core::ffi::c_int; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtexinfo_t {
    pub vecs: [[f32; 4usize]; 2usize],
    pub miptex: ::core::ffi::c_int,
    pub flags: ::core::ffi::c_short,
    pub faceinfo: ::core::ffi::c_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dfaceinfo_t {
    pub landname: [::core::ffi::c_char; 16usize],
    pub texture_step: ::core::ffi::c_ushort,
    pub max_extent: ::core::ffi::c_ushort,
    pub groupid: ::core::ffi::c_short,
}
pub type dmarkface_t = word;
pub type dmarkface32_t = ::core::ffi::c_int;
pub type dsurfedge_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dedge_t {
    pub v: [word; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dedge32_t {
    pub v: [::core::ffi::c_int; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dface_t {
    pub planenum: word,
    pub side: ::core::ffi::c_short,
    pub firstedge: ::core::ffi::c_int,
    pub numedges: ::core::ffi::c_short,
    pub texinfo: ::core::ffi::c_short,
    pub styles: [byte; 4usize],
    pub lightofs: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dface32_t {
    pub planenum: ::core::ffi::c_int,
    pub side: ::core::ffi::c_int,
    pub firstedge: ::core::ffi::c_int,
    pub numedges: ::core::ffi::c_int,
    pub texinfo: ::core::ffi::c_int,
    pub styles: [byte; 4usize],
    pub lightofs: ::core::ffi::c_int,
}
pub const modtype_t_mod_bad: modtype_t = -1;
pub const modtype_t_mod_brush: modtype_t = 0;
pub const modtype_t_mod_sprite: modtype_t = 1;
pub const modtype_t_mod_alias: modtype_t = 2;
pub const modtype_t_mod_studio: modtype_t = 3;
pub type modtype_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mplane_s {
    pub normal: vec3_t,
    pub dist: f32,
    pub type_: byte,
    pub signbits: byte,
    pub pad: [byte; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mvertex_t {
    pub position: vec3_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mclipnode32_s {
    pub planenum: ::core::ffi::c_int,
    pub children: [::core::ffi::c_int; 2usize],
}
pub type mclipnode32_t = mclipnode32_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mclipnode16_s {
    pub planenum: ::core::ffi::c_int,
    pub children: [::core::ffi::c_short; 2usize],
}
pub type mclipnode16_t = mclipnode16_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct medge32_s {
    pub v: [::core::ffi::c_uint; 2usize],
}
pub type medge32_t = medge32_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct medge16_s {
    pub v: [::core::ffi::c_ushort; 2usize],
    pub cachededgeoffset: ::core::ffi::c_uint,
}
pub type medge16_t = medge16_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct texture_s {
    pub name: [::core::ffi::c_char; 16usize],
    pub width: ::core::ffi::c_uint,
    pub height: ::core::ffi::c_uint,
    pub gl_texturenum: ::core::ffi::c_int,
    pub texturechain: *mut msurface_s,
    pub anim_total: ::core::ffi::c_int,
    pub anim_min: ::core::ffi::c_int,
    pub anim_max: ::core::ffi::c_int,
    pub anim_next: *mut texture_s,
    pub alternate_anims: *mut texture_s,
    pub fb_texturenum: ::core::ffi::c_ushort,
    pub dt_texturenum: ::core::ffi::c_ushort,
    pub unused: [::core::ffi::c_uint; 3usize],
}
pub type texture_t = texture_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mfaceinfo_t {
    pub landname: [::core::ffi::c_char; 16usize],
    pub texture_step: ::core::ffi::c_ushort,
    pub max_extent: ::core::ffi::c_ushort,
    pub groupid: ::core::ffi::c_short,
    pub mins: vec3_t,
    pub maxs: vec3_t,
    pub reserved: [isize; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mfacebevel_t {
    pub edges: *mut mplane_t,
    pub numedges: ::core::ffi::c_int,
    pub origin: vec3_t,
    pub radius: vec_t,
    pub contents: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mtexinfo_t {
    pub vecs: [[f32; 4usize]; 2usize],
    pub faceinfo: *mut mfaceinfo_t,
    pub texture: *mut texture_t,
    pub flags: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug)]
pub struct glpoly2_s {
    pub next: *mut glpoly2_s,
    pub chain: *mut glpoly2_s,
    pub numverts: ::core::ffi::c_int,
    pub flags: ::core::ffi::c_int,
    pub verts: __IncompleteArrayField<[f32; 7usize]>,
}
pub type glpoly2_t = glpoly2_s;
pub type mnode_t = mnode_s;
pub type msurface_t = msurface_s;
pub type decal_t = decal_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct decal_s {
    pub pnext: *mut decal_t,
    pub psurface: *mut msurface_t,
    pub dx: f32,
    pub dy: f32,
    pub scale: f32,
    pub texture: ::core::ffi::c_short,
    pub flags: ::core::ffi::c_short,
    pub entityIndex: ::core::ffi::c_short,
    pub position: vec3_t,
    pub polys: *mut glpoly2_t,
    pub reserved: [isize; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mleaf_s {
    pub contents: ::core::ffi::c_int,
    pub visframe: ::core::ffi::c_int,
    pub minmaxs: [f32; 6usize],
    pub parent: *mut mnode_s,
    pub compressed_vis: *mut byte,
    pub efrags: *mut efrag_s,
    pub firstmarksurface: *mut *mut msurface_t,
    pub nummarksurfaces: ::core::ffi::c_int,
    pub cluster: ::core::ffi::c_int,
    pub ambient_sound_level: [byte; 4usize],
}
pub type mleaf_t = mleaf_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mextrasurf_s {
    pub mins: vec3_t,
    pub maxs: vec3_t,
    pub origin: vec3_t,
    pub surf: *mut msurface_s,
    pub dlight_s: ::core::ffi::c_int,
    pub dlight_t: ::core::ffi::c_int,
    pub lightmapmins: [::core::ffi::c_short; 2usize],
    pub lightextents: [::core::ffi::c_short; 2usize],
    pub lmvecs: [[f32; 4usize]; 2usize],
    pub deluxemap: *mut color24,
    pub shadowmap: *mut byte,
    pub lightmapchain: *mut msurface_s,
    pub detailchain: *mut mextrasurf_s,
    pub bevel: *mut mfacebevel_t,
    pub lumachain: *mut mextrasurf_s,
    pub parent: *mut cl_entity_s,
    pub mirrortexturenum: ::core::ffi::c_int,
    pub mirrormatrix: [[f32; 4usize]; 4usize],
    pub grass: *mut grasshdr_s,
    pub grasscount: ::core::ffi::c_ushort,
    pub numverts: ::core::ffi::c_ushort,
    pub firstvertex: ::core::ffi::c_int,
    pub reserved: [isize; 32usize],
}
pub type mextrasurf_t = mextrasurf_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msurface_s {
    pub visframe: ::core::ffi::c_int,
    pub plane: *mut mplane_t,
    pub flags: ::core::ffi::c_int,
    pub firstedge: ::core::ffi::c_int,
    pub numedges: ::core::ffi::c_int,
    pub texturemins: [::core::ffi::c_short; 2usize],
    pub extents: [::core::ffi::c_short; 2usize],
    pub light_s: ::core::ffi::c_int,
    pub light_t: ::core::ffi::c_int,
    pub polys: *mut glpoly2_t,
    pub texturechain: *mut msurface_s,
    pub texinfo: *mut mtexinfo_t,
    pub dlightframe: ::core::ffi::c_int,
    pub dlightbits: ::core::ffi::c_int,
    pub lightmaptexturenum: ::core::ffi::c_int,
    pub styles: [byte; 4usize],
    pub cached_light: [::core::ffi::c_int; 4usize],
    pub info: *mut mextrasurf_t,
    pub samples: *mut color24,
    pub pdecals: *mut decal_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hull_s {
    pub __bindgen_anon_1: hull_s__bindgen_ty_1,
    pub planes: *mut mplane_t,
    pub firstclipnode: ::core::ffi::c_int,
    pub lastclipnode: ::core::ffi::c_int,
    pub clip_mins: vec3_t,
    pub clip_maxs: vec3_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union hull_s__bindgen_ty_1 {
    pub clipnodes16: *mut mclipnode16_t,
    pub clipnodes32: *mut mclipnode32_t,
}
pub type hull_t = hull_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cache_user_s {
    pub data: *mut ::core::ffi::c_void,
}
pub type cache_user_t = cache_user_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct model_s {
    pub name: [::core::ffi::c_char; 64usize],
    pub needload: qboolean,
    pub type_: modtype_t,
    pub numframes: ::core::ffi::c_int,
    pub mempool: poolhandle_t,
    pub flags: ::core::ffi::c_int,
    pub mins: vec3_t,
    pub maxs: vec3_t,
    pub radius: f32,
    pub firstmodelsurface: ::core::ffi::c_int,
    pub nummodelsurfaces: ::core::ffi::c_int,
    pub numsubmodels: ::core::ffi::c_int,
    pub submodels: *mut dmodel_t,
    pub numplanes: ::core::ffi::c_int,
    pub planes: *mut mplane_t,
    pub numleafs: ::core::ffi::c_int,
    pub leafs: *mut mleaf_t,
    pub numvertexes: ::core::ffi::c_int,
    pub vertexes: *mut mvertex_t,
    pub numedges: ::core::ffi::c_int,
    pub __bindgen_anon_1: model_s__bindgen_ty_1,
    pub numnodes: ::core::ffi::c_int,
    pub nodes: *mut mnode_t,
    pub numtexinfo: ::core::ffi::c_int,
    pub texinfo: *mut mtexinfo_t,
    pub numsurfaces: ::core::ffi::c_int,
    pub surfaces: *mut msurface_t,
    pub numsurfedges: ::core::ffi::c_int,
    pub surfedges: *mut ::core::ffi::c_int,
    pub numclipnodes: ::core::ffi::c_int,
    pub __bindgen_anon_2: model_s__bindgen_ty_2,
    pub nummarksurfaces: ::core::ffi::c_int,
    pub marksurfaces: *mut *mut msurface_t,
    pub hulls: [hull_t; 4usize],
    pub numtextures: ::core::ffi::c_int,
    pub textures: *mut *mut texture_t,
    pub visdata: *mut byte,
    pub lightdata: *mut color24,
    pub entities: *mut ::core::ffi::c_char,
    pub cache: cache_user_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union model_s__bindgen_ty_1 {
    pub edges16: *mut medge16_t,
    pub edges32: *mut medge32_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union model_s__bindgen_ty_2 {
    pub clipnodes16: *mut mclipnode16_t,
    pub clipnodes32: *mut mclipnode32_t,
}
pub type model_t = model_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alight_s {
    pub ambientlight: ::core::ffi::c_int,
    pub shadelight: ::core::ffi::c_int,
    pub color: vec3_t,
    pub plightvec: *mut f32,
}
pub type alight_t = alight_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct auxvert_s {
    pub fv: [f32; 3usize],
}
pub type auxvert_t = auxvert_s;
pub const resourcetype_t_t_sound: resourcetype_t = 0;
pub const resourcetype_t_t_skin: resourcetype_t = 1;
pub const resourcetype_t_t_model: resourcetype_t = 2;
pub const resourcetype_t_t_decal: resourcetype_t = 3;
pub const resourcetype_t_t_generic: resourcetype_t = 4;
pub const resourcetype_t_t_eventscript: resourcetype_t = 5;
pub const resourcetype_t_t_world: resourcetype_t = 6;
pub type resourcetype_t = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _resourceinfo_t {
    pub size: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct resourceinfo_s {
    pub info: [_resourceinfo_t; 8usize],
}
pub type resourceinfo_t = resourceinfo_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct resource_s {
    pub szFileName: [::core::ffi::c_char; 64usize],
    pub type_: resourcetype_t,
    pub nIndex: ::core::ffi::c_int,
    pub nDownloadSize: ::core::ffi::c_int,
    pub ucFlags: ::core::ffi::c_uchar,
    pub rgucMD5_hash: [::core::ffi::c_uchar; 16usize],
    pub playernum: ::core::ffi::c_uchar,
    pub rguc_reserved: [::core::ffi::c_uchar; 32usize],
    pub ucExtraFlags: ::core::ffi::c_ushort,
    pub pNext: *mut resource_s,
    pub pPrev: *mut resource_s,
}
pub type resource_t = resource_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct customization_s {
    pub bInUse: qboolean,
    pub resource: resource_t,
    pub bTranslated: qboolean,
    pub nUserData1: ::core::ffi::c_int,
    pub nUserData2: ::core::ffi::c_int,
    pub pInfo: *mut ::core::ffi::c_void,
    pub pBuffer: *mut ::core::ffi::c_void,
    pub pNext: *mut customization_s,
}
pub type customization_t = customization_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct player_info_s {
    pub userid: ::core::ffi::c_int,
    pub userinfo: [::core::ffi::c_char; 256usize],
    pub name: [::core::ffi::c_char; 32usize],
    pub spectator: ::core::ffi::c_int,
    pub ping: ::core::ffi::c_int,
    pub packet_loss: ::core::ffi::c_int,
    pub model: [::core::ffi::c_char; 64usize],
    pub topcolor: ::core::ffi::c_int,
    pub bottomcolor: ::core::ffi::c_int,
    pub renderframe: ::core::ffi::c_int,
    pub gaitsequence: ::core::ffi::c_int,
    pub gaitframe: f32,
    pub gaityaw: f32,
    pub prevgaitorigin: vec3_t,
    pub customdata: customization_t,
    pub hashedcdkey: [::core::ffi::c_char; 16usize],
}
pub type player_info_t = player_info_s;
pub const spriteframetype_t_SPR_SINGLE: spriteframetype_t = 0;
pub const spriteframetype_t_SPR_GROUP: spriteframetype_t = 1;
pub const spriteframetype_t_SPR_ANGLED: spriteframetype_t = 2;
pub type spriteframetype_t = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mspriteframe_s {
    pub width: ::core::ffi::c_int,
    pub height: ::core::ffi::c_int,
    pub up: f32,
    pub down: f32,
    pub left: f32,
    pub right: f32,
    pub gl_texturenum: ::core::ffi::c_int,
}
pub type mspriteframe_t = mspriteframe_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mspritegroup_t {
    pub numframes: ::core::ffi::c_int,
    pub intervals: *mut f32,
    pub frames: [*mut mspriteframe_t; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mspriteframedesc_t {
    pub type_: spriteframetype_t,
    pub frameptr: *mut mspriteframe_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msprite_t {
    pub type_: ::core::ffi::c_short,
    pub texFormat: ::core::ffi::c_short,
    pub maxwidth: ::core::ffi::c_int,
    pub maxheight: ::core::ffi::c_int,
    pub numframes: ::core::ffi::c_int,
    pub radius: ::core::ffi::c_int,
    pub facecull: ::core::ffi::c_int,
    pub synctype: ::core::ffi::c_int,
    pub frames: [mspriteframedesc_t; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct trivertex_t {
    pub v: [byte; 3usize],
    pub lightnormalindex: byte,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct maliasframedesc_t {
    pub firstpose: ::core::ffi::c_int,
    pub numposes: ::core::ffi::c_int,
    pub bboxmin: trivertex_t,
    pub bboxmax: trivertex_t,
    pub interval: f32,
    pub name: [::core::ffi::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aliashdr_t {
    pub ident: ::core::ffi::c_int,
    pub version: ::core::ffi::c_int,
    pub scale: vec3_t,
    pub scale_origin: vec3_t,
    pub boundingradius: f32,
    pub eyeposition: vec3_t,
    pub numskins: ::core::ffi::c_int,
    pub skinwidth: ::core::ffi::c_int,
    pub skinheight: ::core::ffi::c_int,
    pub numverts: ::core::ffi::c_int,
    pub numtris: ::core::ffi::c_int,
    pub numframes: ::core::ffi::c_int,
    pub synctype: ::core::ffi::c_int,
    pub flags: ::core::ffi::c_int,
    pub size: f32,
    pub pposeverts: *mut *const trivertex_t,
    pub reserved: [isize; 7usize],
    pub numposes: ::core::ffi::c_int,
    pub poseverts: ::core::ffi::c_int,
    pub posedata: *mut trivertex_t,
    pub commands: *mut ::core::ffi::c_int,
    pub gl_texturenum: [[::core::ffi::c_ushort; 4usize]; 32usize],
    pub fb_texturenum: [[::core::ffi::c_ushort; 4usize]; 32usize],
    pub gl_reserved0: [[::core::ffi::c_ushort; 4usize]; 32usize],
    pub gl_reserved1: [[::core::ffi::c_ushort; 4usize]; 32usize],
    pub gl_reserved2: [[::core::ffi::c_ushort; 4usize]; 32usize],
    pub frames: [maliasframedesc_t; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lightstyle_t {
    pub pattern: [::core::ffi::c_char; 256usize],
    pub map: [f32; 256usize],
    pub length: ::core::ffi::c_int,
    pub value: f32,
    pub interp: qboolean,
    pub time: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dlight_s {
    pub origin: vec3_t,
    pub radius: f32,
    pub color: color24,
    pub die: f32,
    pub decay: f32,
    pub minlight: f32,
    pub key: ::core::ffi::c_int,
    pub dark: qboolean,
}
pub type dlight_t = dlight_s;
pub const SKYBOX_RIGHT: _bindgen_ty_6 = 0;
pub const SKYBOX_BACK: _bindgen_ty_6 = 1;
pub const SKYBOX_LEFT: _bindgen_ty_6 = 2;
pub const SKYBOX_FORWARD: _bindgen_ty_6 = 3;
pub const SKYBOX_UP: _bindgen_ty_6 = 4;
pub const SKYBOX_DOWN: _bindgen_ty_6 = 5;
pub type _bindgen_ty_6 = ::core::ffi::c_uint;
pub const texFlags_t_TF_COLORMAP: texFlags_t = 0;
pub const texFlags_t_TF_NEAREST: texFlags_t = 1;
pub const texFlags_t_TF_KEEP_SOURCE: texFlags_t = 2;
pub const texFlags_t_TF_NOFLIP_TGA: texFlags_t = 4;
pub const texFlags_t_TF_EXPAND_SOURCE: texFlags_t = 8;
pub const texFlags_t_TF_RECTANGLE: texFlags_t = 32;
pub const texFlags_t_TF_CUBEMAP: texFlags_t = 64;
pub const texFlags_t_TF_DEPTHMAP: texFlags_t = 128;
pub const texFlags_t_TF_QUAKEPAL: texFlags_t = 256;
pub const texFlags_t_TF_LUMINANCE: texFlags_t = 512;
pub const texFlags_t_TF_SKYSIDE: texFlags_t = 1024;
pub const texFlags_t_TF_CLAMP: texFlags_t = 2048;
pub const texFlags_t_TF_NOMIPMAP: texFlags_t = 4096;
pub const texFlags_t_TF_HAS_LUMA: texFlags_t = 8192;
pub const texFlags_t_TF_MAKELUMA: texFlags_t = 16384;
pub const texFlags_t_TF_NORMALMAP: texFlags_t = 32768;
pub const texFlags_t_TF_HAS_ALPHA: texFlags_t = 65536;
pub const texFlags_t_TF_FORCE_COLOR: texFlags_t = 131072;
pub const texFlags_t_TF_UPDATE: texFlags_t = 262144;
pub const texFlags_t_TF_BORDER: texFlags_t = 524288;
pub const texFlags_t_TF_TEXTURE_3D: texFlags_t = 1048576;
pub const texFlags_t_TF_ATLAS_PAGE: texFlags_t = 2097152;
pub const texFlags_t_TF_ALPHACONTRAST: texFlags_t = 4194304;
pub const texFlags_t_TF_IMG_UPLOADED: texFlags_t = 33554432;
pub const texFlags_t_TF_ARB_FLOAT: texFlags_t = 67108864;
pub const texFlags_t_TF_NOCOMPARE: texFlags_t = 134217728;
pub const texFlags_t_TF_ARB_16BIT: texFlags_t = 268435456;
pub const texFlags_t_TF_MULTISAMPLE: texFlags_t = 536870912;
pub const texFlags_t_TF_ALLOW_NEAREST: texFlags_t = 1073741824;
pub type texFlags_t = ::core::ffi::c_uint;
pub const gl_context_type_t_CONTEXT_TYPE_GL: gl_context_type_t = 0;
pub const gl_context_type_t_CONTEXT_TYPE_GLES_1_X: gl_context_type_t = 1;
pub const gl_context_type_t_CONTEXT_TYPE_GLES_2_X: gl_context_type_t = 2;
pub const gl_context_type_t_CONTEXT_TYPE_GL_CORE: gl_context_type_t = 3;
pub type gl_context_type_t = ::core::ffi::c_uint;
pub const gles_wrapper_t_GLES_WRAPPER_NONE: gles_wrapper_t = 0;
pub const gles_wrapper_t_GLES_WRAPPER_NANOGL: gles_wrapper_t = 1;
pub const gles_wrapper_t_GLES_WRAPPER_WES: gles_wrapper_t = 2;
pub const gles_wrapper_t_GLES_WRAPPER_GL4ES: gles_wrapper_t = 3;
pub type gles_wrapper_t = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct modelstate_s {
    pub sequence: ::core::ffi::c_short,
    pub frame: ::core::ffi::c_short,
    pub blending: [byte; 2usize],
    pub controller: [byte; 4usize],
    pub poseparam: [byte; 16usize],
    pub body: byte,
    pub skin: byte,
    pub scale: ::core::ffi::c_short,
}
pub type modelstate_t = modelstate_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct decallist_s {
    pub position: vec3_t,
    pub name: [::core::ffi::c_char; 64usize],
    pub entityIndex: ::core::ffi::c_short,
    pub depth: byte,
    pub flags: byte,
    pub scale: f32,
    pub impactPlaneNormal: vec3_t,
    pub studio_state: modelstate_t,
}
pub type decallist_t = decallist_s;
pub const movie_parms_e_AVI_PARM_LAST: movie_parms_e = 0;
pub const movie_parms_e_AVI_RENDER_TEXNUM: movie_parms_e = 1;
pub const movie_parms_e_AVI_RENDER_X: movie_parms_e = 2;
pub const movie_parms_e_AVI_RENDER_Y: movie_parms_e = 3;
pub const movie_parms_e_AVI_RENDER_W: movie_parms_e = 4;
pub const movie_parms_e_AVI_RENDER_H: movie_parms_e = 5;
pub const movie_parms_e_AVI_REWIND: movie_parms_e = 6;
pub const movie_parms_e_AVI_ENTNUM: movie_parms_e = 7;
pub const movie_parms_e_AVI_VOLUME: movie_parms_e = 8;
pub const movie_parms_e_AVI_ATTN: movie_parms_e = 9;
pub const movie_parms_e_AVI_PAUSE: movie_parms_e = 10;
pub const movie_parms_e_AVI_RESUME: movie_parms_e = 11;
pub type movie_parms_e = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct movie_state_s {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct render_api_s {
    pub RenderGetParm: ::core::option::Option<
        unsafe extern "C" fn(parm: ::core::ffi::c_int, arg: ::core::ffi::c_int) -> isize,
    >,
    pub GetDetailScaleForTexture: ::core::option::Option<
        unsafe extern "C" fn(texture: ::core::ffi::c_int, xScale: *mut f32, yScale: *mut f32),
    >,
    pub GetExtraParmsForTexture: ::core::option::Option<
        unsafe extern "C" fn(
            texture: ::core::ffi::c_int,
            red: *mut byte,
            green: *mut byte,
            blue: *mut byte,
            alpha: *mut byte,
        ),
    >,
    pub GetLightStyle: ::core::option::Option<
        unsafe extern "C" fn(number: ::core::ffi::c_int) -> *mut lightstyle_t,
    >,
    pub GetDynamicLight:
        ::core::option::Option<unsafe extern "C" fn(number: ::core::ffi::c_int) -> *mut dlight_t>,
    pub GetEntityLight:
        ::core::option::Option<unsafe extern "C" fn(number: ::core::ffi::c_int) -> *mut dlight_t>,
    pub LightToTexGamma: ::core::option::Option<unsafe extern "C" fn(color: byte) -> byte>,
    pub GetFrameTime: ::core::option::Option<unsafe extern "C" fn() -> f32>,
    pub R_SetCurrentEntity: ::core::option::Option<unsafe extern "C" fn(ent: *mut cl_entity_s)>,
    pub R_SetCurrentModel: ::core::option::Option<unsafe extern "C" fn(mod_: *mut model_s)>,
    pub R_FatPVS: ::core::option::Option<
        unsafe extern "C" fn(
            org: *const f32,
            radius: f32,
            visbuffer: *mut byte,
            merge: qboolean,
            fullvis: qboolean,
        ) -> ::core::ffi::c_int,
    >,
    pub R_StoreEfrags: ::core::option::Option<
        unsafe extern "C" fn(ppefrag: *mut *mut efrag_s, framecount: ::core::ffi::c_int),
    >,
    pub GL_FindTexture: ::core::option::Option<
        unsafe extern "C" fn(name: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub GL_TextureName: ::core::option::Option<
        unsafe extern "C" fn(texnum: ::core::ffi::c_uint) -> *const ::core::ffi::c_char,
    >,
    pub GL_TextureData:
        ::core::option::Option<unsafe extern "C" fn(texnum: ::core::ffi::c_uint) -> *const byte>,
    pub GL_LoadTexture: ::core::option::Option<
        unsafe extern "C" fn(
            name: *const ::core::ffi::c_char,
            buf: *const byte,
            size: usize,
            flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub GL_CreateTexture: ::core::option::Option<
        unsafe extern "C" fn(
            name: *const ::core::ffi::c_char,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
            buffer: *const ::core::ffi::c_void,
            flags: texFlags_t,
        ) -> ::core::ffi::c_int,
    >,
    pub GL_LoadTextureArray: ::core::option::Option<
        unsafe extern "C" fn(
            names: *mut *const ::core::ffi::c_char,
            flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub GL_CreateTextureArray: ::core::option::Option<
        unsafe extern "C" fn(
            name: *const ::core::ffi::c_char,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
            depth: ::core::ffi::c_int,
            buffer: *const ::core::ffi::c_void,
            flags: texFlags_t,
        ) -> ::core::ffi::c_int,
    >,
    pub GL_FreeTexture: ::core::option::Option<unsafe extern "C" fn(texnum: ::core::ffi::c_uint)>,
    pub DrawSingleDecal:
        ::core::option::Option<unsafe extern "C" fn(pDecal: *mut decal_s, fa: *mut msurface_s)>,
    pub R_DecalSetupVerts: ::core::option::Option<
        unsafe extern "C" fn(
            pDecal: *mut decal_s,
            surf: *mut msurface_s,
            texture: ::core::ffi::c_int,
            outCount: *mut ::core::ffi::c_int,
        ) -> *mut f32,
    >,
    pub R_EntityRemoveDecals: ::core::option::Option<unsafe extern "C" fn(mod_: *mut model_s)>,
    pub AVI_LoadVideo: ::core::option::Option<
        unsafe extern "C" fn(
            filename: *const ::core::ffi::c_char,
            load_audio: qboolean,
        ) -> *mut movie_state_s,
    >,
    pub AVI_GetVideoInfo: ::core::option::Option<
        unsafe extern "C" fn(
            Avi: *mut movie_state_s,
            xres: *mut ::core::ffi::c_int,
            yres: *mut ::core::ffi::c_int,
            duration: *mut f32,
        ) -> qboolean,
    >,
    pub AVI_GetVideoFrameNumber: ::core::option::Option<
        unsafe extern "C" fn(Avi: *mut movie_state_s, time: f32) -> ::core::ffi::c_int,
    >,
    pub AVI_GetVideoFrame: ::core::option::Option<
        unsafe extern "C" fn(Avi: *mut movie_state_s, frame: ::core::ffi::c_int) -> *mut byte,
    >,
    pub AVI_UploadRawFrame: ::core::option::Option<
        unsafe extern "C" fn(
            texture: ::core::ffi::c_int,
            cols: ::core::ffi::c_int,
            rows: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
            data: *const byte,
        ),
    >,
    pub AVI_FreeVideo: ::core::option::Option<unsafe extern "C" fn(Avi: *mut movie_state_s)>,
    pub AVI_IsActive:
        ::core::option::Option<unsafe extern "C" fn(Avi: *mut movie_state_s) -> qboolean>,
    pub AVI_StreamSound: ::core::option::Option<
        unsafe extern "C" fn(
            Avi: *mut movie_state_s,
            entnum: ::core::ffi::c_int,
            fvol: f32,
            attn: f32,
            synctime: f32,
        ),
    >,
    pub AVI_Think:
        ::core::option::Option<unsafe extern "C" fn(Avi: *mut movie_state_s) -> qboolean>,
    pub AVI_SetParm: ::core::option::Option<
        unsafe extern "C" fn(Avi: *mut movie_state_s, parm: movie_parms_e, ...) -> qboolean,
    >,
    pub GL_Bind: ::core::option::Option<
        unsafe extern "C" fn(tmu: ::core::ffi::c_int, texnum: ::core::ffi::c_uint),
    >,
    pub GL_SelectTexture: ::core::option::Option<unsafe extern "C" fn(tmu: ::core::ffi::c_int)>,
    pub GL_LoadTextureMatrix: ::core::option::Option<unsafe extern "C" fn(glmatrix: *const f32)>,
    pub GL_TexMatrixIdentity: ::core::option::Option<unsafe extern "C" fn()>,
    pub GL_CleanUpTextureUnits:
        ::core::option::Option<unsafe extern "C" fn(last: ::core::ffi::c_int)>,
    pub GL_TexGen: ::core::option::Option<
        unsafe extern "C" fn(coord: ::core::ffi::c_uint, mode: ::core::ffi::c_uint),
    >,
    pub GL_TextureTarget: ::core::option::Option<unsafe extern "C" fn(target: ::core::ffi::c_uint)>,
    pub GL_TexCoordArrayMode:
        ::core::option::Option<unsafe extern "C" fn(texmode: ::core::ffi::c_uint)>,
    pub GL_GetProcAddress: ::core::option::Option<
        unsafe extern "C" fn(name: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_void,
    >,
    pub GL_UpdateTexSize: ::core::option::Option<
        unsafe extern "C" fn(
            texnum: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
            depth: ::core::ffi::c_int,
        ),
    >,
    pub GL_Reserved0: ::core::option::Option<unsafe extern "C" fn()>,
    pub GL_Reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub GL_DrawParticles: ::core::option::Option<
        unsafe extern "C" fn(rvp: *const ref_viewpass_s, trans_pass: qboolean, frametime: f32),
    >,
    pub EnvShot: ::core::option::Option<
        unsafe extern "C" fn(
            vieworg: *const f32,
            name: *const ::core::ffi::c_char,
            skyshot: qboolean,
            shotsize: ::core::ffi::c_int,
        ),
    >,
    pub SPR_LoadExt: ::core::option::Option<
        unsafe extern "C" fn(
            szPicName: *const ::core::ffi::c_char,
            texFlags: ::core::ffi::c_uint,
        ) -> ::core::ffi::c_int,
    >,
    pub LightVec: ::core::option::Option<
        unsafe extern "C" fn(
            start: *const f32,
            end: *const f32,
            lightspot: *mut f32,
            lightvec: *mut f32,
        ) -> colorVec,
    >,
    pub StudioGetTexture:
        ::core::option::Option<unsafe extern "C" fn(e: *mut cl_entity_s) -> *mut mstudiotex_s>,
    pub GetOverviewParms: ::core::option::Option<unsafe extern "C" fn() -> *const ref_overview_s>,
    pub GetFileByIndex: ::core::option::Option<
        unsafe extern "C" fn(fileindex: ::core::ffi::c_int) -> *const ::core::ffi::c_char,
    >,
    pub pfnSaveFile: ::core::option::Option<
        unsafe extern "C" fn(
            filename: *const ::core::ffi::c_char,
            data: *const ::core::ffi::c_void,
            len: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub R_Reserved0: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnMemAlloc: ::core::option::Option<
        unsafe extern "C" fn(
            cb: usize,
            filename: *const ::core::ffi::c_char,
            fileline: ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_void,
    >,
    pub pfnMemFree: ::core::option::Option<
        unsafe extern "C" fn(
            mem: *mut ::core::ffi::c_void,
            filename: *const ::core::ffi::c_char,
            fileline: ::core::ffi::c_int,
        ),
    >,
    pub pfnGetFilesList: ::core::option::Option<
        unsafe extern "C" fn(
            pattern: *const ::core::ffi::c_char,
            numFiles: *mut ::core::ffi::c_int,
            gamedironly: ::core::ffi::c_int,
        ) -> *mut *mut ::core::ffi::c_char,
    >,
    pub pfnFileBufferCRC32: ::core::option::Option<
        unsafe extern "C" fn(
            buffer: *const ::core::ffi::c_void,
            length: ::core::ffi::c_int,
        ) -> ::core::ffi::c_uint,
    >,
    pub COM_CompareFileTime: ::core::option::Option<
        unsafe extern "C" fn(
            filename1: *const ::core::ffi::c_char,
            filename2: *const ::core::ffi::c_char,
            iCompare: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub Host_Error:
        ::core::option::Option<unsafe extern "C" fn(error: *const ::core::ffi::c_char, ...)>,
    pub pfnGetModel: ::core::option::Option<
        unsafe extern "C" fn(modelindex: ::core::ffi::c_int) -> *mut ::core::ffi::c_void,
    >,
    pub pfnTime: ::core::option::Option<unsafe extern "C" fn() -> f32>,
    pub Cvar_Set: ::core::option::Option<
        unsafe extern "C" fn(name: *const ::core::ffi::c_char, value: *const ::core::ffi::c_char),
    >,
    pub S_FadeMusicVolume: ::core::option::Option<unsafe extern "C" fn(fadePercent: f32)>,
    pub SetRandomSeed: ::core::option::Option<unsafe extern "C" fn(lSeed: ::core::ffi::c_int)>,
}
pub type render_api_t = render_api_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct render_interface_s {
    pub version: ::core::ffi::c_int,
    pub GL_RenderFrame: ::core::option::Option<
        unsafe extern "C" fn(rvp: *const ref_viewpass_s) -> ::core::ffi::c_int,
    >,
    pub GL_BuildLightmaps: ::core::option::Option<unsafe extern "C" fn()>,
    pub GL_OrthoBounds:
        ::core::option::Option<unsafe extern "C" fn(mins: *const f32, maxs: *const f32)>,
    pub R_CreateStudioDecalList: ::core::option::Option<
        unsafe extern "C" fn(
            pList: *mut decallist_t,
            count: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub R_ClearStudioDecals: ::core::option::Option<unsafe extern "C" fn()>,
    pub R_SpeedsMessage: ::core::option::Option<
        unsafe extern "C" fn(out: *mut ::core::ffi::c_char, size: usize) -> qboolean,
    >,
    pub Mod_ProcessUserData: ::core::option::Option<
        unsafe extern "C" fn(mod_: *mut model_s, create: qboolean, buffer: *const byte),
    >,
    pub R_ProcessEntData: ::core::option::Option<unsafe extern "C" fn(allocate: qboolean)>,
    pub Mod_GetCurrentVis: ::core::option::Option<unsafe extern "C" fn() -> *mut byte>,
    pub R_NewMap: ::core::option::Option<unsafe extern "C" fn()>,
    pub R_ClearScene: ::core::option::Option<unsafe extern "C" fn()>,
    pub CL_UpdateLatchedVars:
        ::core::option::Option<unsafe extern "C" fn(e: *mut cl_entity_s, reset: qboolean)>,
}
pub type render_interface_t = render_interface_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kbutton_t {
    pub down: [::core::ffi::c_int; 2usize],
    pub state: ::core::ffi::c_int,
}
pub type movevars_t = movevars_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct movevars_s {
    pub gravity: f32,
    pub stopspeed: f32,
    pub maxspeed: f32,
    pub spectatormaxspeed: f32,
    pub accelerate: f32,
    pub airaccelerate: f32,
    pub wateraccelerate: f32,
    pub friction: f32,
    pub edgefriction: f32,
    pub waterfriction: f32,
    pub entgravity: f32,
    pub bounce: f32,
    pub stepsize: f32,
    pub maxvelocity: f32,
    pub zmax: f32,
    pub waveHeight: f32,
    pub footsteps: qboolean,
    pub skyName: [::core::ffi::c_char; 32usize],
    pub rollangle: f32,
    pub rollspeed: f32,
    pub skycolor_r: f32,
    pub skycolor_g: f32,
    pub skycolor_b: f32,
    pub skyvec_x: f32,
    pub skyvec_y: f32,
    pub skyvec_z: f32,
    pub features: ::core::ffi::c_int,
    pub fog_settings: ::core::ffi::c_int,
    pub wateralpha: f32,
    pub skydir_x: f32,
    pub skydir_y: f32,
    pub skydir_z: f32,
    pub skyangle: f32,
}
extern "C" {
    pub static mut movevars: movevars_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pmplane_t {
    pub normal: vec3_t,
    pub dist: f32,
}
pub type pmtrace_t = pmtrace_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pmtrace_s {
    pub allsolid: qboolean,
    pub startsolid: qboolean,
    pub inopen: qboolean,
    pub inwater: qboolean,
    pub fraction: f32,
    pub endpos: vec3_t,
    pub plane: pmplane_t,
    pub ent: ::core::ffi::c_int,
    pub deltavelocity: vec3_t,
    pub hitgroup: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physent_s {
    pub name: [::core::ffi::c_char; 32usize],
    pub player: ::core::ffi::c_int,
    pub origin: vec3_t,
    pub model: *mut model_s,
    pub studiomodel: *mut model_s,
    pub mins: vec3_t,
    pub maxs: vec3_t,
    pub info: ::core::ffi::c_int,
    pub angles: vec3_t,
    pub solid: ::core::ffi::c_int,
    pub skin: ::core::ffi::c_int,
    pub rendermode: ::core::ffi::c_int,
    pub frame: f32,
    pub sequence: ::core::ffi::c_int,
    pub controller: [byte; 4usize],
    pub blending: [byte; 2usize],
    pub movetype: ::core::ffi::c_int,
    pub takedamage: ::core::ffi::c_int,
    pub blooddecal: ::core::ffi::c_int,
    pub team: ::core::ffi::c_int,
    pub classnumber: ::core::ffi::c_int,
    pub iuser1: ::core::ffi::c_int,
    pub iuser2: ::core::ffi::c_int,
    pub iuser3: ::core::ffi::c_int,
    pub iuser4: ::core::ffi::c_int,
    pub fuser1: f32,
    pub fuser2: f32,
    pub fuser3: f32,
    pub fuser4: f32,
    pub vuser1: vec3_t,
    pub vuser2: vec3_t,
    pub vuser3: vec3_t,
    pub vuser4: vec3_t,
}
pub type physent_t = physent_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct playermove_s {
    pub player_index: ::core::ffi::c_int,
    pub server: qboolean,
    pub multiplayer: qboolean,
    pub time: f32,
    pub frametime: f32,
    pub forward: vec3_t,
    pub right: vec3_t,
    pub up: vec3_t,
    pub origin: vec3_t,
    pub angles: vec3_t,
    pub oldangles: vec3_t,
    pub velocity: vec3_t,
    pub movedir: vec3_t,
    pub basevelocity: vec3_t,
    pub view_ofs: vec3_t,
    pub flDuckTime: f32,
    pub bInDuck: qboolean,
    pub flTimeStepSound: ::core::ffi::c_int,
    pub iStepLeft: ::core::ffi::c_int,
    pub flFallVelocity: f32,
    pub punchangle: vec3_t,
    pub flSwimTime: f32,
    pub flNextPrimaryAttack: f32,
    pub effects: ::core::ffi::c_int,
    pub flags: ::core::ffi::c_int,
    pub usehull: ::core::ffi::c_int,
    pub gravity: f32,
    pub friction: f32,
    pub oldbuttons: ::core::ffi::c_int,
    pub waterjumptime: f32,
    pub dead: qboolean,
    pub deadflag: ::core::ffi::c_int,
    pub spectator: ::core::ffi::c_int,
    pub movetype: ::core::ffi::c_int,
    pub onground: ::core::ffi::c_int,
    pub waterlevel: ::core::ffi::c_int,
    pub watertype: ::core::ffi::c_int,
    pub oldwaterlevel: ::core::ffi::c_int,
    pub sztexturename: [::core::ffi::c_char; 256usize],
    pub chtexturetype: ::core::ffi::c_char,
    pub maxspeed: f32,
    pub clientmaxspeed: f32,
    pub iuser1: ::core::ffi::c_int,
    pub iuser2: ::core::ffi::c_int,
    pub iuser3: ::core::ffi::c_int,
    pub iuser4: ::core::ffi::c_int,
    pub fuser1: f32,
    pub fuser2: f32,
    pub fuser3: f32,
    pub fuser4: f32,
    pub vuser1: vec3_t,
    pub vuser2: vec3_t,
    pub vuser3: vec3_t,
    pub vuser4: vec3_t,
    pub numphysent: ::core::ffi::c_int,
    pub physents: [physent_t; 600usize],
    pub nummoveent: ::core::ffi::c_int,
    pub moveents: [physent_t; 64usize],
    pub numvisent: ::core::ffi::c_int,
    pub visents: [physent_t; 600usize],
    pub cmd: usercmd_t,
    pub numtouch: ::core::ffi::c_int,
    pub touchindex: [pmtrace_t; 600usize],
    pub physinfo: [::core::ffi::c_char; 256usize],
    pub movevars: *mut movevars_s,
    pub player_mins: [vec3_t; 4usize],
    pub player_maxs: [vec3_t; 4usize],
    pub PM_Info_ValueForKey: ::core::option::Option<
        unsafe extern "C" fn(
            s: *const ::core::ffi::c_char,
            key: *const ::core::ffi::c_char,
        ) -> *const ::core::ffi::c_char,
    >,
    pub PM_Particle: ::core::option::Option<
        unsafe extern "C" fn(
            origin: *const f32,
            color: ::core::ffi::c_int,
            life: f32,
            zpos: ::core::ffi::c_int,
            zvel: ::core::ffi::c_int,
        ),
    >,
    pub PM_TestPlayerPosition: ::core::option::Option<
        unsafe extern "C" fn(pos: *mut f32, ptrace: *mut pmtrace_t) -> ::core::ffi::c_int,
    >,
    pub Con_NPrintf: ::core::option::Option<
        unsafe extern "C" fn(idx: ::core::ffi::c_int, fmt: *const ::core::ffi::c_char, ...),
    >,
    pub Con_DPrintf:
        ::core::option::Option<unsafe extern "C" fn(fmt: *const ::core::ffi::c_char, ...)>,
    pub Con_Printf:
        ::core::option::Option<unsafe extern "C" fn(fmt: *const ::core::ffi::c_char, ...)>,
    pub Sys_FloatTime: ::core::option::Option<unsafe extern "C" fn() -> f64>,
    pub PM_StuckTouch: ::core::option::Option<
        unsafe extern "C" fn(hitent: ::core::ffi::c_int, ptraceresult: *mut pmtrace_t),
    >,
    pub PM_PointContents: ::core::option::Option<
        unsafe extern "C" fn(
            p: *mut f32,
            truecontents: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub PM_TruePointContents:
        ::core::option::Option<unsafe extern "C" fn(p: *mut f32) -> ::core::ffi::c_int>,
    pub PM_HullPointContents: ::core::option::Option<
        unsafe extern "C" fn(
            hull: *mut hull_s,
            num: ::core::ffi::c_int,
            p: *mut f32,
        ) -> ::core::ffi::c_int,
    >,
    pub PM_PlayerTrace: ::core::option::Option<
        unsafe extern "C" fn(
            start: *mut f32,
            end: *mut f32,
            traceFlags: ::core::ffi::c_int,
            ignore_pe: ::core::ffi::c_int,
        ) -> pmtrace_t,
    >,
    pub PM_TraceLine: ::core::option::Option<
        unsafe extern "C" fn(
            start: *mut f32,
            end: *mut f32,
            flags: ::core::ffi::c_int,
            usehulll: ::core::ffi::c_int,
            ignore_pe: ::core::ffi::c_int,
        ) -> *mut pmtrace_s,
    >,
    pub RandomLong: ::core::option::Option<
        unsafe extern "C" fn(
            lLow: ::core::ffi::c_int,
            lHigh: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub RandomFloat: ::core::option::Option<unsafe extern "C" fn(flLow: f32, flHigh: f32) -> f32>,
    pub PM_GetModelType:
        ::core::option::Option<unsafe extern "C" fn(mod_: *mut model_s) -> ::core::ffi::c_int>,
    pub PM_GetModelBounds: ::core::option::Option<
        unsafe extern "C" fn(mod_: *mut model_s, mins: *mut f32, maxs: *mut f32),
    >,
    pub PM_HullForBsp: ::core::option::Option<
        unsafe extern "C" fn(pe: *mut physent_t, offset: *mut f32) -> *mut ::core::ffi::c_void,
    >,
    pub PM_TraceModel: ::core::option::Option<
        unsafe extern "C" fn(
            pEnt: *mut physent_t,
            start: *mut f32,
            end: *mut f32,
            trace: *mut trace_t,
        ) -> f32,
    >,
    pub COM_FileSize: ::core::option::Option<
        unsafe extern "C" fn(filename: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub COM_LoadFile: ::core::option::Option<
        unsafe extern "C" fn(
            path: *const ::core::ffi::c_char,
            usehunk: ::core::ffi::c_int,
            pLength: *mut ::core::ffi::c_int,
        ) -> *mut byte,
    >,
    pub COM_FreeFile:
        ::core::option::Option<unsafe extern "C" fn(buffer: *mut ::core::ffi::c_void)>,
    pub memfgets: ::core::option::Option<
        unsafe extern "C" fn(
            pMemFile: *mut byte,
            fileSize: ::core::ffi::c_int,
            pFilePos: *mut ::core::ffi::c_int,
            pBuffer: *mut ::core::ffi::c_char,
            bufferSize: ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_char,
    >,
    pub runfuncs: qboolean,
    pub PM_PlaySound: ::core::option::Option<
        unsafe extern "C" fn(
            channel: ::core::ffi::c_int,
            sample: *const ::core::ffi::c_char,
            volume: f32,
            attenuation: f32,
            fFlags: ::core::ffi::c_int,
            pitch: ::core::ffi::c_int,
        ),
    >,
    pub PM_TraceTexture: ::core::option::Option<
        unsafe extern "C" fn(
            ground: ::core::ffi::c_int,
            vstart: *mut f32,
            vend: *mut f32,
        ) -> *const ::core::ffi::c_char,
    >,
    pub PM_PlaybackEventFull: ::core::option::Option<
        unsafe extern "C" fn(
            flags: ::core::ffi::c_int,
            clientindex: ::core::ffi::c_int,
            eventindex: ::core::ffi::c_ushort,
            delay: f32,
            origin: *mut f32,
            angles: *mut f32,
            fparam1: f32,
            fparam2: f32,
            iparam1: ::core::ffi::c_int,
            iparam2: ::core::ffi::c_int,
            bparam1: ::core::ffi::c_int,
            bparam2: ::core::ffi::c_int,
        ),
    >,
    pub PM_PlayerTraceEx: ::core::option::Option<
        unsafe extern "C" fn(
            start: *mut f32,
            end: *mut f32,
            traceFlags: ::core::ffi::c_int,
            pfnIgnore: ::core::option::Option<
                unsafe extern "C" fn(pe: *mut physent_t) -> ::core::ffi::c_int,
            >,
        ) -> pmtrace_t,
    >,
    pub PM_TestPlayerPositionEx: ::core::option::Option<
        unsafe extern "C" fn(
            pos: *mut f32,
            ptrace: *mut pmtrace_t,
            pfnIgnore: ::core::option::Option<
                unsafe extern "C" fn(pe: *mut physent_t) -> ::core::ffi::c_int,
            >,
        ) -> ::core::ffi::c_int,
    >,
    pub PM_TraceLineEx: ::core::option::Option<
        unsafe extern "C" fn(
            start: *mut f32,
            end: *mut f32,
            flags: ::core::ffi::c_int,
            usehulll: ::core::ffi::c_int,
            pfnIgnore: ::core::option::Option<
                unsafe extern "C" fn(pe: *mut physent_t) -> ::core::ffi::c_int,
            >,
        ) -> *mut pmtrace_s,
    >,
    pub PM_TraceSurface: ::core::option::Option<
        unsafe extern "C" fn(
            ground: ::core::ffi::c_int,
            vstart: *mut f32,
            vend: *mut f32,
        ) -> *mut msurface_s,
    >,
}
pub type playermove_t = playermove_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct demo_api_s {
    pub IsRecording: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub IsPlayingback: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub IsTimeDemo: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub WriteBuffer: ::core::option::Option<
        unsafe extern "C" fn(size: ::core::ffi::c_int, buffer: *mut ::core::ffi::c_uchar),
    >,
}
pub type demo_api_t = demo_api_s;
pub const VoiceTweakControl_MicrophoneVolume: VoiceTweakControl = 0;
pub const VoiceTweakControl_OtherSpeakerScale: VoiceTweakControl = 1;
pub type VoiceTweakControl = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IVoiceTweak_s {
    pub StartVoiceTweakMode: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub EndVoiceTweakMode: ::core::option::Option<unsafe extern "C" fn()>,
    pub SetControlFloat:
        ::core::option::Option<unsafe extern "C" fn(iControl: VoiceTweakControl, value: f32)>,
    pub GetControlFloat:
        ::core::option::Option<unsafe extern "C" fn(iControl: VoiceTweakControl) -> f32>,
}
pub type IVoiceTweak = IVoiceTweak_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct event_api_s {
    pub version: ::core::ffi::c_int,
    pub EV_PlaySound: ::core::option::Option<
        unsafe extern "C" fn(
            ent: ::core::ffi::c_int,
            origin: *mut f32,
            channel: ::core::ffi::c_int,
            sample: *const ::core::ffi::c_char,
            volume: f32,
            attenuation: f32,
            fFlags: ::core::ffi::c_int,
            pitch: ::core::ffi::c_int,
        ),
    >,
    pub EV_StopSound: ::core::option::Option<
        unsafe extern "C" fn(
            ent: ::core::ffi::c_int,
            channel: ::core::ffi::c_int,
            sample: *const ::core::ffi::c_char,
        ),
    >,
    pub EV_FindModelIndex: ::core::option::Option<
        unsafe extern "C" fn(pmodel: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub EV_IsLocal: ::core::option::Option<
        unsafe extern "C" fn(playernum: ::core::ffi::c_int) -> ::core::ffi::c_int,
    >,
    pub EV_LocalPlayerDucking: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub EV_LocalPlayerViewheight: ::core::option::Option<unsafe extern "C" fn(arg1: *mut f32)>,
    pub EV_LocalPlayerBounds: ::core::option::Option<
        unsafe extern "C" fn(hull: ::core::ffi::c_int, mins: *mut f32, maxs: *mut f32),
    >,
    pub EV_IndexFromTrace:
        ::core::option::Option<unsafe extern "C" fn(pTrace: *mut pmtrace_s) -> ::core::ffi::c_int>,
    pub EV_GetPhysent:
        ::core::option::Option<unsafe extern "C" fn(idx: ::core::ffi::c_int) -> *mut physent_s>,
    pub EV_SetUpPlayerPrediction: ::core::option::Option<
        unsafe extern "C" fn(dopred: ::core::ffi::c_int, bIncludeLocalClient: ::core::ffi::c_int),
    >,
    pub EV_PushPMStates: ::core::option::Option<unsafe extern "C" fn()>,
    pub EV_PopPMStates: ::core::option::Option<unsafe extern "C" fn()>,
    pub EV_SetSolidPlayers:
        ::core::option::Option<unsafe extern "C" fn(playernum: ::core::ffi::c_int)>,
    pub EV_SetTraceHull: ::core::option::Option<unsafe extern "C" fn(hull: ::core::ffi::c_int)>,
    pub EV_PlayerTrace: ::core::option::Option<
        unsafe extern "C" fn(
            start: *mut f32,
            end: *mut f32,
            traceFlags: ::core::ffi::c_int,
            ignore_pe: ::core::ffi::c_int,
            tr: *mut pmtrace_s,
        ),
    >,
    pub EV_WeaponAnimation: ::core::option::Option<
        unsafe extern "C" fn(sequence: ::core::ffi::c_int, body: ::core::ffi::c_int),
    >,
    pub EV_PrecacheEvent: ::core::option::Option<
        unsafe extern "C" fn(
            type_: ::core::ffi::c_int,
            psz: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_ushort,
    >,
    pub EV_PlaybackEvent: ::core::option::Option<
        unsafe extern "C" fn(
            flags: ::core::ffi::c_int,
            pInvoker: *const edict_s,
            eventindex: ::core::ffi::c_ushort,
            delay: f32,
            origin: *mut f32,
            angles: *mut f32,
            fparam1: f32,
            fparam2: f32,
            iparam1: ::core::ffi::c_int,
            iparam2: ::core::ffi::c_int,
            bparam1: ::core::ffi::c_int,
            bparam2: ::core::ffi::c_int,
        ),
    >,
    pub EV_TraceTexture: ::core::option::Option<
        unsafe extern "C" fn(
            ground: ::core::ffi::c_int,
            vstart: *mut f32,
            vend: *mut f32,
        ) -> *const ::core::ffi::c_char,
    >,
    pub EV_StopAllSounds: ::core::option::Option<
        unsafe extern "C" fn(entnum: ::core::ffi::c_int, entchannel: ::core::ffi::c_int),
    >,
    pub EV_KillEvents: ::core::option::Option<
        unsafe extern "C" fn(entnum: ::core::ffi::c_int, eventname: *const ::core::ffi::c_char),
    >,
    pub EV_PlayerTraceExt: ::core::option::Option<
        unsafe extern "C" fn(
            start: *mut f32,
            end: *mut f32,
            traceFlags: ::core::ffi::c_int,
            pfnIgnore: ::core::option::Option<
                unsafe extern "C" fn(pe: *mut physent_s) -> ::core::ffi::c_int,
            >,
            tr: *mut pmtrace_s,
        ),
    >,
    pub EV_SoundForIndex: ::core::option::Option<
        unsafe extern "C" fn(index: ::core::ffi::c_int) -> *const ::core::ffi::c_char,
    >,
    pub EV_TraceSurface: ::core::option::Option<
        unsafe extern "C" fn(
            ground: ::core::ffi::c_int,
            vstart: *mut f32,
            vend: *mut f32,
        ) -> *mut msurface_s,
    >,
    pub EV_GetMovevars: ::core::option::Option<unsafe extern "C" fn() -> *mut movevars_s>,
    pub EV_VisTraceLine: ::core::option::Option<
        unsafe extern "C" fn(
            start: *mut f32,
            end: *mut f32,
            flags: ::core::ffi::c_int,
        ) -> *mut pmtrace_s,
    >,
    pub EV_GetVisent:
        ::core::option::Option<unsafe extern "C" fn(idx: ::core::ffi::c_int) -> *mut physent_s>,
    pub EV_TestLine: ::core::option::Option<
        unsafe extern "C" fn(
            start: *const vec3_t,
            end: *const vec3_t,
            flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub EV_PushTraceBounds: ::core::option::Option<
        unsafe extern "C" fn(hullnum: ::core::ffi::c_int, mins: *const f32, maxs: *const f32),
    >,
    pub EV_PopTraceBounds: ::core::option::Option<unsafe extern "C" fn()>,
}
pub type event_api_t = event_api_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmdalias_s {
    pub next: *mut cmdalias_s,
    pub name: [::core::ffi::c_char; 32usize],
    pub value: *mut ::core::ffi::c_char,
}
pub type cmdalias_t = cmdalias_s;
pub type HSPRITE = ::core::ffi::c_int;
pub type pfnUserMsgHook = ::core::option::Option<
    unsafe extern "C" fn(
        pszName: *const ::core::ffi::c_char,
        iSize: ::core::ffi::c_int,
        pbuf: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wrect_s {
    pub left: ::core::ffi::c_int,
    pub right: ::core::ffi::c_int,
    pub top: ::core::ffi::c_int,
    pub bottom: ::core::ffi::c_int,
}
pub type wrect_t = wrect_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCREENINFO_s {
    pub iSize: ::core::ffi::c_int,
    pub iWidth: ::core::ffi::c_int,
    pub iHeight: ::core::ffi::c_int,
    pub iFlags: ::core::ffi::c_int,
    pub iCharHeight: ::core::ffi::c_int,
    pub charWidths: [::core::ffi::c_short; 256usize],
}
pub type SCREENINFO = SCREENINFO_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct client_data_s {
    pub origin: vec3_t,
    pub viewangles: vec3_t,
    pub iWeaponBits: ::core::ffi::c_int,
    pub fov: f32,
}
pub type client_data_t = client_data_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct client_sprite_s {
    pub szName: [::core::ffi::c_char; 64usize],
    pub szSprite: [::core::ffi::c_char; 64usize],
    pub hspr: ::core::ffi::c_int,
    pub iRes: ::core::ffi::c_int,
    pub rc: wrect_t,
}
pub type client_sprite_t = client_sprite_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct client_textmessage_s {
    pub effect: ::core::ffi::c_int,
    pub r1: byte,
    pub g1: byte,
    pub b1: byte,
    pub a1: byte,
    pub r2: byte,
    pub g2: byte,
    pub b2: byte,
    pub a2: byte,
    pub x: f32,
    pub y: f32,
    pub fadein: f32,
    pub fadeout: f32,
    pub holdtime: f32,
    pub fxtime: f32,
    pub pName: *const ::core::ffi::c_char,
    pub pMessage: *const ::core::ffi::c_char,
}
pub type client_textmessage_t = client_textmessage_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hud_player_info_s {
    pub name: *mut ::core::ffi::c_char,
    pub ping: ::core::ffi::c_short,
    pub thisplayer: byte,
    pub spectator: byte,
    pub packetloss: byte,
    pub model: *mut ::core::ffi::c_char,
    pub topcolor: ::core::ffi::c_short,
    pub bottomcolor: ::core::ffi::c_short,
    pub m_nSteamID: u64,
}
pub type hud_player_info_t = hud_player_info_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct screenfade_s {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagPOINT {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_enginefuncs_s {
    pub pfnSPR_Load: ::core::option::Option<
        unsafe extern "C" fn(szPicName: *const ::core::ffi::c_char) -> HSPRITE,
    >,
    pub pfnSPR_Frames:
        ::core::option::Option<unsafe extern "C" fn(hPic: HSPRITE) -> ::core::ffi::c_int>,
    pub pfnSPR_Height: ::core::option::Option<
        unsafe extern "C" fn(hPic: HSPRITE, frame: ::core::ffi::c_int) -> ::core::ffi::c_int,
    >,
    pub pfnSPR_Width: ::core::option::Option<
        unsafe extern "C" fn(hPic: HSPRITE, frame: ::core::ffi::c_int) -> ::core::ffi::c_int,
    >,
    pub pfnSPR_Set: ::core::option::Option<
        unsafe extern "C" fn(
            hPic: HSPRITE,
            r: ::core::ffi::c_int,
            g: ::core::ffi::c_int,
            b: ::core::ffi::c_int,
        ),
    >,
    pub pfnSPR_Draw: ::core::option::Option<
        unsafe extern "C" fn(
            frame: ::core::ffi::c_int,
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            prc: *const wrect_t,
        ),
    >,
    pub pfnSPR_DrawHoles: ::core::option::Option<
        unsafe extern "C" fn(
            frame: ::core::ffi::c_int,
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            prc: *const wrect_t,
        ),
    >,
    pub pfnSPR_DrawAdditive: ::core::option::Option<
        unsafe extern "C" fn(
            frame: ::core::ffi::c_int,
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            prc: *const wrect_t,
        ),
    >,
    pub pfnSPR_EnableScissor: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
        ),
    >,
    pub pfnSPR_DisableScissor: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnSPR_GetList: ::core::option::Option<
        unsafe extern "C" fn(
            psz: *mut ::core::ffi::c_char,
            piCount: *mut ::core::ffi::c_int,
        ) -> *mut client_sprite_t,
    >,
    pub pfnFillRGBA: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
            r: ::core::ffi::c_int,
            g: ::core::ffi::c_int,
            b: ::core::ffi::c_int,
            a: ::core::ffi::c_int,
        ),
    >,
    pub pfnGetScreenInfo: ::core::option::Option<
        unsafe extern "C" fn(pscrinfo: *mut SCREENINFO) -> ::core::ffi::c_int,
    >,
    pub pfnSetCrosshair: ::core::option::Option<
        unsafe extern "C" fn(
            hspr: HSPRITE,
            rc: wrect_t,
            r: ::core::ffi::c_int,
            g: ::core::ffi::c_int,
            b: ::core::ffi::c_int,
        ),
    >,
    pub pfnRegisterVariable: ::core::option::Option<
        unsafe extern "C" fn(
            szName: *const ::core::ffi::c_char,
            szValue: *const ::core::ffi::c_char,
            flags: ::core::ffi::c_int,
        ) -> *mut cvar_s,
    >,
    pub pfnGetCvarFloat:
        ::core::option::Option<unsafe extern "C" fn(szName: *const ::core::ffi::c_char) -> f32>,
    pub pfnGetCvarString: ::core::option::Option<
        unsafe extern "C" fn(szName: *const ::core::ffi::c_char) -> *const ::core::ffi::c_char,
    >,
    pub pfnAddCommand: ::core::option::Option<
        unsafe extern "C" fn(
            cmd_name: *const ::core::ffi::c_char,
            function: ::core::option::Option<unsafe extern "C" fn()>,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnHookUserMsg: ::core::option::Option<
        unsafe extern "C" fn(
            szMsgName: *const ::core::ffi::c_char,
            pfn: pfnUserMsgHook,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnServerCmd: ::core::option::Option<
        unsafe extern "C" fn(szCmdString: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub pfnClientCmd: ::core::option::Option<
        unsafe extern "C" fn(szCmdString: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub pfnGetPlayerInfo: ::core::option::Option<
        unsafe extern "C" fn(ent_num: ::core::ffi::c_int, pinfo: *mut hud_player_info_t),
    >,
    pub pfnPlaySoundByName: ::core::option::Option<
        unsafe extern "C" fn(szSound: *const ::core::ffi::c_char, volume: f32),
    >,
    pub pfnPlaySoundByIndex:
        ::core::option::Option<unsafe extern "C" fn(iSound: ::core::ffi::c_int, volume: f32)>,
    pub pfnAngleVectors: ::core::option::Option<
        unsafe extern "C" fn(
            vecAngles: *const f32,
            forward: *mut f32,
            right: *mut f32,
            up: *mut f32,
        ),
    >,
    pub pfnTextMessageGet: ::core::option::Option<
        unsafe extern "C" fn(pName: *const ::core::ffi::c_char) -> *mut client_textmessage_t,
    >,
    pub pfnDrawCharacter: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            number: ::core::ffi::c_int,
            r: ::core::ffi::c_int,
            g: ::core::ffi::c_int,
            b: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnDrawConsoleString: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            string: *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnDrawSetTextColor: ::core::option::Option<unsafe extern "C" fn(r: f32, g: f32, b: f32)>,
    pub pfnDrawConsoleStringLen: ::core::option::Option<
        unsafe extern "C" fn(
            string: *const ::core::ffi::c_char,
            length: *mut ::core::ffi::c_int,
            height: *mut ::core::ffi::c_int,
        ),
    >,
    pub pfnConsolePrint:
        ::core::option::Option<unsafe extern "C" fn(string: *const ::core::ffi::c_char)>,
    pub pfnCenterPrint:
        ::core::option::Option<unsafe extern "C" fn(string: *const ::core::ffi::c_char)>,
    pub GetWindowCenterX: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub GetWindowCenterY: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub GetViewAngles: ::core::option::Option<unsafe extern "C" fn(arg1: *mut f32)>,
    pub SetViewAngles: ::core::option::Option<unsafe extern "C" fn(arg1: *mut f32)>,
    pub GetMaxClients: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub Cvar_SetValue:
        ::core::option::Option<unsafe extern "C" fn(cvar: *const ::core::ffi::c_char, value: f32)>,
    pub Cmd_Argc: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub Cmd_Argv: ::core::option::Option<
        unsafe extern "C" fn(arg: ::core::ffi::c_int) -> *const ::core::ffi::c_char,
    >,
    pub Con_Printf:
        ::core::option::Option<unsafe extern "C" fn(fmt: *const ::core::ffi::c_char, ...)>,
    pub Con_DPrintf:
        ::core::option::Option<unsafe extern "C" fn(fmt: *const ::core::ffi::c_char, ...)>,
    pub Con_NPrintf: ::core::option::Option<
        unsafe extern "C" fn(pos: ::core::ffi::c_int, fmt: *const ::core::ffi::c_char, ...),
    >,
    pub Con_NXPrintf: ::core::option::Option<
        unsafe extern "C" fn(info: *mut con_nprint_s, fmt: *const ::core::ffi::c_char, ...),
    >,
    pub PhysInfo_ValueForKey: ::core::option::Option<
        unsafe extern "C" fn(key: *const ::core::ffi::c_char) -> *const ::core::ffi::c_char,
    >,
    pub ServerInfo_ValueForKey: ::core::option::Option<
        unsafe extern "C" fn(key: *const ::core::ffi::c_char) -> *const ::core::ffi::c_char,
    >,
    pub GetClientMaxspeed: ::core::option::Option<unsafe extern "C" fn() -> f32>,
    pub CheckParm: ::core::option::Option<
        unsafe extern "C" fn(
            parm: *mut ::core::ffi::c_char,
            ppnext: *mut *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int,
    >,
    pub Key_Event: ::core::option::Option<
        unsafe extern "C" fn(key: ::core::ffi::c_int, down: ::core::ffi::c_int),
    >,
    pub GetMousePosition: ::core::option::Option<
        unsafe extern "C" fn(mx: *mut ::core::ffi::c_int, my: *mut ::core::ffi::c_int),
    >,
    pub IsNoClipping: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub GetLocalPlayer: ::core::option::Option<unsafe extern "C" fn() -> *mut cl_entity_s>,
    pub GetViewModel: ::core::option::Option<unsafe extern "C" fn() -> *mut cl_entity_s>,
    pub GetEntityByIndex:
        ::core::option::Option<unsafe extern "C" fn(idx: ::core::ffi::c_int) -> *mut cl_entity_s>,
    pub GetClientTime: ::core::option::Option<unsafe extern "C" fn() -> f32>,
    pub V_CalcShake: ::core::option::Option<unsafe extern "C" fn()>,
    pub V_ApplyShake: ::core::option::Option<
        unsafe extern "C" fn(origin: *mut f32, angles: *mut f32, factor: f32),
    >,
    pub PM_PointContents: ::core::option::Option<
        unsafe extern "C" fn(
            point: *const f32,
            truecontents: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub PM_WaterEntity:
        ::core::option::Option<unsafe extern "C" fn(p: *const f32) -> ::core::ffi::c_int>,
    pub PM_TraceLine: ::core::option::Option<
        unsafe extern "C" fn(
            start: *mut f32,
            end: *mut f32,
            flags: ::core::ffi::c_int,
            usehull: ::core::ffi::c_int,
            ignore_pe: ::core::ffi::c_int,
        ) -> *mut pmtrace_s,
    >,
    pub CL_LoadModel: ::core::option::Option<
        unsafe extern "C" fn(
            modelname: *const ::core::ffi::c_char,
            index: *mut ::core::ffi::c_int,
        ) -> *mut model_s,
    >,
    pub CL_CreateVisibleEntity: ::core::option::Option<
        unsafe extern "C" fn(
            type_: ::core::ffi::c_int,
            ent: *mut cl_entity_s,
        ) -> ::core::ffi::c_int,
    >,
    pub GetSpritePointer:
        ::core::option::Option<unsafe extern "C" fn(hSprite: HSPRITE) -> *const model_s>,
    pub pfnPlaySoundByNameAtLocation: ::core::option::Option<
        unsafe extern "C" fn(szSound: *mut ::core::ffi::c_char, volume: f32, origin: *mut f32),
    >,
    pub pfnPrecacheEvent: ::core::option::Option<
        unsafe extern "C" fn(
            type_: ::core::ffi::c_int,
            psz: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_ushort,
    >,
    pub pfnPlaybackEvent: ::core::option::Option<
        unsafe extern "C" fn(
            flags: ::core::ffi::c_int,
            pInvoker: *const edict_s,
            eventindex: ::core::ffi::c_ushort,
            delay: f32,
            origin: *mut f32,
            angles: *mut f32,
            fparam1: f32,
            fparam2: f32,
            iparam1: ::core::ffi::c_int,
            iparam2: ::core::ffi::c_int,
            bparam1: ::core::ffi::c_int,
            bparam2: ::core::ffi::c_int,
        ),
    >,
    pub pfnWeaponAnim: ::core::option::Option<
        unsafe extern "C" fn(iAnim: ::core::ffi::c_int, body: ::core::ffi::c_int),
    >,
    pub pfnRandomFloat:
        ::core::option::Option<unsafe extern "C" fn(flLow: f32, flHigh: f32) -> f32>,
    pub pfnRandomLong: ::core::option::Option<
        unsafe extern "C" fn(
            lLow: ::core::ffi::c_int,
            lHigh: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnHookEvent: ::core::option::Option<
        unsafe extern "C" fn(
            name: *const ::core::ffi::c_char,
            pfnEvent: ::core::option::Option<unsafe extern "C" fn(args: *mut event_args_s)>,
        ),
    >,
    pub Con_IsVisible: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnGetGameDirectory:
        ::core::option::Option<unsafe extern "C" fn() -> *const ::core::ffi::c_char>,
    pub pfnGetCvarPointer: ::core::option::Option<
        unsafe extern "C" fn(szName: *const ::core::ffi::c_char) -> *mut cvar_s,
    >,
    pub Key_LookupBinding: ::core::option::Option<
        unsafe extern "C" fn(pBinding: *const ::core::ffi::c_char) -> *const ::core::ffi::c_char,
    >,
    pub pfnGetLevelName:
        ::core::option::Option<unsafe extern "C" fn() -> *const ::core::ffi::c_char>,
    pub pfnGetScreenFade: ::core::option::Option<unsafe extern "C" fn(fade: *mut screenfade_s)>,
    pub pfnSetScreenFade: ::core::option::Option<unsafe extern "C" fn(fade: *mut screenfade_s)>,
    pub VGui_GetPanel: ::core::option::Option<unsafe extern "C" fn() -> *mut ::core::ffi::c_void>,
    pub VGui_ViewportPaintBackground:
        ::core::option::Option<unsafe extern "C" fn(extents: *mut [::core::ffi::c_int; 4usize])>,
    pub COM_LoadFile: ::core::option::Option<
        unsafe extern "C" fn(
            path: *const ::core::ffi::c_char,
            usehunk: ::core::ffi::c_int,
            pLength: *mut ::core::ffi::c_int,
        ) -> *mut byte,
    >,
    pub COM_ParseFile: ::core::option::Option<
        unsafe extern "C" fn(
            data: *mut ::core::ffi::c_char,
            token: *mut ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char,
    >,
    pub COM_FreeFile:
        ::core::option::Option<unsafe extern "C" fn(buffer: *mut ::core::ffi::c_void)>,
    pub pTriAPI: *mut triangleapi_s,
    pub pEfxAPI: *mut efx_api_s,
    pub pEventAPI: *mut event_api_s,
    pub pDemoAPI: *mut demo_api_s,
    pub pNetAPI: *mut net_api_s,
    pub pVoiceTweak: *mut IVoiceTweak_s,
    pub IsSpectateOnly: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub LoadMapSprite: ::core::option::Option<
        unsafe extern "C" fn(filename: *const ::core::ffi::c_char) -> *mut model_s,
    >,
    pub COM_AddAppDirectoryToSearchPath: ::core::option::Option<
        unsafe extern "C" fn(
            pszBaseDir: *const ::core::ffi::c_char,
            appName: *const ::core::ffi::c_char,
        ),
    >,
    pub COM_ExpandFilename: ::core::option::Option<
        unsafe extern "C" fn(
            fileName: *const ::core::ffi::c_char,
            nameOutBuffer: *mut ::core::ffi::c_char,
            nameOutBufferSize: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub PlayerInfo_ValueForKey: ::core::option::Option<
        unsafe extern "C" fn(
            playerNum: ::core::ffi::c_int,
            key: *const ::core::ffi::c_char,
        ) -> *const ::core::ffi::c_char,
    >,
    pub PlayerInfo_SetValueForKey: ::core::option::Option<
        unsafe extern "C" fn(key: *const ::core::ffi::c_char, value: *const ::core::ffi::c_char),
    >,
    pub GetPlayerUniqueID: ::core::option::Option<
        unsafe extern "C" fn(
            iPlayer: ::core::ffi::c_int,
            playerID: *mut [::core::ffi::c_char; 16usize],
        ) -> qboolean,
    >,
    pub GetTrackerIDForPlayer: ::core::option::Option<
        unsafe extern "C" fn(playerSlot: ::core::ffi::c_int) -> ::core::ffi::c_int,
    >,
    pub GetPlayerForTrackerID: ::core::option::Option<
        unsafe extern "C" fn(trackerID: ::core::ffi::c_int) -> ::core::ffi::c_int,
    >,
    pub pfnServerCmdUnreliable: ::core::option::Option<
        unsafe extern "C" fn(szCmdString: *mut ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub pfnGetMousePos: ::core::option::Option<unsafe extern "C" fn(ppt: *mut tagPOINT)>,
    pub pfnSetMousePos:
        ::core::option::Option<unsafe extern "C" fn(x: ::core::ffi::c_int, y: ::core::ffi::c_int)>,
    pub pfnSetMouseEnable: ::core::option::Option<unsafe extern "C" fn(fEnable: qboolean)>,
    pub pfnGetFirstCvarPtr: ::core::option::Option<unsafe extern "C" fn() -> *mut cvar_s>,
    pub pfnGetFirstCmdFunctionHandle:
        ::core::option::Option<unsafe extern "C" fn() -> *mut ::core::ffi::c_void>,
    pub pfnGetNextCmdFunctionHandle: ::core::option::Option<
        unsafe extern "C" fn(cmdhandle: *mut ::core::ffi::c_void) -> *mut ::core::ffi::c_void,
    >,
    pub pfnGetCmdFunctionName: ::core::option::Option<
        unsafe extern "C" fn(cmdhandle: *mut ::core::ffi::c_void) -> *const ::core::ffi::c_char,
    >,
    pub pfnGetClientOldTime: ::core::option::Option<unsafe extern "C" fn() -> f32>,
    pub pfnGetGravity: ::core::option::Option<unsafe extern "C" fn() -> f32>,
    pub pfnGetModelByIndex:
        ::core::option::Option<unsafe extern "C" fn(index: ::core::ffi::c_int) -> *mut model_s>,
    pub pfnSetFilterMode: ::core::option::Option<unsafe extern "C" fn(mode: ::core::ffi::c_int)>,
    pub pfnSetFilterColor:
        ::core::option::Option<unsafe extern "C" fn(red: f32, green: f32, blue: f32)>,
    pub pfnSetFilterBrightness: ::core::option::Option<unsafe extern "C" fn(brightness: f32)>,
    pub pfnSequenceGet: ::core::option::Option<
        unsafe extern "C" fn(
            fileName: *const ::core::ffi::c_char,
            entryName: *const ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_void,
    >,
    pub pfnSPR_DrawGeneric: ::core::option::Option<
        unsafe extern "C" fn(
            frame: ::core::ffi::c_int,
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            prc: *const wrect_t,
            blendsrc: ::core::ffi::c_int,
            blenddst: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
        ),
    >,
    pub pfnSequencePickSentence: ::core::option::Option<
        unsafe extern "C" fn(
            groupName: *const ::core::ffi::c_char,
            pickMethod: ::core::ffi::c_int,
            entryPicked: *mut ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_void,
    >,
    pub pfnDrawString: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            str_: *const ::core::ffi::c_char,
            r: ::core::ffi::c_int,
            g: ::core::ffi::c_int,
            b: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnDrawStringReverse: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            str_: *const ::core::ffi::c_char,
            r: ::core::ffi::c_int,
            g: ::core::ffi::c_int,
            b: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub LocalPlayerInfo_ValueForKey: ::core::option::Option<
        unsafe extern "C" fn(key: *const ::core::ffi::c_char) -> *const ::core::ffi::c_char,
    >,
    pub pfnVGUI2DrawCharacter: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            ch: ::core::ffi::c_int,
            font: ::core::ffi::c_uint,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnVGUI2DrawCharacterAdditive: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            ch: ::core::ffi::c_int,
            r: ::core::ffi::c_int,
            g: ::core::ffi::c_int,
            b: ::core::ffi::c_int,
            font: ::core::ffi::c_uint,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnGetApproxWavePlayLen: ::core::option::Option<
        unsafe extern "C" fn(filename: *const ::core::ffi::c_char) -> ::core::ffi::c_uint,
    >,
    pub GetCareerGameUI: ::core::option::Option<unsafe extern "C" fn() -> *mut ::core::ffi::c_void>,
    pub Cvar_Set: ::core::option::Option<
        unsafe extern "C" fn(name: *const ::core::ffi::c_char, value: *const ::core::ffi::c_char),
    >,
    pub pfnIsPlayingCareerMatch:
        ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnPlaySoundVoiceByName: ::core::option::Option<
        unsafe extern "C" fn(
            szSound: *mut ::core::ffi::c_char,
            volume: f32,
            pitch: ::core::ffi::c_int,
        ),
    >,
    pub pfnPrimeMusicStream: ::core::option::Option<
        unsafe extern "C" fn(filename: *mut ::core::ffi::c_char, looping: ::core::ffi::c_int),
    >,
    pub pfnSys_FloatTime: ::core::option::Option<unsafe extern "C" fn() -> f64>,
    pub pfnProcessTutorMessageDecayBuffer: ::core::option::Option<
        unsafe extern "C" fn(buffer: *mut ::core::ffi::c_int, buflen: ::core::ffi::c_int),
    >,
    pub pfnConstructTutorMessageDecayBuffer: ::core::option::Option<
        unsafe extern "C" fn(buffer: *mut ::core::ffi::c_int, buflen: ::core::ffi::c_int),
    >,
    pub pfnResetTutorMessageDecayData: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnPlaySoundByNameAtPitch: ::core::option::Option<
        unsafe extern "C" fn(
            szSound: *mut ::core::ffi::c_char,
            volume: f32,
            pitch: ::core::ffi::c_int,
        ),
    >,
    pub pfnFillRGBABlend: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
            r: ::core::ffi::c_int,
            g: ::core::ffi::c_int,
            b: ::core::ffi::c_int,
            a: ::core::ffi::c_int,
        ),
    >,
    pub pfnGetAppID: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnGetAliases: ::core::option::Option<unsafe extern "C" fn() -> *mut cmdalias_t>,
    pub pfnVguiWrap2_GetMouseDelta: ::core::option::Option<
        unsafe extern "C" fn(x: *mut ::core::ffi::c_int, y: *mut ::core::ffi::c_int),
    >,
    pub pfnFilteredClientCmd: ::core::option::Option<
        unsafe extern "C" fn(cmd: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
}
pub type cl_enginefunc_t = cl_enginefuncs_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct engine_studio_api_s {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_studio_interface_s {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cldll_func_s {
    pub pfnInitialize: ::core::option::Option<
        unsafe extern "C" fn(
            pEnginefuncs: *mut cl_enginefunc_t,
            iVersion: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnInit: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnVidInit: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnRedraw: ::core::option::Option<
        unsafe extern "C" fn(flTime: f32, intermission: ::core::ffi::c_int) -> ::core::ffi::c_int,
    >,
    pub pfnUpdateClientData: ::core::option::Option<
        unsafe extern "C" fn(cdata: *mut client_data_t, flTime: f32) -> ::core::ffi::c_int,
    >,
    pub pfnReset: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnPlayerMove: ::core::option::Option<
        unsafe extern "C" fn(ppmove: *mut playermove_s, server: ::core::ffi::c_int),
    >,
    pub pfnPlayerMoveInit: ::core::option::Option<unsafe extern "C" fn(ppmove: *mut playermove_s)>,
    pub pfnPlayerMoveTexture: ::core::option::Option<
        unsafe extern "C" fn(name: *mut ::core::ffi::c_char) -> ::core::ffi::c_char,
    >,
    pub IN_ActivateMouse: ::core::option::Option<unsafe extern "C" fn()>,
    pub IN_DeactivateMouse: ::core::option::Option<unsafe extern "C" fn()>,
    pub IN_MouseEvent: ::core::option::Option<unsafe extern "C" fn(mstate: ::core::ffi::c_int)>,
    pub IN_ClearStates: ::core::option::Option<unsafe extern "C" fn()>,
    pub IN_Accumulate: ::core::option::Option<unsafe extern "C" fn()>,
    pub CL_CreateMove: ::core::option::Option<
        unsafe extern "C" fn(frametime: f32, cmd: *mut usercmd_s, active: ::core::ffi::c_int),
    >,
    pub CL_IsThirdPerson: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub CL_CameraOffset: ::core::option::Option<unsafe extern "C" fn(ofs: *mut f32)>,
    pub KB_Find: ::core::option::Option<
        unsafe extern "C" fn(name: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_void,
    >,
    pub CAM_Think: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnCalcRefdef: ::core::option::Option<unsafe extern "C" fn(pparams: *mut ref_params_t)>,
    pub pfnAddEntity: ::core::option::Option<
        unsafe extern "C" fn(
            type_: ::core::ffi::c_int,
            ent: *mut cl_entity_t,
            modelname: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnCreateEntities: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnDrawNormalTriangles: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnDrawTransparentTriangles: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnStudioEvent: ::core::option::Option<
        unsafe extern "C" fn(event: *const mstudioevent_s, entity: *const cl_entity_t),
    >,
    pub pfnPostRunCmd: ::core::option::Option<
        unsafe extern "C" fn(
            from: *mut local_state_s,
            to: *mut local_state_s,
            cmd: *mut usercmd_t,
            runfuncs: ::core::ffi::c_int,
            time: f64,
            random_seed: ::core::ffi::c_uint,
        ),
    >,
    pub pfnShutdown: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnTxferLocalOverrides: ::core::option::Option<
        unsafe extern "C" fn(state: *mut entity_state_t, client: *const clientdata_t),
    >,
    pub pfnProcessPlayerState: ::core::option::Option<
        unsafe extern "C" fn(dst: *mut entity_state_t, src: *const entity_state_t),
    >,
    pub pfnTxferPredictionData: ::core::option::Option<
        unsafe extern "C" fn(
            ps: *mut entity_state_t,
            pps: *const entity_state_t,
            pcd: *mut clientdata_t,
            ppcd: *const clientdata_t,
            wd: *mut weapon_data_t,
            pwd: *const weapon_data_t,
        ),
    >,
    pub pfnDemo_ReadBuffer:
        ::core::option::Option<unsafe extern "C" fn(size: ::core::ffi::c_int, buffer: *mut byte)>,
    pub pfnConnectionlessPacket: ::core::option::Option<
        unsafe extern "C" fn(
            net_from: *const netadr_s,
            args: *const ::core::ffi::c_char,
            buffer: *mut ::core::ffi::c_char,
            size: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnGetHullBounds: ::core::option::Option<
        unsafe extern "C" fn(
            hullnumber: ::core::ffi::c_int,
            mins: *mut f32,
            maxs: *mut f32,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnFrame: ::core::option::Option<unsafe extern "C" fn(time: f64)>,
    pub pfnKey_Event: ::core::option::Option<
        unsafe extern "C" fn(
            eventcode: ::core::ffi::c_int,
            keynum: ::core::ffi::c_int,
            pszCurrentBinding: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnTempEntUpdate: ::core::option::Option<
        unsafe extern "C" fn(
            frametime: f64,
            client_time: f64,
            cl_gravity: f64,
            ppTempEntFree: *mut *mut tempent_s,
            ppTempEntActive: *mut *mut tempent_s,
            Callback_AddVisibleEntity: ::core::option::Option<
                unsafe extern "C" fn(pEntity: *mut cl_entity_t) -> ::core::ffi::c_int,
            >,
            Callback_TempEntPlaySound: ::core::option::Option<
                unsafe extern "C" fn(pTemp: *mut tempent_s, damp: f32),
            >,
        ),
    >,
    pub pfnGetUserEntity:
        ::core::option::Option<unsafe extern "C" fn(index: ::core::ffi::c_int) -> *mut cl_entity_t>,
    pub pfnVoiceStatus: ::core::option::Option<
        unsafe extern "C" fn(entindex: ::core::ffi::c_int, bTalking: qboolean),
    >,
    pub pfnDirectorMessage: ::core::option::Option<
        unsafe extern "C" fn(iSize: ::core::ffi::c_int, pbuf: *mut ::core::ffi::c_void),
    >,
    pub pfnGetStudioModelInterface: ::core::option::Option<
        unsafe extern "C" fn(
            version: ::core::ffi::c_int,
            ppinterface: *mut *mut r_studio_interface_s,
            pstudio: *mut engine_studio_api_s,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnChatInputPosition: ::core::option::Option<
        unsafe extern "C" fn(x: *mut ::core::ffi::c_int, y: *mut ::core::ffi::c_int),
    >,
    pub pfnGetRenderInterface: ::core::option::Option<
        unsafe extern "C" fn(
            version: ::core::ffi::c_int,
            renderfuncs: *mut render_api_t,
            callback: *mut render_interface_t,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnClipMoveToEntity: ::core::option::Option<
        unsafe extern "C" fn(
            pe: *mut physent_s,
            start: *const vec3_t,
            mins: *mut vec3_t,
            maxs: *mut vec3_t,
            end: *const vec3_t,
            tr: *mut pmtrace_s,
        ),
    >,
    pub pfnTouchEvent: ::core::option::Option<
        unsafe extern "C" fn(
            type_: ::core::ffi::c_int,
            fingerID: ::core::ffi::c_int,
            x: f32,
            y: f32,
            dx: f32,
            dy: f32,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnMoveEvent: ::core::option::Option<unsafe extern "C" fn(forwardmove: f32, sidemove: f32)>,
    pub pfnLookEvent: ::core::option::Option<unsafe extern "C" fn(relyaw: f32, relpitch: f32)>,
}
pub type cldll_func_t = cldll_func_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct globalvars_t {
    pub time: f32,
    pub frametime: f32,
    pub force_retouch: f32,
    pub mapname: string_t,
    pub startspot: string_t,
    pub deathmatch: f32,
    pub coop: f32,
    pub teamplay: f32,
    pub serverflags: f32,
    pub found_secrets: f32,
    pub v_forward: vec3_t,
    pub v_up: vec3_t,
    pub v_right: vec3_t,
    pub trace_allsolid: f32,
    pub trace_startsolid: f32,
    pub trace_fraction: f32,
    pub trace_endpos: vec3_t,
    pub trace_plane_normal: vec3_t,
    pub trace_plane_dist: f32,
    pub trace_ent: *mut edict_t,
    pub trace_inopen: f32,
    pub trace_inwater: f32,
    pub trace_hitgroup: ::core::ffi::c_int,
    pub trace_flags: ::core::ffi::c_int,
    pub changelevel: ::core::ffi::c_int,
    pub cdAudioTrack: ::core::ffi::c_int,
    pub maxClients: ::core::ffi::c_int,
    pub maxEntities: ::core::ffi::c_int,
    pub pStringBase: *const ::core::ffi::c_char,
    pub pSaveData: *mut ::core::ffi::c_void,
    pub vecLandmarkOffset: vec3_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct entvars_s {
    pub classname: string_t,
    pub globalname: string_t,
    pub origin: vec3_t,
    pub oldorigin: vec3_t,
    pub velocity: vec3_t,
    pub basevelocity: vec3_t,
    pub clbasevelocity: vec3_t,
    pub movedir: vec3_t,
    pub angles: vec3_t,
    pub avelocity: vec3_t,
    pub punchangle: vec3_t,
    pub v_angle: vec3_t,
    pub endpos: vec3_t,
    pub startpos: vec3_t,
    pub impacttime: f32,
    pub starttime: f32,
    pub fixangle: ::core::ffi::c_int,
    pub idealpitch: f32,
    pub pitch_speed: f32,
    pub ideal_yaw: f32,
    pub yaw_speed: f32,
    pub modelindex: ::core::ffi::c_int,
    pub model: string_t,
    pub viewmodel: ::core::ffi::c_int,
    pub weaponmodel: ::core::ffi::c_int,
    pub absmin: vec3_t,
    pub absmax: vec3_t,
    pub mins: vec3_t,
    pub maxs: vec3_t,
    pub size: vec3_t,
    pub ltime: f32,
    pub nextthink: f32,
    pub movetype: ::core::ffi::c_int,
    pub solid: ::core::ffi::c_int,
    pub skin: ::core::ffi::c_int,
    pub body: ::core::ffi::c_int,
    pub effects: ::core::ffi::c_int,
    pub gravity: f32,
    pub friction: f32,
    pub light_level: ::core::ffi::c_int,
    pub sequence: ::core::ffi::c_int,
    pub gaitsequence: ::core::ffi::c_int,
    pub frame: f32,
    pub animtime: f32,
    pub framerate: f32,
    pub controller: [byte; 4usize],
    pub blending: [byte; 2usize],
    pub scale: f32,
    pub rendermode: ::core::ffi::c_int,
    pub renderamt: f32,
    pub rendercolor: vec3_t,
    pub renderfx: ::core::ffi::c_int,
    pub health: f32,
    pub frags: f32,
    pub weapons: ::core::ffi::c_int,
    pub takedamage: f32,
    pub deadflag: ::core::ffi::c_int,
    pub view_ofs: vec3_t,
    pub button: ::core::ffi::c_int,
    pub impulse: ::core::ffi::c_int,
    pub chain: *mut edict_t,
    pub dmg_inflictor: *mut edict_t,
    pub enemy: *mut edict_t,
    pub aiment: *mut edict_t,
    pub owner: *mut edict_t,
    pub groundentity: *mut edict_t,
    pub spawnflags: ::core::ffi::c_int,
    pub flags: ::core::ffi::c_int,
    pub colormap: ::core::ffi::c_int,
    pub team: ::core::ffi::c_int,
    pub max_health: f32,
    pub teleport_time: f32,
    pub armortype: f32,
    pub armorvalue: f32,
    pub waterlevel: ::core::ffi::c_int,
    pub watertype: ::core::ffi::c_int,
    pub target: string_t,
    pub targetname: string_t,
    pub netname: string_t,
    pub message: string_t,
    pub dmg_take: f32,
    pub dmg_save: f32,
    pub dmg: f32,
    pub dmgtime: f32,
    pub noise: string_t,
    pub noise1: string_t,
    pub noise2: string_t,
    pub noise3: string_t,
    pub speed: f32,
    pub air_finished: f32,
    pub pain_finished: f32,
    pub radsuit_finished: f32,
    pub pContainingEntity: *mut edict_t,
    pub playerclass: ::core::ffi::c_int,
    pub maxspeed: f32,
    pub fov: f32,
    pub weaponanim: ::core::ffi::c_int,
    pub pushmsec: ::core::ffi::c_int,
    pub bInDuck: ::core::ffi::c_int,
    pub flTimeStepSound: ::core::ffi::c_int,
    pub flSwimTime: ::core::ffi::c_int,
    pub flDuckTime: ::core::ffi::c_int,
    pub iStepLeft: ::core::ffi::c_int,
    pub flFallVelocity: f32,
    pub gamestate: ::core::ffi::c_int,
    pub oldbuttons: ::core::ffi::c_int,
    pub groupinfo: ::core::ffi::c_int,
    pub iuser1: ::core::ffi::c_int,
    pub iuser2: ::core::ffi::c_int,
    pub iuser3: ::core::ffi::c_int,
    pub iuser4: ::core::ffi::c_int,
    pub fuser1: f32,
    pub fuser2: f32,
    pub fuser3: f32,
    pub fuser4: f32,
    pub vuser1: vec3_t,
    pub vuser2: vec3_t,
    pub vuser3: vec3_t,
    pub vuser4: vec3_t,
    pub euser1: *mut edict_t,
    pub euser2: *mut edict_t,
    pub euser3: *mut edict_t,
    pub euser4: *mut edict_t,
}
pub type entvars_t = entvars_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct edict_s {
    pub free: qboolean,
    pub serialnumber: ::core::ffi::c_int,
    pub area: link_t,
    pub headnode: ::core::ffi::c_int,
    pub num_leafs: ::core::ffi::c_int,
    pub __bindgen_anon_1: edict_s__bindgen_ty_1,
    pub freetime: f32,
    pub pvPrivateData: *mut ::core::ffi::c_void,
    pub v: entvars_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union edict_s__bindgen_ty_1 {
    pub leafnums32: [::core::ffi::c_int; 24usize],
    pub leafnums16: [::core::ffi::c_short; 48usize],
}
pub const FCVAR_ARCHIVE: _bindgen_ty_7 = 1;
pub const FCVAR_USERINFO: _bindgen_ty_7 = 2;
pub const FCVAR_SERVER: _bindgen_ty_7 = 4;
pub const FCVAR_EXTDLL: _bindgen_ty_7 = 8;
pub const FCVAR_CLIENTDLL: _bindgen_ty_7 = 16;
pub const FCVAR_PROTECTED: _bindgen_ty_7 = 32;
pub const FCVAR_SPONLY: _bindgen_ty_7 = 64;
pub const FCVAR_PRINTABLEONLY: _bindgen_ty_7 = 128;
pub const FCVAR_UNLOGGED: _bindgen_ty_7 = 256;
pub const FCVAR_NOEXTRAWHITESPACE: _bindgen_ty_7 = 512;
pub const FCVAR_PRIVILEGED: _bindgen_ty_7 = 1024;
pub const FCVAR_FILTERABLE: _bindgen_ty_7 = 2048;
pub const FCVAR_GLCONFIG: _bindgen_ty_7 = 4096;
pub const FCVAR_CHANGED: _bindgen_ty_7 = 8192;
pub const FCVAR_GAMEUIDLL: _bindgen_ty_7 = 16384;
pub const FCVAR_CHEAT: _bindgen_ty_7 = 32768;
pub const FCVAR_LATCH: _bindgen_ty_7 = 1073741824;
pub type _bindgen_ty_7 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cvar_s {
    pub name: *mut ::core::ffi::c_char,
    pub string: *mut ::core::ffi::c_char,
    pub flags: u32,
    pub value: f32,
    pub next: *mut cvar_s,
}
pub type cvar_t = cvar_s;
pub const ALERT_TYPE_at_notice: ALERT_TYPE = 0;
pub const ALERT_TYPE_at_console: ALERT_TYPE = 1;
pub const ALERT_TYPE_at_aiconsole: ALERT_TYPE = 2;
pub const ALERT_TYPE_at_warning: ALERT_TYPE = 3;
pub const ALERT_TYPE_at_error: ALERT_TYPE = 4;
pub const ALERT_TYPE_at_logged: ALERT_TYPE = 5;
pub type ALERT_TYPE = ::core::ffi::c_uint;
pub const PRINT_TYPE_print_console: PRINT_TYPE = 0;
pub const PRINT_TYPE_print_center: PRINT_TYPE = 1;
pub const PRINT_TYPE_print_chat: PRINT_TYPE = 2;
pub type PRINT_TYPE = ::core::ffi::c_uint;
pub const FORCE_TYPE_force_exactfile: FORCE_TYPE = 0;
pub const FORCE_TYPE_force_model_samebounds: FORCE_TYPE = 1;
pub const FORCE_TYPE_force_model_specifybounds: FORCE_TYPE = 2;
pub const FORCE_TYPE_force_model_specifybounds_if_avail: FORCE_TYPE = 3;
pub type FORCE_TYPE = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TraceResult {
    pub fAllSolid: ::core::ffi::c_int,
    pub fStartSolid: ::core::ffi::c_int,
    pub fInOpen: ::core::ffi::c_int,
    pub fInWater: ::core::ffi::c_int,
    pub flFraction: f32,
    pub vecEndPos: vec3_t,
    pub flPlaneDist: f32,
    pub vecPlaneNormal: vec3_t,
    pub pHit: *mut edict_t,
    pub iHitgroup: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CDStatus {
    pub fPlaying: ::core::ffi::c_int,
    pub fWasPlaying: ::core::ffi::c_int,
    pub fInitialized: ::core::ffi::c_int,
    pub fEnabled: ::core::ffi::c_int,
    pub fPlayLooping: ::core::ffi::c_int,
    pub cdvolume: f32,
    pub fCDRom: ::core::ffi::c_int,
    pub fPlayTrack: ::core::ffi::c_int,
}
pub type CRC32_t = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct delta_s {
    _unused: [u8; 0],
}
pub type delta_t = delta_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct enginefuncs_s {
    pub pfnPrecacheModel: ::core::option::Option<
        unsafe extern "C" fn(s: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub pfnPrecacheSound: ::core::option::Option<
        unsafe extern "C" fn(s: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub pfnSetModel: ::core::option::Option<
        unsafe extern "C" fn(e: *mut edict_t, m: *const ::core::ffi::c_char),
    >,
    pub pfnModelIndex: ::core::option::Option<
        unsafe extern "C" fn(m: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub pfnModelFrames: ::core::option::Option<
        unsafe extern "C" fn(modelIndex: ::core::ffi::c_int) -> ::core::ffi::c_int,
    >,
    pub pfnSetSize: ::core::option::Option<
        unsafe extern "C" fn(e: *mut edict_t, rgflMin: *const f32, rgflMax: *const f32),
    >,
    pub pfnChangeLevel: ::core::option::Option<
        unsafe extern "C" fn(s1: *const ::core::ffi::c_char, s2: *const ::core::ffi::c_char),
    >,
    pub pfnGetSpawnParms: ::core::option::Option<unsafe extern "C" fn(ent: *mut edict_t)>,
    pub pfnSaveSpawnParms: ::core::option::Option<unsafe extern "C" fn(ent: *mut edict_t)>,
    pub pfnVecToYaw: ::core::option::Option<unsafe extern "C" fn(rgflVector: *const f32) -> f32>,
    pub pfnVecToAngles: ::core::option::Option<
        unsafe extern "C" fn(rgflVectorIn: *const f32, rgflVectorOut: *mut f32),
    >,
    pub pfnMoveToOrigin: ::core::option::Option<
        unsafe extern "C" fn(
            ent: *mut edict_t,
            pflGoal: *const f32,
            dist: f32,
            iMoveType: ::core::ffi::c_int,
        ),
    >,
    pub pfnChangeYaw: ::core::option::Option<unsafe extern "C" fn(ent: *mut edict_t)>,
    pub pfnChangePitch: ::core::option::Option<unsafe extern "C" fn(ent: *mut edict_t)>,
    pub pfnFindEntityByString: ::core::option::Option<
        unsafe extern "C" fn(
            pEdictStartSearchAfter: *mut edict_t,
            pszField: *const ::core::ffi::c_char,
            pszValue: *const ::core::ffi::c_char,
        ) -> *mut edict_t,
    >,
    pub pfnGetEntityIllum:
        ::core::option::Option<unsafe extern "C" fn(pEnt: *mut edict_t) -> ::core::ffi::c_int>,
    pub pfnFindEntityInSphere: ::core::option::Option<
        unsafe extern "C" fn(
            pEdictStartSearchAfter: *mut edict_t,
            org: *const f32,
            rad: f32,
        ) -> *mut edict_t,
    >,
    pub pfnFindClientInPVS:
        ::core::option::Option<unsafe extern "C" fn(pEdict: *mut edict_t) -> *mut edict_t>,
    pub pfnEntitiesInPVS:
        ::core::option::Option<unsafe extern "C" fn(pplayer: *mut edict_t) -> *mut edict_t>,
    pub pfnMakeVectors: ::core::option::Option<unsafe extern "C" fn(rgflVector: *const f32)>,
    pub pfnAngleVectors: ::core::option::Option<
        unsafe extern "C" fn(
            rgflVector: *const f32,
            forward: *mut f32,
            right: *mut f32,
            up: *mut f32,
        ),
    >,
    pub pfnCreateEntity: ::core::option::Option<unsafe extern "C" fn() -> *mut edict_t>,
    pub pfnRemoveEntity: ::core::option::Option<unsafe extern "C" fn(e: *mut edict_t)>,
    pub pfnCreateNamedEntity:
        ::core::option::Option<unsafe extern "C" fn(className: ::core::ffi::c_int) -> *mut edict_t>,
    pub pfnMakeStatic: ::core::option::Option<unsafe extern "C" fn(ent: *mut edict_t)>,
    pub pfnEntIsOnFloor:
        ::core::option::Option<unsafe extern "C" fn(e: *mut edict_t) -> ::core::ffi::c_int>,
    pub pfnDropToFloor:
        ::core::option::Option<unsafe extern "C" fn(e: *mut edict_t) -> ::core::ffi::c_int>,
    pub pfnWalkMove: ::core::option::Option<
        unsafe extern "C" fn(
            ent: *mut edict_t,
            yaw: f32,
            dist: f32,
            iMode: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnSetOrigin:
        ::core::option::Option<unsafe extern "C" fn(e: *mut edict_t, rgflOrigin: *const f32)>,
    pub pfnEmitSound: ::core::option::Option<
        unsafe extern "C" fn(
            entity: *mut edict_t,
            channel: ::core::ffi::c_int,
            sample: *const ::core::ffi::c_char,
            volume: f32,
            attenuation: f32,
            fFlags: ::core::ffi::c_int,
            pitch: ::core::ffi::c_int,
        ),
    >,
    pub pfnEmitAmbientSound: ::core::option::Option<
        unsafe extern "C" fn(
            entity: *mut edict_t,
            pos: *mut f32,
            samp: *const ::core::ffi::c_char,
            vol: f32,
            attenuation: f32,
            fFlags: ::core::ffi::c_int,
            pitch: ::core::ffi::c_int,
        ),
    >,
    pub pfnTraceLine: ::core::option::Option<
        unsafe extern "C" fn(
            v1: *const f32,
            v2: *const f32,
            fNoMonsters: ::core::ffi::c_int,
            pentToSkip: *mut edict_t,
            ptr: *mut TraceResult,
        ),
    >,
    pub pfnTraceToss: ::core::option::Option<
        unsafe extern "C" fn(pent: *mut edict_t, pentToIgnore: *mut edict_t, ptr: *mut TraceResult),
    >,
    pub pfnTraceMonsterHull: ::core::option::Option<
        unsafe extern "C" fn(
            pEdict: *mut edict_t,
            v1: *const f32,
            v2: *const f32,
            fNoMonsters: ::core::ffi::c_int,
            pentToSkip: *mut edict_t,
            ptr: *mut TraceResult,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnTraceHull: ::core::option::Option<
        unsafe extern "C" fn(
            v1: *const f32,
            v2: *const f32,
            fNoMonsters: ::core::ffi::c_int,
            hullNumber: ::core::ffi::c_int,
            pentToSkip: *mut edict_t,
            ptr: *mut TraceResult,
        ),
    >,
    pub pfnTraceModel: ::core::option::Option<
        unsafe extern "C" fn(
            v1: *const f32,
            v2: *const f32,
            hullNumber: ::core::ffi::c_int,
            pent: *mut edict_t,
            ptr: *mut TraceResult,
        ),
    >,
    pub pfnTraceTexture: ::core::option::Option<
        unsafe extern "C" fn(
            pTextureEntity: *mut edict_t,
            v1: *const f32,
            v2: *const f32,
        ) -> *const ::core::ffi::c_char,
    >,
    pub pfnTraceSphere: ::core::option::Option<
        unsafe extern "C" fn(
            v1: *const f32,
            v2: *const f32,
            fNoMonsters: ::core::ffi::c_int,
            radius: f32,
            pentToSkip: *mut edict_t,
            ptr: *mut TraceResult,
        ),
    >,
    pub pfnGetAimVector: ::core::option::Option<
        unsafe extern "C" fn(ent: *mut edict_t, speed: f32, rgflReturn: *mut f32),
    >,
    pub pfnServerCommand:
        ::core::option::Option<unsafe extern "C" fn(str_: *const ::core::ffi::c_char)>,
    pub pfnServerExecute: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnClientCommand: ::core::option::Option<
        unsafe extern "C" fn(pEdict: *mut edict_t, szFmt: *mut ::core::ffi::c_char, ...),
    >,
    pub pfnParticleEffect: ::core::option::Option<
        unsafe extern "C" fn(org: *const f32, dir: *const f32, color: f32, count: f32),
    >,
    pub pfnLightStyle: ::core::option::Option<
        unsafe extern "C" fn(style: ::core::ffi::c_int, val: *const ::core::ffi::c_char),
    >,
    pub pfnDecalIndex: ::core::option::Option<
        unsafe extern "C" fn(name: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub pfnPointContents:
        ::core::option::Option<unsafe extern "C" fn(rgflVector: *const f32) -> ::core::ffi::c_int>,
    pub pfnMessageBegin: ::core::option::Option<
        unsafe extern "C" fn(
            msg_dest: ::core::ffi::c_int,
            msg_type: ::core::ffi::c_int,
            pOrigin: *const f32,
            ed: *mut edict_t,
        ),
    >,
    pub pfnMessageEnd: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnWriteByte: ::core::option::Option<unsafe extern "C" fn(iValue: ::core::ffi::c_int)>,
    pub pfnWriteChar: ::core::option::Option<unsafe extern "C" fn(iValue: ::core::ffi::c_int)>,
    pub pfnWriteShort: ::core::option::Option<unsafe extern "C" fn(iValue: ::core::ffi::c_int)>,
    pub pfnWriteLong: ::core::option::Option<unsafe extern "C" fn(iValue: ::core::ffi::c_int)>,
    pub pfnWriteAngle: ::core::option::Option<unsafe extern "C" fn(flValue: f32)>,
    pub pfnWriteCoord: ::core::option::Option<unsafe extern "C" fn(flValue: f32)>,
    pub pfnWriteString:
        ::core::option::Option<unsafe extern "C" fn(sz: *const ::core::ffi::c_char)>,
    pub pfnWriteEntity: ::core::option::Option<unsafe extern "C" fn(iValue: ::core::ffi::c_int)>,
    pub pfnCVarRegister: ::core::option::Option<unsafe extern "C" fn(pCvar: *mut cvar_t)>,
    pub pfnCVarGetFloat:
        ::core::option::Option<unsafe extern "C" fn(szVarName: *const ::core::ffi::c_char) -> f32>,
    pub pfnCVarGetString: ::core::option::Option<
        unsafe extern "C" fn(szVarName: *const ::core::ffi::c_char) -> *const ::core::ffi::c_char,
    >,
    pub pfnCVarSetFloat: ::core::option::Option<
        unsafe extern "C" fn(szVarName: *const ::core::ffi::c_char, flValue: f32),
    >,
    pub pfnCVarSetString: ::core::option::Option<
        unsafe extern "C" fn(
            szVarName: *const ::core::ffi::c_char,
            szValue: *const ::core::ffi::c_char,
        ),
    >,
    pub pfnAlertMessage: ::core::option::Option<
        unsafe extern "C" fn(atype: ALERT_TYPE, szFmt: *mut ::core::ffi::c_char, ...),
    >,
    pub pfnEngineFprintf: ::core::option::Option<
        unsafe extern "C" fn(pfile: *mut FILE, szFmt: *mut ::core::ffi::c_char, ...),
    >,
    pub pfnPvAllocEntPrivateData: ::core::option::Option<
        unsafe extern "C" fn(
            pEdict: *mut edict_t,
            cb: ::core::ffi::c_long,
        ) -> *mut ::core::ffi::c_void,
    >,
    pub pfnPvEntPrivateData: ::core::option::Option<
        unsafe extern "C" fn(pEdict: *mut edict_t) -> *mut ::core::ffi::c_void,
    >,
    pub pfnFreeEntPrivateData: ::core::option::Option<unsafe extern "C" fn(pEdict: *mut edict_t)>,
    pub pfnSzFromIndex: ::core::option::Option<
        unsafe extern "C" fn(iString: ::core::ffi::c_int) -> *const ::core::ffi::c_char,
    >,
    pub pfnAllocString: ::core::option::Option<
        unsafe extern "C" fn(szValue: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub pfnGetVarsOfEnt:
        ::core::option::Option<unsafe extern "C" fn(pEdict: *mut edict_t) -> *mut entvars_s>,
    pub pfnPEntityOfEntOffset: ::core::option::Option<
        unsafe extern "C" fn(iEntOffset: ::core::ffi::c_int) -> *mut edict_t,
    >,
    pub pfnEntOffsetOfPEntity:
        ::core::option::Option<unsafe extern "C" fn(pEdict: *const edict_t) -> ::core::ffi::c_int>,
    pub pfnIndexOfEdict:
        ::core::option::Option<unsafe extern "C" fn(pEdict: *const edict_t) -> ::core::ffi::c_int>,
    pub pfnPEntityOfEntIndex:
        ::core::option::Option<unsafe extern "C" fn(iEntIndex: ::core::ffi::c_int) -> *mut edict_t>,
    pub pfnFindEntityByVars:
        ::core::option::Option<unsafe extern "C" fn(pvars: *mut entvars_s) -> *mut edict_t>,
    pub pfnGetModelPtr: ::core::option::Option<
        unsafe extern "C" fn(pEdict: *mut edict_t) -> *mut ::core::ffi::c_void,
    >,
    pub pfnRegUserMsg: ::core::option::Option<
        unsafe extern "C" fn(
            pszName: *const ::core::ffi::c_char,
            iSize: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnAnimationAutomove:
        ::core::option::Option<unsafe extern "C" fn(pEdict: *const edict_t, flTime: f32)>,
    pub pfnGetBonePosition: ::core::option::Option<
        unsafe extern "C" fn(
            pEdict: *const edict_t,
            iBone: ::core::ffi::c_int,
            rgflOrigin: *mut f32,
            rgflAngles: *mut f32,
        ),
    >,
    pub pfnFunctionFromName: ::core::option::Option<
        unsafe extern "C" fn(pName: *const ::core::ffi::c_char) -> ::core::ffi::c_ulong,
    >,
    pub pfnNameForFunction: ::core::option::Option<
        unsafe extern "C" fn(function: ::core::ffi::c_ulong) -> *const ::core::ffi::c_char,
    >,
    pub pfnClientPrintf: ::core::option::Option<
        unsafe extern "C" fn(
            pEdict: *mut edict_t,
            ptype: PRINT_TYPE,
            szMsg: *const ::core::ffi::c_char,
        ),
    >,
    pub pfnServerPrint:
        ::core::option::Option<unsafe extern "C" fn(szMsg: *const ::core::ffi::c_char)>,
    pub pfnCmd_Args: ::core::option::Option<unsafe extern "C" fn() -> *const ::core::ffi::c_char>,
    pub pfnCmd_Argv: ::core::option::Option<
        unsafe extern "C" fn(argc: ::core::ffi::c_int) -> *const ::core::ffi::c_char,
    >,
    pub pfnCmd_Argc: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnGetAttachment: ::core::option::Option<
        unsafe extern "C" fn(
            pEdict: *const edict_t,
            iAttachment: ::core::ffi::c_int,
            rgflOrigin: *mut f32,
            rgflAngles: *mut f32,
        ),
    >,
    pub pfnCRC32_Init: ::core::option::Option<unsafe extern "C" fn(pulCRC: *mut CRC32_t)>,
    pub pfnCRC32_ProcessBuffer: ::core::option::Option<
        unsafe extern "C" fn(
            pulCRC: *mut CRC32_t,
            p: *const ::core::ffi::c_void,
            len: ::core::ffi::c_int,
        ),
    >,
    pub pfnCRC32_ProcessByte: ::core::option::Option<
        unsafe extern "C" fn(pulCRC: *mut CRC32_t, ch: ::core::ffi::c_uchar),
    >,
    pub pfnCRC32_Final: ::core::option::Option<unsafe extern "C" fn(pulCRC: CRC32_t) -> CRC32_t>,
    pub pfnRandomLong: ::core::option::Option<
        unsafe extern "C" fn(
            lLow: ::core::ffi::c_int,
            lHigh: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnRandomFloat:
        ::core::option::Option<unsafe extern "C" fn(flLow: f32, flHigh: f32) -> f32>,
    pub pfnSetView: ::core::option::Option<
        unsafe extern "C" fn(pClient: *const edict_t, pViewent: *const edict_t),
    >,
    pub pfnTime: ::core::option::Option<unsafe extern "C" fn() -> f32>,
    pub pfnCrosshairAngle:
        ::core::option::Option<unsafe extern "C" fn(pClient: *const edict_t, pitch: f32, yaw: f32)>,
    pub pfnLoadFileForMe: ::core::option::Option<
        unsafe extern "C" fn(
            filename: *const ::core::ffi::c_char,
            pLength: *mut ::core::ffi::c_int,
        ) -> *mut byte,
    >,
    pub pfnFreeFile: ::core::option::Option<unsafe extern "C" fn(buffer: *mut ::core::ffi::c_void)>,
    pub pfnEndSection:
        ::core::option::Option<unsafe extern "C" fn(pszSectionName: *const ::core::ffi::c_char)>,
    pub pfnCompareFileTime: ::core::option::Option<
        unsafe extern "C" fn(
            filename1: *const ::core::ffi::c_char,
            filename2: *const ::core::ffi::c_char,
            iCompare: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnGetGameDir:
        ::core::option::Option<unsafe extern "C" fn(szGetGameDir: *mut ::core::ffi::c_char)>,
    pub pfnCvar_RegisterVariable:
        ::core::option::Option<unsafe extern "C" fn(variable: *mut cvar_t)>,
    pub pfnFadeClientVolume: ::core::option::Option<
        unsafe extern "C" fn(
            pEdict: *const edict_t,
            fadePercent: ::core::ffi::c_int,
            fadeOutSeconds: ::core::ffi::c_int,
            holdTime: ::core::ffi::c_int,
            fadeInSeconds: ::core::ffi::c_int,
        ),
    >,
    pub pfnSetClientMaxspeed:
        ::core::option::Option<unsafe extern "C" fn(pEdict: *const edict_t, fNewMaxspeed: f32)>,
    pub pfnCreateFakeClient: ::core::option::Option<
        unsafe extern "C" fn(netname: *const ::core::ffi::c_char) -> *mut edict_t,
    >,
    pub pfnRunPlayerMove: ::core::option::Option<
        unsafe extern "C" fn(
            fakeclient: *mut edict_t,
            viewangles: *const f32,
            forwardmove: f32,
            sidemove: f32,
            upmove: f32,
            buttons: ::core::ffi::c_ushort,
            impulse: byte,
            msec: byte,
        ),
    >,
    pub pfnNumberOfEntities: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnGetInfoKeyBuffer:
        ::core::option::Option<unsafe extern "C" fn(e: *mut edict_t) -> *mut ::core::ffi::c_char>,
    pub pfnInfoKeyValue: ::core::option::Option<
        unsafe extern "C" fn(
            infobuffer: *const ::core::ffi::c_char,
            key: *const ::core::ffi::c_char,
        ) -> *const ::core::ffi::c_char,
    >,
    pub pfnSetKeyValue: ::core::option::Option<
        unsafe extern "C" fn(
            infobuffer: *mut ::core::ffi::c_char,
            key: *mut ::core::ffi::c_char,
            value: *mut ::core::ffi::c_char,
        ),
    >,
    pub pfnSetClientKeyValue: ::core::option::Option<
        unsafe extern "C" fn(
            clientIndex: ::core::ffi::c_int,
            infobuffer: *mut ::core::ffi::c_char,
            key: *mut ::core::ffi::c_char,
            value: *mut ::core::ffi::c_char,
        ),
    >,
    pub pfnIsMapValid: ::core::option::Option<
        unsafe extern "C" fn(filename: *mut ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub pfnStaticDecal: ::core::option::Option<
        unsafe extern "C" fn(
            origin: *const f32,
            decalIndex: ::core::ffi::c_int,
            entityIndex: ::core::ffi::c_int,
            modelIndex: ::core::ffi::c_int,
        ),
    >,
    pub pfnPrecacheGeneric: ::core::option::Option<
        unsafe extern "C" fn(s: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub pfnGetPlayerUserId:
        ::core::option::Option<unsafe extern "C" fn(e: *mut edict_t) -> ::core::ffi::c_int>,
    pub pfnBuildSoundMsg: ::core::option::Option<
        unsafe extern "C" fn(
            entity: *mut edict_t,
            channel: ::core::ffi::c_int,
            sample: *const ::core::ffi::c_char,
            volume: f32,
            attenuation: f32,
            fFlags: ::core::ffi::c_int,
            pitch: ::core::ffi::c_int,
            msg_dest: ::core::ffi::c_int,
            msg_type: ::core::ffi::c_int,
            pOrigin: *const f32,
            ed: *mut edict_t,
        ),
    >,
    pub pfnIsDedicatedServer: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnCVarGetPointer: ::core::option::Option<
        unsafe extern "C" fn(szVarName: *const ::core::ffi::c_char) -> *mut cvar_t,
    >,
    pub pfnGetPlayerWONId:
        ::core::option::Option<unsafe extern "C" fn(e: *mut edict_t) -> ::core::ffi::c_uint>,
    pub pfnInfo_RemoveKey: ::core::option::Option<
        unsafe extern "C" fn(s: *mut ::core::ffi::c_char, key: *const ::core::ffi::c_char),
    >,
    pub pfnGetPhysicsKeyValue: ::core::option::Option<
        unsafe extern "C" fn(
            pClient: *const edict_t,
            key: *const ::core::ffi::c_char,
        ) -> *const ::core::ffi::c_char,
    >,
    pub pfnSetPhysicsKeyValue: ::core::option::Option<
        unsafe extern "C" fn(
            pClient: *const edict_t,
            key: *const ::core::ffi::c_char,
            value: *const ::core::ffi::c_char,
        ),
    >,
    pub pfnGetPhysicsInfoString: ::core::option::Option<
        unsafe extern "C" fn(pClient: *const edict_t) -> *const ::core::ffi::c_char,
    >,
    pub pfnPrecacheEvent: ::core::option::Option<
        unsafe extern "C" fn(
            type_: ::core::ffi::c_int,
            psz: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_ushort,
    >,
    pub pfnPlaybackEvent: ::core::option::Option<
        unsafe extern "C" fn(
            flags: ::core::ffi::c_int,
            pInvoker: *const edict_t,
            eventindex: ::core::ffi::c_ushort,
            delay: f32,
            origin: *mut f32,
            angles: *mut f32,
            fparam1: f32,
            fparam2: f32,
            iparam1: ::core::ffi::c_int,
            iparam2: ::core::ffi::c_int,
            bparam1: ::core::ffi::c_int,
            bparam2: ::core::ffi::c_int,
        ),
    >,
    pub pfnSetFatPVS:
        ::core::option::Option<unsafe extern "C" fn(org: *const f32) -> *mut ::core::ffi::c_uchar>,
    pub pfnSetFatPAS:
        ::core::option::Option<unsafe extern "C" fn(org: *const f32) -> *mut ::core::ffi::c_uchar>,
    pub pfnCheckVisibility: ::core::option::Option<
        unsafe extern "C" fn(
            entity: *const edict_t,
            pset: *mut ::core::ffi::c_uchar,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnDeltaSetField: ::core::option::Option<
        unsafe extern "C" fn(pFields: *mut delta_s, fieldname: *const ::core::ffi::c_char),
    >,
    pub pfnDeltaUnsetField: ::core::option::Option<
        unsafe extern "C" fn(pFields: *mut delta_s, fieldname: *const ::core::ffi::c_char),
    >,
    pub pfnDeltaAddEncoder: ::core::option::Option<
        unsafe extern "C" fn(
            name: *mut ::core::ffi::c_char,
            conditionalencode: ::core::option::Option<
                unsafe extern "C" fn(
                    pFields: *mut delta_s,
                    from: *const ::core::ffi::c_uchar,
                    to: *const ::core::ffi::c_uchar,
                ),
            >,
        ),
    >,
    pub pfnGetCurrentPlayer: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnCanSkipPlayer:
        ::core::option::Option<unsafe extern "C" fn(player: *const edict_t) -> ::core::ffi::c_int>,
    pub pfnDeltaFindField: ::core::option::Option<
        unsafe extern "C" fn(
            pFields: *mut delta_s,
            fieldname: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnDeltaSetFieldByIndex: ::core::option::Option<
        unsafe extern "C" fn(pFields: *mut delta_s, fieldNumber: ::core::ffi::c_int),
    >,
    pub pfnDeltaUnsetFieldByIndex: ::core::option::Option<
        unsafe extern "C" fn(pFields: *mut delta_s, fieldNumber: ::core::ffi::c_int),
    >,
    pub pfnSetGroupMask: ::core::option::Option<
        unsafe extern "C" fn(mask: ::core::ffi::c_int, op: ::core::ffi::c_int),
    >,
    pub pfnCreateInstancedBaseline: ::core::option::Option<
        unsafe extern "C" fn(
            classname: ::core::ffi::c_int,
            baseline: *mut entity_state_s,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnCvar_DirectSet: ::core::option::Option<
        unsafe extern "C" fn(var: *mut cvar_s, value: *const ::core::ffi::c_char),
    >,
    pub pfnForceUnmodified: ::core::option::Option<
        unsafe extern "C" fn(
            type_: FORCE_TYPE,
            mins: *mut f32,
            maxs: *mut f32,
            filename: *const ::core::ffi::c_char,
        ),
    >,
    pub pfnGetPlayerStats: ::core::option::Option<
        unsafe extern "C" fn(
            pClient: *const edict_t,
            ping: *mut ::core::ffi::c_int,
            packet_loss: *mut ::core::ffi::c_int,
        ),
    >,
    pub pfnAddServerCommand: ::core::option::Option<
        unsafe extern "C" fn(
            cmd_name: *const ::core::ffi::c_char,
            function: ::core::option::Option<unsafe extern "C" fn()>,
        ),
    >,
    pub pfnVoice_GetClientListening: ::core::option::Option<
        unsafe extern "C" fn(
            iReceiver: ::core::ffi::c_int,
            iSender: ::core::ffi::c_int,
        ) -> qboolean,
    >,
    pub pfnVoice_SetClientListening: ::core::option::Option<
        unsafe extern "C" fn(
            iReceiver: ::core::ffi::c_int,
            iSender: ::core::ffi::c_int,
            bListen: qboolean,
        ) -> qboolean,
    >,
    pub pfnGetPlayerAuthId:
        ::core::option::Option<unsafe extern "C" fn(e: *mut edict_t) -> *const ::core::ffi::c_char>,
    pub pfnSequenceGet: ::core::option::Option<
        unsafe extern "C" fn(
            fileName: *const ::core::ffi::c_char,
            entryName: *const ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_void,
    >,
    pub pfnSequencePickSentence: ::core::option::Option<
        unsafe extern "C" fn(
            groupName: *const ::core::ffi::c_char,
            pickMethod: ::core::ffi::c_int,
            picked: *mut ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_void,
    >,
    pub pfnGetFileSize: ::core::option::Option<
        unsafe extern "C" fn(filename: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub pfnGetApproxWavePlayLen: ::core::option::Option<
        unsafe extern "C" fn(filepath: *const ::core::ffi::c_char) -> ::core::ffi::c_uint,
    >,
    pub pfnIsCareerMatch: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnGetLocalizedStringLength: ::core::option::Option<
        unsafe extern "C" fn(label: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub pfnRegisterTutorMessageShown:
        ::core::option::Option<unsafe extern "C" fn(mid: ::core::ffi::c_int)>,
    pub pfnGetTimesTutorMessageShown:
        ::core::option::Option<unsafe extern "C" fn(mid: ::core::ffi::c_int) -> ::core::ffi::c_int>,
    pub pfnProcessTutorMessageDecayBuffer: ::core::option::Option<
        unsafe extern "C" fn(buffer: *mut ::core::ffi::c_int, bufferLength: ::core::ffi::c_int),
    >,
    pub pfnConstructTutorMessageDecayBuffer: ::core::option::Option<
        unsafe extern "C" fn(buffer: *mut ::core::ffi::c_int, bufferLength: ::core::ffi::c_int),
    >,
    pub pfnResetTutorMessageDecayData: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnQueryClientCvarValue: ::core::option::Option<
        unsafe extern "C" fn(player: *const edict_t, cvarName: *const ::core::ffi::c_char),
    >,
    pub pfnQueryClientCvarValue2: ::core::option::Option<
        unsafe extern "C" fn(
            player: *const edict_t,
            cvarName: *const ::core::ffi::c_char,
            requestID: ::core::ffi::c_int,
        ),
    >,
    pub pfnCheckParm: ::core::option::Option<
        unsafe extern "C" fn(
            parm: *mut ::core::ffi::c_char,
            ppnext: *mut *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnPEntityOfEntIndexAllEntities:
        ::core::option::Option<unsafe extern "C" fn(iEntIndex: ::core::ffi::c_int) -> *mut edict_t>,
}
pub type enginefuncs_t = enginefuncs_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct KeyValueData_s {
    pub szClassName: *mut ::core::ffi::c_char,
    pub szKeyName: *mut ::core::ffi::c_char,
    pub szValue: *mut ::core::ffi::c_char,
    pub fHandled: ::core::ffi::c_int,
}
pub type KeyValueData = KeyValueData_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LEVELLIST {
    pub mapName: [::core::ffi::c_char; 32usize],
    pub landmarkName: [::core::ffi::c_char; 32usize],
    pub pentLandmark: *mut edict_t,
    pub vecLandmarkOrigin: vec3_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ENTITYTABLE {
    pub id: ::core::ffi::c_int,
    pub pent: *mut edict_t,
    pub location: ::core::ffi::c_int,
    pub size: ::core::ffi::c_int,
    pub flags: ::core::ffi::c_int,
    pub classname: string_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct saverestore_s {
    pub pBaseData: *mut ::core::ffi::c_char,
    pub pCurrentData: *mut ::core::ffi::c_char,
    pub size: ::core::ffi::c_int,
    pub bufferSize: ::core::ffi::c_int,
    pub tokenSize: ::core::ffi::c_int,
    pub tokenCount: ::core::ffi::c_int,
    pub pTokens: *mut *mut ::core::ffi::c_char,
    pub currentIndex: ::core::ffi::c_int,
    pub tableCount: ::core::ffi::c_int,
    pub connectionCount: ::core::ffi::c_int,
    pub pTable: *mut ENTITYTABLE,
    pub levelList: [LEVELLIST; 16usize],
    pub fUseLandmark: ::core::ffi::c_int,
    pub szLandmarkName: [::core::ffi::c_char; 20usize],
    pub vecLandmarkOffset: vec3_t,
    pub time: f32,
    pub szCurrentMapName: [::core::ffi::c_char; 32usize],
}
pub type SAVERESTOREDATA = saverestore_s;
pub const _fieldtypes_FIELD_FLOAT: _fieldtypes = 0;
pub const _fieldtypes_FIELD_STRING: _fieldtypes = 1;
pub const _fieldtypes_FIELD_ENTITY: _fieldtypes = 2;
pub const _fieldtypes_FIELD_CLASSPTR: _fieldtypes = 3;
pub const _fieldtypes_FIELD_EHANDLE: _fieldtypes = 4;
pub const _fieldtypes_FIELD_EVARS: _fieldtypes = 5;
pub const _fieldtypes_FIELD_EDICT: _fieldtypes = 6;
pub const _fieldtypes_FIELD_VECTOR: _fieldtypes = 7;
pub const _fieldtypes_FIELD_POSITION_VECTOR: _fieldtypes = 8;
pub const _fieldtypes_FIELD_POINTER: _fieldtypes = 9;
pub const _fieldtypes_FIELD_INTEGER: _fieldtypes = 10;
pub const _fieldtypes_FIELD_FUNCTION: _fieldtypes = 11;
pub const _fieldtypes_FIELD_BOOLEAN: _fieldtypes = 12;
pub const _fieldtypes_FIELD_SHORT: _fieldtypes = 13;
pub const _fieldtypes_FIELD_CHARACTER: _fieldtypes = 14;
pub const _fieldtypes_FIELD_TIME: _fieldtypes = 15;
pub const _fieldtypes_FIELD_MODELNAME: _fieldtypes = 16;
pub const _fieldtypes_FIELD_SOUNDNAME: _fieldtypes = 17;
pub const _fieldtypes_FIELD_TYPECOUNT: _fieldtypes = 18;
pub type _fieldtypes = ::core::ffi::c_uint;
pub use self::_fieldtypes as FIELDTYPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TYPEDESCRIPTION {
    pub fieldType: FIELDTYPE,
    pub fieldName: *const ::core::ffi::c_char,
    pub fieldOffset: ::core::ffi::c_int,
    pub fieldSize: ::core::ffi::c_short,
    pub flags: ::core::ffi::c_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DLL_FUNCTIONS {
    pub pfnGameInit: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnSpawn:
        ::core::option::Option<unsafe extern "C" fn(pent: *mut edict_t) -> ::core::ffi::c_int>,
    pub pfnThink: ::core::option::Option<unsafe extern "C" fn(pent: *mut edict_t)>,
    pub pfnUse: ::core::option::Option<
        unsafe extern "C" fn(pentUsed: *mut edict_t, pentOther: *mut edict_t),
    >,
    pub pfnTouch: ::core::option::Option<
        unsafe extern "C" fn(pentTouched: *mut edict_t, pentOther: *mut edict_t),
    >,
    pub pfnBlocked: ::core::option::Option<
        unsafe extern "C" fn(pentBlocked: *mut edict_t, pentOther: *mut edict_t),
    >,
    pub pfnKeyValue: ::core::option::Option<
        unsafe extern "C" fn(pentKeyvalue: *mut edict_t, pkvd: *mut KeyValueData),
    >,
    pub pfnSave: ::core::option::Option<
        unsafe extern "C" fn(pent: *mut edict_t, pSaveData: *mut SAVERESTOREDATA),
    >,
    pub pfnRestore: ::core::option::Option<
        unsafe extern "C" fn(
            pent: *mut edict_t,
            pSaveData: *mut SAVERESTOREDATA,
            globalEntity: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnSetAbsBox: ::core::option::Option<unsafe extern "C" fn(pent: *mut edict_t)>,
    pub pfnSaveWriteFields: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut SAVERESTOREDATA,
            arg2: *const ::core::ffi::c_char,
            arg3: *mut ::core::ffi::c_void,
            arg4: *mut TYPEDESCRIPTION,
            arg5: ::core::ffi::c_int,
        ),
    >,
    pub pfnSaveReadFields: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut SAVERESTOREDATA,
            arg2: *const ::core::ffi::c_char,
            arg3: *mut ::core::ffi::c_void,
            arg4: *mut TYPEDESCRIPTION,
            arg5: ::core::ffi::c_int,
        ),
    >,
    pub pfnSaveGlobalState:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut SAVERESTOREDATA)>,
    pub pfnRestoreGlobalState:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut SAVERESTOREDATA)>,
    pub pfnResetGlobalState: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnClientConnect: ::core::option::Option<
        unsafe extern "C" fn(
            pEntity: *mut edict_t,
            pszName: *const ::core::ffi::c_char,
            pszAddress: *const ::core::ffi::c_char,
            szRejectReason: *mut [::core::ffi::c_char; 128usize],
        ) -> qboolean,
    >,
    pub pfnClientDisconnect: ::core::option::Option<unsafe extern "C" fn(pEntity: *mut edict_t)>,
    pub pfnClientKill: ::core::option::Option<unsafe extern "C" fn(pEntity: *mut edict_t)>,
    pub pfnClientPutInServer: ::core::option::Option<unsafe extern "C" fn(pEntity: *mut edict_t)>,
    pub pfnClientCommand: ::core::option::Option<unsafe extern "C" fn(pEntity: *mut edict_t)>,
    pub pfnClientUserInfoChanged: ::core::option::Option<
        unsafe extern "C" fn(pEntity: *mut edict_t, infobuffer: *mut ::core::ffi::c_char),
    >,
    pub pfnServerActivate: ::core::option::Option<
        unsafe extern "C" fn(
            pEdictList: *mut edict_t,
            edictCount: ::core::ffi::c_int,
            clientMax: ::core::ffi::c_int,
        ),
    >,
    pub pfnServerDeactivate: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnPlayerPreThink: ::core::option::Option<unsafe extern "C" fn(pEntity: *mut edict_t)>,
    pub pfnPlayerPostThink: ::core::option::Option<unsafe extern "C" fn(pEntity: *mut edict_t)>,
    pub pfnStartFrame: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnParmsNewLevel: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnParmsChangeLevel: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnGetGameDescription:
        ::core::option::Option<unsafe extern "C" fn() -> *const ::core::ffi::c_char>,
    pub pfnPlayerCustomization: ::core::option::Option<
        unsafe extern "C" fn(pEntity: *mut edict_t, pCustom: *mut customization_t),
    >,
    pub pfnSpectatorConnect: ::core::option::Option<unsafe extern "C" fn(pEntity: *mut edict_t)>,
    pub pfnSpectatorDisconnect: ::core::option::Option<unsafe extern "C" fn(pEntity: *mut edict_t)>,
    pub pfnSpectatorThink: ::core::option::Option<unsafe extern "C" fn(pEntity: *mut edict_t)>,
    pub pfnSys_Error:
        ::core::option::Option<unsafe extern "C" fn(error_string: *const ::core::ffi::c_char)>,
    pub pfnPM_Move:
        ::core::option::Option<unsafe extern "C" fn(ppmove: *mut playermove_s, server: qboolean)>,
    pub pfnPM_Init: ::core::option::Option<unsafe extern "C" fn(ppmove: *mut playermove_s)>,
    pub pfnPM_FindTextureType: ::core::option::Option<
        unsafe extern "C" fn(name: *mut ::core::ffi::c_char) -> ::core::ffi::c_char,
    >,
    pub pfnSetupVisibility: ::core::option::Option<
        unsafe extern "C" fn(
            pViewEntity: *mut edict_s,
            pClient: *mut edict_s,
            pvs: *mut *mut ::core::ffi::c_uchar,
            pas: *mut *mut ::core::ffi::c_uchar,
        ),
    >,
    pub pfnUpdateClientData: ::core::option::Option<
        unsafe extern "C" fn(
            ent: *const edict_s,
            sendweapons: ::core::ffi::c_int,
            cd: *mut clientdata_s,
        ),
    >,
    pub pfnAddToFullPack: ::core::option::Option<
        unsafe extern "C" fn(
            state: *mut entity_state_s,
            e: ::core::ffi::c_int,
            ent: *mut edict_t,
            host: *mut edict_t,
            hostflags: ::core::ffi::c_int,
            player: ::core::ffi::c_int,
            pSet: *mut ::core::ffi::c_uchar,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnCreateBaseline: ::core::option::Option<
        unsafe extern "C" fn(
            player: ::core::ffi::c_int,
            eindex: ::core::ffi::c_int,
            baseline: *mut entity_state_s,
            entity: *mut edict_s,
            playermodelindex: ::core::ffi::c_int,
            player_mins: *mut vec3_t,
            player_maxs: *mut vec3_t,
        ),
    >,
    pub pfnRegisterEncoders: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnGetWeaponData: ::core::option::Option<
        unsafe extern "C" fn(player: *mut edict_s, info: *mut weapon_data_s) -> ::core::ffi::c_int,
    >,
    pub pfnCmdStart: ::core::option::Option<
        unsafe extern "C" fn(
            player: *const edict_t,
            cmd: *const usercmd_s,
            random_seed: ::core::ffi::c_uint,
        ),
    >,
    pub pfnCmdEnd: ::core::option::Option<unsafe extern "C" fn(player: *const edict_t)>,
    pub pfnConnectionlessPacket: ::core::option::Option<
        unsafe extern "C" fn(
            net_from: *const netadr_s,
            args: *const ::core::ffi::c_char,
            response_buffer: *mut ::core::ffi::c_char,
            response_buffer_size: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnGetHullBounds: ::core::option::Option<
        unsafe extern "C" fn(
            hullnumber: ::core::ffi::c_int,
            mins: *mut f32,
            maxs: *mut f32,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnCreateInstancedBaselines: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnInconsistentFile: ::core::option::Option<
        unsafe extern "C" fn(
            player: *const edict_s,
            filename: *const ::core::ffi::c_char,
            disconnect_message: *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnAllowLagCompensation:
        ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NEW_DLL_FUNCTIONS {
    pub pfnOnFreeEntPrivateData: ::core::option::Option<unsafe extern "C" fn(pEnt: *mut edict_t)>,
    pub pfnGameShutdown: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnShouldCollide: ::core::option::Option<
        unsafe extern "C" fn(
            pentTouched: *mut edict_t,
            pentOther: *mut edict_t,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnCvarValue: ::core::option::Option<
        unsafe extern "C" fn(pEnt: *const edict_t, value: *const ::core::ffi::c_char),
    >,
    pub pfnCvarValue2: ::core::option::Option<
        unsafe extern "C" fn(
            pEnt: *const edict_t,
            requestID: ::core::ffi::c_int,
            cvarName: *const ::core::ffi::c_char,
            value: *const ::core::ffi::c_char,
        ),
    >,
}
pub type NEW_DLL_FUNCTIONS_FN = ::core::option::Option<
    unsafe extern "C" fn(
        pFunctionTable: *mut NEW_DLL_FUNCTIONS,
        interfaceVersion: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int,
>;
pub type APIFUNCTION = ::core::option::Option<
    unsafe extern "C" fn(
        pFunctionTable: *mut DLL_FUNCTIONS,
        interfaceVersion: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int,
>;
pub type APIFUNCTION2 = ::core::option::Option<
    unsafe extern "C" fn(
        pFunctionTable: *mut DLL_FUNCTIONS,
        interfaceVersion: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int,
>;
pub const synctype_t_ST_SYNC: synctype_t = 0;
pub const synctype_t_ST_RAND: synctype_t = 1;
pub type synctype_t = ::core::ffi::c_uint;
pub const frametype_t_FRAME_SINGLE: frametype_t = 0;
pub const frametype_t_FRAME_GROUP: frametype_t = 1;
pub const frametype_t_FRAME_ANGLED: frametype_t = 2;
pub type frametype_t = ::core::ffi::c_uint;
pub const drawtype_t_SPR_NORMAL: drawtype_t = 0;
pub const drawtype_t_SPR_ADDITIVE: drawtype_t = 1;
pub const drawtype_t_SPR_INDEXALPHA: drawtype_t = 2;
pub const drawtype_t_SPR_ALPHTEST: drawtype_t = 3;
pub type drawtype_t = ::core::ffi::c_uint;
pub const angletype_t_SPR_FWD_PARALLEL_UPRIGHT: angletype_t = 0;
pub const angletype_t_SPR_FACING_UPRIGHT: angletype_t = 1;
pub const angletype_t_SPR_FWD_PARALLEL: angletype_t = 2;
pub const angletype_t_SPR_ORIENTED: angletype_t = 3;
pub const angletype_t_SPR_FWD_PARALLEL_ORIENTED: angletype_t = 4;
pub type angletype_t = ::core::ffi::c_uint;
pub const facetype_t_SPR_CULL_FRONT: facetype_t = 0;
pub const facetype_t_SPR_CULL_NONE: facetype_t = 1;
pub type facetype_t = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dsprite_t {
    pub ident: i32,
    pub version: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dsprite_q1_t {
    pub ident: i32,
    pub version: i32,
    pub type_: i32,
    pub boundingradius: f32,
    pub bounds: [i32; 2usize],
    pub numframes: i32,
    pub beamlength: f32,
    pub synctype: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dsprite_hl_t {
    pub ident: i32,
    pub version: i32,
    pub type_: u32,
    pub texFormat: u32,
    pub boundingradius: i32,
    pub bounds: [i32; 2usize],
    pub numframes: i32,
    pub facetype: u32,
    pub synctype: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dspriteframe_t {
    pub origin: [i32; 2usize],
    pub width: i32,
    pub height: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dspritegroup_t {
    pub numframes: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dspriteinterval_t {
    pub interval: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dframetype_t {
    pub type_: u32,
}
pub const pixformat_t_PF_UNKNOWN: pixformat_t = 0;
pub const pixformat_t_PF_INDEXED_24: pixformat_t = 1;
pub const pixformat_t_PF_INDEXED_32: pixformat_t = 2;
pub const pixformat_t_PF_RGBA_32: pixformat_t = 3;
pub const pixformat_t_PF_BGRA_32: pixformat_t = 4;
pub const pixformat_t_PF_RGB_24: pixformat_t = 5;
pub const pixformat_t_PF_BGR_24: pixformat_t = 6;
pub const pixformat_t_PF_LUMINANCE: pixformat_t = 7;
pub const pixformat_t_PF_DXT1: pixformat_t = 8;
pub const pixformat_t_PF_DXT3: pixformat_t = 9;
pub const pixformat_t_PF_DXT5: pixformat_t = 10;
pub const pixformat_t_PF_ATI2: pixformat_t = 11;
pub const pixformat_t_PF_BC4_SIGNED: pixformat_t = 12;
pub const pixformat_t_PF_BC4_UNSIGNED: pixformat_t = 13;
pub const pixformat_t_PF_BC5_SIGNED: pixformat_t = 14;
pub const pixformat_t_PF_BC5_UNSIGNED: pixformat_t = 15;
pub const pixformat_t_PF_BC6H_SIGNED: pixformat_t = 16;
pub const pixformat_t_PF_BC6H_UNSIGNED: pixformat_t = 17;
pub const pixformat_t_PF_BC7_UNORM: pixformat_t = 18;
pub const pixformat_t_PF_BC7_SRGB: pixformat_t = 19;
pub const pixformat_t_PF_KTX2_RAW: pixformat_t = 20;
pub const pixformat_t_PF_TOTALCOUNT: pixformat_t = 21;
pub type pixformat_t = ::core::ffi::c_uint;
#[repr(C)]
pub struct bpc_desc_s {
    pub format: ::core::ffi::c_int,
    pub name: [::core::ffi::c_char; 16usize],
    pub glFormat: uint,
    pub bpp: ::core::ffi::c_int,
}
pub type bpc_desc_t = bpc_desc_s;
pub const ilFlags_t_IL_USE_LERPING: ilFlags_t = 1;
pub const ilFlags_t_IL_KEEP_8BIT: ilFlags_t = 2;
pub const ilFlags_t_IL_ALLOW_OVERWRITE: ilFlags_t = 4;
pub const ilFlags_t_IL_DONTFLIP_TGA: ilFlags_t = 8;
pub const ilFlags_t_IL_DDS_HARDWARE: ilFlags_t = 16;
pub const ilFlags_t_IL_LOAD_DECAL: ilFlags_t = 32;
pub const ilFlags_t_IL_OVERVIEW: ilFlags_t = 64;
pub const ilFlags_t_IL_LOAD_PLAYER_DECAL: ilFlags_t = 128;
pub const ilFlags_t_IL_KTX2_RAW: ilFlags_t = 256;
pub type ilFlags_t = ::core::ffi::c_uint;
pub const imgFlags_t_IMAGE_CUBEMAP: imgFlags_t = 1;
pub const imgFlags_t_IMAGE_HAS_ALPHA: imgFlags_t = 2;
pub const imgFlags_t_IMAGE_HAS_COLOR: imgFlags_t = 4;
pub const imgFlags_t_IMAGE_COLORINDEX: imgFlags_t = 8;
pub const imgFlags_t_IMAGE_HAS_LUMA: imgFlags_t = 16;
pub const imgFlags_t_IMAGE_SKYBOX: imgFlags_t = 32;
pub const imgFlags_t_IMAGE_QUAKESKY: imgFlags_t = 64;
pub const imgFlags_t_IMAGE_DDS_FORMAT: imgFlags_t = 128;
pub const imgFlags_t_IMAGE_MULTILAYER: imgFlags_t = 256;
pub const imgFlags_t_IMAGE_ONEBIT_ALPHA: imgFlags_t = 512;
pub const imgFlags_t_IMAGE_QUAKEPAL: imgFlags_t = 1024;
pub const imgFlags_t_IMAGE_FLIP_X: imgFlags_t = 65536;
pub const imgFlags_t_IMAGE_FLIP_Y: imgFlags_t = 131072;
pub const imgFlags_t_IMAGE_ROT_90: imgFlags_t = 262144;
pub const imgFlags_t_IMAGE_ROT180: imgFlags_t = 196608;
pub const imgFlags_t_IMAGE_ROT270: imgFlags_t = 458752;
pub const imgFlags_t_IMAGE_RESAMPLE: imgFlags_t = 1048576;
pub const imgFlags_t_IMAGE_FORCE_RGBA: imgFlags_t = 8388608;
pub const imgFlags_t_IMAGE_MAKE_LUMA: imgFlags_t = 16777216;
pub const imgFlags_t_IMAGE_QUANTIZE: imgFlags_t = 33554432;
pub const imgFlags_t_IMAGE_LIGHTGAMMA: imgFlags_t = 67108864;
pub const imgFlags_t_IMAGE_REMAP: imgFlags_t = 134217728;
pub type imgFlags_t = ::core::ffi::c_uint;
#[repr(C)]
pub struct rgbdata_s {
    pub width: word,
    pub height: word,
    pub depth: word,
    pub type_: uint,
    pub flags: uint,
    pub encode: word,
    pub numMips: byte,
    pub palette: *mut byte,
    pub buffer: *mut byte,
    pub fogParams: rgba_t,
    pub size: usize,
}
pub type rgbdata_t = rgbdata_s;
pub const key_modifier_t_KeyModifier_None: key_modifier_t = 0;
pub const key_modifier_t_KeyModifier_LeftShift: key_modifier_t = 1;
pub const key_modifier_t_KeyModifier_RightShift: key_modifier_t = 2;
pub const key_modifier_t_KeyModifier_LeftCtrl: key_modifier_t = 4;
pub const key_modifier_t_KeyModifier_RightCtrl: key_modifier_t = 8;
pub const key_modifier_t_KeyModifier_LeftAlt: key_modifier_t = 16;
pub const key_modifier_t_KeyModifier_RightAlt: key_modifier_t = 32;
pub const key_modifier_t_KeyModifier_LeftSuper: key_modifier_t = 64;
pub const key_modifier_t_KeyModifier_RightSuper: key_modifier_t = 128;
pub const key_modifier_t_KeyModifier_NumLock: key_modifier_t = 256;
pub const key_modifier_t_KeyModifier_CapsLock: key_modifier_t = 512;
pub type key_modifier_t = ::core::ffi::c_uint;
pub const VGUI_DefaultCursor_dc_user: VGUI_DefaultCursor = 0;
pub const VGUI_DefaultCursor_dc_none: VGUI_DefaultCursor = 1;
pub const VGUI_DefaultCursor_dc_arrow: VGUI_DefaultCursor = 2;
pub const VGUI_DefaultCursor_dc_ibeam: VGUI_DefaultCursor = 3;
pub const VGUI_DefaultCursor_dc_hourglass: VGUI_DefaultCursor = 4;
pub const VGUI_DefaultCursor_dc_crosshair: VGUI_DefaultCursor = 5;
pub const VGUI_DefaultCursor_dc_up: VGUI_DefaultCursor = 6;
pub const VGUI_DefaultCursor_dc_sizenwse: VGUI_DefaultCursor = 7;
pub const VGUI_DefaultCursor_dc_sizenesw: VGUI_DefaultCursor = 8;
pub const VGUI_DefaultCursor_dc_sizewe: VGUI_DefaultCursor = 9;
pub const VGUI_DefaultCursor_dc_sizens: VGUI_DefaultCursor = 10;
pub const VGUI_DefaultCursor_dc_sizeall: VGUI_DefaultCursor = 11;
pub const VGUI_DefaultCursor_dc_no: VGUI_DefaultCursor = 12;
pub const VGUI_DefaultCursor_dc_hand: VGUI_DefaultCursor = 13;
pub const VGUI_DefaultCursor_dc_last: VGUI_DefaultCursor = 14;
pub type VGUI_DefaultCursor = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vpoint_t {
    pub point: vec2_t,
    pub coord: vec2_t,
}
pub const VGUI_MouseCode_MOUSE_LEFT: VGUI_MouseCode = 0;
pub const VGUI_MouseCode_MOUSE_RIGHT: VGUI_MouseCode = 1;
pub const VGUI_MouseCode_MOUSE_MIDDLE: VGUI_MouseCode = 2;
pub const VGUI_MouseCode_MOUSE_LAST: VGUI_MouseCode = 3;
pub type VGUI_MouseCode = ::core::ffi::c_uint;
pub const VGUI_KeyCode_KEY_0: VGUI_KeyCode = 0;
pub const VGUI_KeyCode_KEY_1: VGUI_KeyCode = 1;
pub const VGUI_KeyCode_KEY_2: VGUI_KeyCode = 2;
pub const VGUI_KeyCode_KEY_3: VGUI_KeyCode = 3;
pub const VGUI_KeyCode_KEY_4: VGUI_KeyCode = 4;
pub const VGUI_KeyCode_KEY_5: VGUI_KeyCode = 5;
pub const VGUI_KeyCode_KEY_6: VGUI_KeyCode = 6;
pub const VGUI_KeyCode_KEY_7: VGUI_KeyCode = 7;
pub const VGUI_KeyCode_KEY_8: VGUI_KeyCode = 8;
pub const VGUI_KeyCode_KEY_9: VGUI_KeyCode = 9;
pub const VGUI_KeyCode_KEY_A: VGUI_KeyCode = 10;
pub const VGUI_KeyCode_KEY_B: VGUI_KeyCode = 11;
pub const VGUI_KeyCode_KEY_C: VGUI_KeyCode = 12;
pub const VGUI_KeyCode_KEY_D: VGUI_KeyCode = 13;
pub const VGUI_KeyCode_KEY_E: VGUI_KeyCode = 14;
pub const VGUI_KeyCode_KEY_F: VGUI_KeyCode = 15;
pub const VGUI_KeyCode_KEY_G: VGUI_KeyCode = 16;
pub const VGUI_KeyCode_KEY_H: VGUI_KeyCode = 17;
pub const VGUI_KeyCode_KEY_I: VGUI_KeyCode = 18;
pub const VGUI_KeyCode_KEY_J: VGUI_KeyCode = 19;
pub const VGUI_KeyCode_KEY_K: VGUI_KeyCode = 20;
pub const VGUI_KeyCode_KEY_L: VGUI_KeyCode = 21;
pub const VGUI_KeyCode_KEY_M: VGUI_KeyCode = 22;
pub const VGUI_KeyCode_KEY_N: VGUI_KeyCode = 23;
pub const VGUI_KeyCode_KEY_O: VGUI_KeyCode = 24;
pub const VGUI_KeyCode_KEY_P: VGUI_KeyCode = 25;
pub const VGUI_KeyCode_KEY_Q: VGUI_KeyCode = 26;
pub const VGUI_KeyCode_KEY_R: VGUI_KeyCode = 27;
pub const VGUI_KeyCode_KEY_S: VGUI_KeyCode = 28;
pub const VGUI_KeyCode_KEY_T: VGUI_KeyCode = 29;
pub const VGUI_KeyCode_KEY_U: VGUI_KeyCode = 30;
pub const VGUI_KeyCode_KEY_V: VGUI_KeyCode = 31;
pub const VGUI_KeyCode_KEY_W: VGUI_KeyCode = 32;
pub const VGUI_KeyCode_KEY_X: VGUI_KeyCode = 33;
pub const VGUI_KeyCode_KEY_Y: VGUI_KeyCode = 34;
pub const VGUI_KeyCode_KEY_Z: VGUI_KeyCode = 35;
pub const VGUI_KeyCode_KEY_PAD_0: VGUI_KeyCode = 36;
pub const VGUI_KeyCode_KEY_PAD_1: VGUI_KeyCode = 37;
pub const VGUI_KeyCode_KEY_PAD_2: VGUI_KeyCode = 38;
pub const VGUI_KeyCode_KEY_PAD_3: VGUI_KeyCode = 39;
pub const VGUI_KeyCode_KEY_PAD_4: VGUI_KeyCode = 40;
pub const VGUI_KeyCode_KEY_PAD_5: VGUI_KeyCode = 41;
pub const VGUI_KeyCode_KEY_PAD_6: VGUI_KeyCode = 42;
pub const VGUI_KeyCode_KEY_PAD_7: VGUI_KeyCode = 43;
pub const VGUI_KeyCode_KEY_PAD_8: VGUI_KeyCode = 44;
pub const VGUI_KeyCode_KEY_PAD_9: VGUI_KeyCode = 45;
pub const VGUI_KeyCode_KEY_PAD_DIVIDE: VGUI_KeyCode = 46;
pub const VGUI_KeyCode_KEY_PAD_MULTIPLY: VGUI_KeyCode = 47;
pub const VGUI_KeyCode_KEY_PAD_MINUS: VGUI_KeyCode = 48;
pub const VGUI_KeyCode_KEY_PAD_PLUS: VGUI_KeyCode = 49;
pub const VGUI_KeyCode_KEY_PAD_ENTER: VGUI_KeyCode = 50;
pub const VGUI_KeyCode_KEY_PAD_DECIMAL: VGUI_KeyCode = 51;
pub const VGUI_KeyCode_KEY_LBRACKET: VGUI_KeyCode = 52;
pub const VGUI_KeyCode_KEY_RBRACKET: VGUI_KeyCode = 53;
pub const VGUI_KeyCode_KEY_SEMICOLON: VGUI_KeyCode = 54;
pub const VGUI_KeyCode_KEY_APOSTROPHE: VGUI_KeyCode = 55;
pub const VGUI_KeyCode_KEY_BACKQUOTE: VGUI_KeyCode = 56;
pub const VGUI_KeyCode_KEY_COMMA: VGUI_KeyCode = 57;
pub const VGUI_KeyCode_KEY_PERIOD: VGUI_KeyCode = 58;
pub const VGUI_KeyCode_KEY_SLASH: VGUI_KeyCode = 59;
pub const VGUI_KeyCode_KEY_BACKSLASH: VGUI_KeyCode = 60;
pub const VGUI_KeyCode_KEY_MINUS: VGUI_KeyCode = 61;
pub const VGUI_KeyCode_KEY_EQUAL: VGUI_KeyCode = 62;
pub const VGUI_KeyCode_KEY_ENTER: VGUI_KeyCode = 63;
pub const VGUI_KeyCode_KEY_SPACE: VGUI_KeyCode = 64;
pub const VGUI_KeyCode_KEY_BACKSPACE: VGUI_KeyCode = 65;
pub const VGUI_KeyCode_KEY_TAB: VGUI_KeyCode = 66;
pub const VGUI_KeyCode_KEY_CAPSLOCK: VGUI_KeyCode = 67;
pub const VGUI_KeyCode_KEY_NUMLOCK: VGUI_KeyCode = 68;
pub const VGUI_KeyCode_KEY_ESCAPE: VGUI_KeyCode = 69;
pub const VGUI_KeyCode_KEY_SCROLLLOCK: VGUI_KeyCode = 70;
pub const VGUI_KeyCode_KEY_INSERT: VGUI_KeyCode = 71;
pub const VGUI_KeyCode_KEY_DELETE: VGUI_KeyCode = 72;
pub const VGUI_KeyCode_KEY_HOME: VGUI_KeyCode = 73;
pub const VGUI_KeyCode_KEY_END: VGUI_KeyCode = 74;
pub const VGUI_KeyCode_KEY_PAGEUP: VGUI_KeyCode = 75;
pub const VGUI_KeyCode_KEY_PAGEDOWN: VGUI_KeyCode = 76;
pub const VGUI_KeyCode_KEY_BREAK: VGUI_KeyCode = 77;
pub const VGUI_KeyCode_KEY_LSHIFT: VGUI_KeyCode = 78;
pub const VGUI_KeyCode_KEY_RSHIFT: VGUI_KeyCode = 79;
pub const VGUI_KeyCode_KEY_LALT: VGUI_KeyCode = 80;
pub const VGUI_KeyCode_KEY_RALT: VGUI_KeyCode = 81;
pub const VGUI_KeyCode_KEY_LCONTROL: VGUI_KeyCode = 82;
pub const VGUI_KeyCode_KEY_RCONTROL: VGUI_KeyCode = 83;
pub const VGUI_KeyCode_KEY_LWIN: VGUI_KeyCode = 84;
pub const VGUI_KeyCode_KEY_RWIN: VGUI_KeyCode = 85;
pub const VGUI_KeyCode_KEY_APP: VGUI_KeyCode = 86;
pub const VGUI_KeyCode_KEY_UP: VGUI_KeyCode = 87;
pub const VGUI_KeyCode_KEY_LEFT: VGUI_KeyCode = 88;
pub const VGUI_KeyCode_KEY_DOWN: VGUI_KeyCode = 89;
pub const VGUI_KeyCode_KEY_RIGHT: VGUI_KeyCode = 90;
pub const VGUI_KeyCode_KEY_F1: VGUI_KeyCode = 91;
pub const VGUI_KeyCode_KEY_F2: VGUI_KeyCode = 92;
pub const VGUI_KeyCode_KEY_F3: VGUI_KeyCode = 93;
pub const VGUI_KeyCode_KEY_F4: VGUI_KeyCode = 94;
pub const VGUI_KeyCode_KEY_F5: VGUI_KeyCode = 95;
pub const VGUI_KeyCode_KEY_F6: VGUI_KeyCode = 96;
pub const VGUI_KeyCode_KEY_F7: VGUI_KeyCode = 97;
pub const VGUI_KeyCode_KEY_F8: VGUI_KeyCode = 98;
pub const VGUI_KeyCode_KEY_F9: VGUI_KeyCode = 99;
pub const VGUI_KeyCode_KEY_F10: VGUI_KeyCode = 100;
pub const VGUI_KeyCode_KEY_F11: VGUI_KeyCode = 101;
pub const VGUI_KeyCode_KEY_F12: VGUI_KeyCode = 102;
pub const VGUI_KeyCode_KEY_LAST: VGUI_KeyCode = 103;
pub type VGUI_KeyCode = ::core::ffi::c_uint;
pub const VGUI_KeyAction_KA_TYPED: VGUI_KeyAction = 0;
pub const VGUI_KeyAction_KA_PRESSED: VGUI_KeyAction = 1;
pub const VGUI_KeyAction_KA_RELEASED: VGUI_KeyAction = 2;
pub type VGUI_KeyAction = ::core::ffi::c_uint;
pub const VGUI_MouseAction_MA_PRESSED: VGUI_MouseAction = 0;
pub const VGUI_MouseAction_MA_RELEASED: VGUI_MouseAction = 1;
pub const VGUI_MouseAction_MA_DOUBLE: VGUI_MouseAction = 2;
pub const VGUI_MouseAction_MA_WHEEL: VGUI_MouseAction = 3;
pub type VGUI_MouseAction = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vguiapi_s {
    pub initialized: qboolean,
    pub DrawInit: ::core::option::Option<unsafe extern "C" fn()>,
    pub DrawShutdown: ::core::option::Option<unsafe extern "C" fn()>,
    pub SetupDrawingText:
        ::core::option::Option<unsafe extern "C" fn(pColor: *mut ::core::ffi::c_int)>,
    pub SetupDrawingRect:
        ::core::option::Option<unsafe extern "C" fn(pColor: *mut ::core::ffi::c_int)>,
    pub SetupDrawingImage:
        ::core::option::Option<unsafe extern "C" fn(pColor: *mut ::core::ffi::c_int)>,
    pub BindTexture: ::core::option::Option<unsafe extern "C" fn(id: ::core::ffi::c_int)>,
    pub EnableTexture: ::core::option::Option<unsafe extern "C" fn(enable: qboolean)>,
    pub Reserved0: ::core::option::Option<
        unsafe extern "C" fn(
            id: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
        ),
    >,
    pub UploadTexture: ::core::option::Option<
        unsafe extern "C" fn(
            id: ::core::ffi::c_int,
            buffer: *const ::core::ffi::c_char,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
        ),
    >,
    pub Reserved1: ::core::option::Option<
        unsafe extern "C" fn(
            id: ::core::ffi::c_int,
            drawX: ::core::ffi::c_int,
            drawY: ::core::ffi::c_int,
            rgba: *const byte,
            blockWidth: ::core::ffi::c_int,
            blockHeight: ::core::ffi::c_int,
        ),
    >,
    pub DrawQuad:
        ::core::option::Option<unsafe extern "C" fn(ul: *const vpoint_t, lr: *const vpoint_t)>,
    pub GetTextureSizes: ::core::option::Option<
        unsafe extern "C" fn(width: *mut ::core::ffi::c_int, height: *mut ::core::ffi::c_int),
    >,
    pub GenerateTexture: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub EngineMalloc:
        ::core::option::Option<unsafe extern "C" fn(size: usize) -> *mut ::core::ffi::c_void>,
    pub CursorSelect: ::core::option::Option<unsafe extern "C" fn(cursor: VGUI_DefaultCursor)>,
    pub GetColor: ::core::option::Option<
        unsafe extern "C" fn(i: ::core::ffi::c_int, j: ::core::ffi::c_int) -> byte,
    >,
    pub IsInGame: ::core::option::Option<unsafe extern "C" fn() -> qboolean>,
    pub EnableTextInput:
        ::core::option::Option<unsafe extern "C" fn(enable: qboolean, force: qboolean)>,
    pub GetCursorPos: ::core::option::Option<
        unsafe extern "C" fn(x: *mut ::core::ffi::c_int, y: *mut ::core::ffi::c_int),
    >,
    pub ProcessUtfChar:
        ::core::option::Option<unsafe extern "C" fn(ch: ::core::ffi::c_int) -> ::core::ffi::c_int>,
    pub GetClipboardText: ::core::option::Option<
        unsafe extern "C" fn(
            buffer: *mut ::core::ffi::c_char,
            bufferSize: usize,
        ) -> ::core::ffi::c_int,
    >,
    pub SetClipboardText:
        ::core::option::Option<unsafe extern "C" fn(text: *const ::core::ffi::c_char)>,
    pub GetKeyModifiers: ::core::option::Option<unsafe extern "C" fn() -> key_modifier_t>,
    pub Startup: ::core::option::Option<
        unsafe extern "C" fn(width: ::core::ffi::c_int, height: ::core::ffi::c_int),
    >,
    pub Shutdown: ::core::option::Option<unsafe extern "C" fn()>,
    pub GetPanel: ::core::option::Option<unsafe extern "C" fn() -> *mut ::core::ffi::c_void>,
    pub Paint: ::core::option::Option<unsafe extern "C" fn()>,
    pub Mouse: ::core::option::Option<
        unsafe extern "C" fn(action: VGUI_MouseAction, code: ::core::ffi::c_int),
    >,
    pub Key:
        ::core::option::Option<unsafe extern "C" fn(action: VGUI_KeyAction, code: VGUI_KeyCode)>,
    pub MouseMove:
        ::core::option::Option<unsafe extern "C" fn(x: ::core::ffi::c_int, y: ::core::ffi::c_int)>,
    pub TextInput: ::core::option::Option<unsafe extern "C" fn(text: *const ::core::ffi::c_char)>,
}
pub type vguiapi_t = vguiapi_s;
pub const TRICULLSTYLE_TRI_FRONT: TRICULLSTYLE = 0;
pub const TRICULLSTYLE_TRI_NONE: TRICULLSTYLE = 1;
pub type TRICULLSTYLE = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct triangleapi_s {
    pub version: ::core::ffi::c_int,
    pub RenderMode: ::core::option::Option<unsafe extern "C" fn(mode: ::core::ffi::c_int)>,
    pub Begin: ::core::option::Option<unsafe extern "C" fn(primitiveCode: ::core::ffi::c_int)>,
    pub End: ::core::option::Option<unsafe extern "C" fn()>,
    pub Color4f: ::core::option::Option<unsafe extern "C" fn(r: f32, g: f32, b: f32, a: f32)>,
    pub Color4ub: ::core::option::Option<
        unsafe extern "C" fn(
            r: ::core::ffi::c_uchar,
            g: ::core::ffi::c_uchar,
            b: ::core::ffi::c_uchar,
            a: ::core::ffi::c_uchar,
        ),
    >,
    pub TexCoord2f: ::core::option::Option<unsafe extern "C" fn(u: f32, v: f32)>,
    pub Vertex3fv: ::core::option::Option<unsafe extern "C" fn(worldPnt: *const f32)>,
    pub Vertex3f: ::core::option::Option<unsafe extern "C" fn(x: f32, y: f32, z: f32)>,
    pub Brightness: ::core::option::Option<unsafe extern "C" fn(brightness: f32)>,
    pub CullFace: ::core::option::Option<unsafe extern "C" fn(style: TRICULLSTYLE)>,
    pub SpriteTexture: ::core::option::Option<
        unsafe extern "C" fn(
            pSpriteModel: *mut model_s,
            frame: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub WorldToScreen: ::core::option::Option<
        unsafe extern "C" fn(world: *const f32, screen: *mut f32) -> ::core::ffi::c_int,
    >,
    pub Fog: ::core::option::Option<
        unsafe extern "C" fn(
            flFogColor: *mut [f32; 3usize],
            flStart: f32,
            flEnd: f32,
            bOn: ::core::ffi::c_int,
        ),
    >,
    pub ScreenToWorld:
        ::core::option::Option<unsafe extern "C" fn(screen: *const f32, world: *mut f32)>,
    pub GetMatrix:
        ::core::option::Option<unsafe extern "C" fn(pname: ::core::ffi::c_int, matrix: *mut f32)>,
    pub BoxInPVS: ::core::option::Option<
        unsafe extern "C" fn(mins: *mut f32, maxs: *mut f32) -> ::core::ffi::c_int,
    >,
    pub LightAtPoint: ::core::option::Option<unsafe extern "C" fn(pos: *mut f32, value: *mut f32)>,
    pub Color4fRendermode: ::core::option::Option<
        unsafe extern "C" fn(r: f32, g: f32, b: f32, a: f32, rendermode: ::core::ffi::c_int),
    >,
    pub FogParams: ::core::option::Option<
        unsafe extern "C" fn(flDensity: f32, iFogSkybox: ::core::ffi::c_int),
    >,
}
pub type triangleapi_t = triangleapi_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct studiohdr_s {
    pub ident: i32,
    pub version: i32,
    pub name: [::core::ffi::c_char; 64usize],
    pub length: i32,
    pub eyeposition: vec3_t,
    pub min: vec3_t,
    pub max: vec3_t,
    pub bbmin: vec3_t,
    pub bbmax: vec3_t,
    pub flags: i32,
    pub numbones: i32,
    pub boneindex: i32,
    pub numbonecontrollers: i32,
    pub bonecontrollerindex: i32,
    pub numhitboxes: i32,
    pub hitboxindex: i32,
    pub numseq: i32,
    pub seqindex: i32,
    pub numseqgroups: i32,
    pub seqgroupindex: i32,
    pub numtextures: i32,
    pub textureindex: i32,
    pub texturedataindex: i32,
    pub numskinref: i32,
    pub numskinfamilies: i32,
    pub skinindex: i32,
    pub numbodyparts: i32,
    pub bodypartindex: i32,
    pub numattachments: i32,
    pub attachmentindex: i32,
    pub studiohdr2index: i32,
    pub unused: i32,
    pub unused2: i32,
    pub unused3: i32,
    pub numtransitions: i32,
    pub transitionindex: i32,
}
pub type studiohdr_t = studiohdr_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct studiohdr2_t {
    pub numposeparameters: i32,
    pub poseparamindex: i32,
    pub numikautoplaylocks: i32,
    pub ikautoplaylockindex: i32,
    pub numikchains: i32,
    pub ikchainindex: i32,
    pub keyvalueindex: i32,
    pub keyvaluesize: i32,
    pub numhitboxsets: i32,
    pub hitboxsetindex: i32,
    pub unused: [i32; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct studioseqhdr_t {
    pub id: i32,
    pub version: i32,
    pub name: [::core::ffi::c_char; 64usize],
    pub length: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudiobone_s {
    pub name: [::core::ffi::c_char; 32usize],
    pub parent: i32,
    pub unused: i32,
    pub bonecontroller: [i32; 6usize],
    pub value: [vec_t; 6usize],
    pub scale: [vec_t; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudioaxisinterpbone_t {
    pub control: i32,
    pub axis: i32,
    pub pos: [vec3_t; 6usize],
    pub quat: [vec4_t; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudioquatinterpinfo_t {
    pub inv_tolerance: vec_t,
    pub trigger: vec4_t,
    pub pos: vec3_t,
    pub quat: vec4_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudioquatinterpbone_t {
    pub control: i32,
    pub numtriggers: i32,
    pub triggerindex: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudioboneinfo_t {
    pub poseToBone: [[vec_t; 4usize]; 3usize],
    pub qAlignment: vec4_t,
    pub proctype: i32,
    pub procindex: i32,
    pub quat: vec4_t,
    pub reserved: [i32; 10usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudiojigglebone_t {
    pub flags: i32,
    pub length: vec_t,
    pub tipMass: vec_t,
    pub yawStiffness: vec_t,
    pub yawDamping: vec_t,
    pub pitchStiffness: vec_t,
    pub pitchDamping: vec_t,
    pub alongStiffness: vec_t,
    pub alongDamping: vec_t,
    pub angleLimit: vec_t,
    pub minYaw: vec_t,
    pub maxYaw: vec_t,
    pub yawFriction: vec_t,
    pub yawBounce: vec_t,
    pub minPitch: vec_t,
    pub maxPitch: vec_t,
    pub pitchFriction: vec_t,
    pub pitchBounce: vec_t,
    pub baseMass: vec_t,
    pub baseStiffness: vec_t,
    pub baseDamping: vec_t,
    pub baseMinLeft: vec_t,
    pub baseMaxLeft: vec_t,
    pub baseLeftFriction: vec_t,
    pub baseMinUp: vec_t,
    pub baseMaxUp: vec_t,
    pub baseUpFriction: vec_t,
    pub baseMinForward: vec_t,
    pub baseMaxForward: vec_t,
    pub baseForwardFriction: vec_t,
    pub boingImpactSpeed: vec_t,
    pub boingImpactAngle: vec_t,
    pub boingDampingRate: vec_t,
    pub boingFrequency: vec_t,
    pub boingAmplitude: vec_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudioaimatbone_t {
    pub parent: i32,
    pub aim: i32,
    pub aimvector: vec3_t,
    pub upvector: vec3_t,
    pub basepos: vec3_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudiobonecontroller_t {
    pub bone: i32,
    pub type_: i32,
    pub start: vec_t,
    pub end: vec_t,
    pub unused: i32,
    pub index: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudiobbox_t {
    pub bone: i32,
    pub group: i32,
    pub bbmin: vec3_t,
    pub bbmax: vec3_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudiohitboxset_t {
    pub name: [::core::ffi::c_char; 32usize],
    pub numhitboxes: i32,
    pub hitboxindex: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudioseqgroup_t {
    pub label: [::core::ffi::c_char; 32usize],
    pub name: [::core::ffi::c_char; 64usize],
    pub unused: i32,
    pub unused2: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudioevent_s {
    pub frame: i32,
    pub event: i32,
    pub unused: i32,
    pub options: [::core::ffi::c_char; 64usize],
}
pub type mstudioevent_t = mstudioevent_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudioattachment_t {
    pub unused: [::core::ffi::c_char; 32usize],
    pub flags: i32,
    pub bone: i32,
    pub org: vec3_t,
    pub vectors: [vec3_t; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudioikerror_t {
    pub scale: [vec_t; 6usize],
    pub offset: [u16; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudioikrule_t {
    pub index: i32,
    pub type_: i32,
    pub chain: i32,
    pub bone: i32,
    pub attachment: i32,
    pub slot: i32,
    pub height: vec_t,
    pub radius: vec_t,
    pub floor: vec_t,
    pub pos: vec3_t,
    pub quat: vec4_t,
    pub ikerrorindex: i32,
    pub iStart: i32,
    pub start: vec_t,
    pub peak: vec_t,
    pub tail: vec_t,
    pub end: vec_t,
    pub contact: vec_t,
    pub drop: vec_t,
    pub top: vec_t,
    pub unused: [i32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudioiklock_t {
    pub chain: i32,
    pub flPosWeight: vec_t,
    pub flLocalQWeight: vec_t,
    pub flags: i32,
    pub unused: [i32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudiomovement_t {
    pub endframe: i32,
    pub motionflags: i32,
    pub v0: vec_t,
    pub v1: vec_t,
    pub angle: vec_t,
    pub vector: vec3_t,
    pub position: vec3_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudioanimdesc_t {
    pub label: [::core::ffi::c_char; 32usize],
    pub fps: vec_t,
    pub flags: i32,
    pub numframes: i32,
    pub nummovements: i32,
    pub movementindex: i32,
    pub numikrules: i32,
    pub ikruleindex: i32,
    pub unused: [i32; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudioautolayer_t {
    pub iSequence: i16,
    pub iPose: i16,
    pub flags: i32,
    pub start: vec_t,
    pub peak: vec_t,
    pub tail: vec_t,
    pub end: vec_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudioseqdesc_s {
    pub label: [::core::ffi::c_char; 32usize],
    pub fps: vec_t,
    pub flags: i32,
    pub activity: i32,
    pub actweight: i32,
    pub numevents: i32,
    pub eventindex: i32,
    pub numframes: i32,
    pub weightlistindex: i32,
    pub iklockindex: i32,
    pub motiontype: i32,
    pub motionbone: i32,
    pub linearmovement: vec3_t,
    pub autolayerindex: i32,
    pub keyvalueindex: i32,
    pub bbmin: vec3_t,
    pub bbmax: vec3_t,
    pub numblends: i32,
    pub animindex: i32,
    pub blendtype: [i32; 2usize],
    pub blendstart: [vec_t; 2usize],
    pub blendend: [vec_t; 2usize],
    pub groupsize: [u8; 2usize],
    pub numautolayers: u8,
    pub numiklocks: u8,
    pub seqgroup: i32,
    pub entrynode: i32,
    pub exitnode: i32,
    pub nodeflags: u8,
    pub cycleposeindex: u8,
    pub fadeintime: u8,
    pub fadeouttime: u8,
    pub animdescindex: i32,
}
pub type mstudioseqdesc_t = mstudioseqdesc_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudioposeparamdesc_t {
    pub name: [::core::ffi::c_char; 32usize],
    pub flags: i32,
    pub start: vec_t,
    pub end: vec_t,
    pub loop_: vec_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudioanim_s {
    pub offset: [u16; 6usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mstudioanimvalue_t {
    pub num: mstudioanimvalue_t__bindgen_ty_1,
    pub value: i16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudioanimvalue_t__bindgen_ty_1 {
    pub valid: u8,
    pub total: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudiobodyparts_t {
    pub name: [::core::ffi::c_char; 64usize],
    pub nummodels: i32,
    pub base: i32,
    pub modelindex: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudiotex_s {
    pub name: [::core::ffi::c_char; 64usize],
    pub flags: u32,
    pub width: i32,
    pub height: i32,
    pub index: i32,
}
pub type mstudiotexture_t = mstudiotex_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudioiklink_t {
    pub bone: i32,
    pub kneeDir: vec3_t,
    pub unused0: vec3_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudioikchain_t {
    pub name: [::core::ffi::c_char; 32usize],
    pub linktype: i32,
    pub numlinks: i32,
    pub linkindex: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudioboneweight_t {
    pub weight: [u8; 4usize],
    pub bone: [i8; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudiomodel_t {
    pub name: [::core::ffi::c_char; 64usize],
    pub unused: i32,
    pub unused2: vec_t,
    pub nummesh: i32,
    pub meshindex: i32,
    pub numverts: i32,
    pub vertinfoindex: i32,
    pub vertindex: i32,
    pub numnorms: i32,
    pub norminfoindex: i32,
    pub normindex: i32,
    pub blendvertinfoindex: i32,
    pub blendnorminfoindex: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudiomesh_t {
    pub numtris: i32,
    pub triindex: i32,
    pub skinref: i32,
    pub numnorms: i32,
    pub unused: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudiotrivert_t {
    pub vertindex: i16,
    pub normindex: i16,
    pub s: i16,
    pub t: i16,
}
pub const ptype_t_pt_static: ptype_t = 0;
pub const ptype_t_pt_grav: ptype_t = 1;
pub const ptype_t_pt_slowgrav: ptype_t = 2;
pub const ptype_t_pt_fire: ptype_t = 3;
pub const ptype_t_pt_explode: ptype_t = 4;
pub const ptype_t_pt_explode2: ptype_t = 5;
pub const ptype_t_pt_blob: ptype_t = 6;
pub const ptype_t_pt_blob2: ptype_t = 7;
pub const ptype_t_pt_vox_slowgrav: ptype_t = 8;
pub const ptype_t_pt_vox_grav: ptype_t = 9;
pub const ptype_t_pt_clientcustom: ptype_t = 10;
pub type ptype_t = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct particle_s {
    pub org: vec3_t,
    pub color: ::core::ffi::c_short,
    pub packedColor: ::core::ffi::c_short,
    pub next: *mut particle_s,
    pub vel: vec3_t,
    pub ramp: f32,
    pub die: f32,
    pub type_: ptype_t,
    pub deathfunc: ::core::option::Option<unsafe extern "C" fn(particle: *mut particle_s)>,
    pub callback:
        ::core::option::Option<unsafe extern "C" fn(particle: *mut particle_s, frametime: f32)>,
    pub context: ::core::ffi::c_uchar,
}
pub type particle_t = particle_s;
pub type BEAM = beam_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct beam_s {
    pub next: *mut BEAM,
    pub type_: ::core::ffi::c_int,
    pub flags: ::core::ffi::c_int,
    pub source: vec3_t,
    pub target: vec3_t,
    pub delta: vec3_t,
    pub t: f32,
    pub freq: f32,
    pub die: f32,
    pub width: f32,
    pub amplitude: f32,
    pub r: f32,
    pub g: f32,
    pub b: f32,
    pub brightness: f32,
    pub speed: f32,
    pub frameRate: f32,
    pub frame: f32,
    pub segments: ::core::ffi::c_int,
    pub startEntity: ::core::ffi::c_int,
    pub endEntity: ::core::ffi::c_int,
    pub modelIndex: ::core::ffi::c_int,
    pub frameCount: ::core::ffi::c_int,
    pub pFollowModel: *mut model_s,
    pub particles: *mut particle_s,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tempent_s {
    pub flags: ::core::ffi::c_int,
    pub die: f32,
    pub frameMax: f32,
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub fadeSpeed: f32,
    pub bounceFactor: f32,
    pub hitSound: ::core::ffi::c_int,
    pub hitcallback:
        ::core::option::Option<unsafe extern "C" fn(ent: *mut tempent_s, ptr: *mut pmtrace_s)>,
    pub callback: ::core::option::Option<
        unsafe extern "C" fn(ent: *mut tempent_s, frametime: f32, currenttime: f32),
    >,
    pub next: *mut tempent_s,
    pub priority: ::core::ffi::c_int,
    pub clientIndex: ::core::ffi::c_short,
    pub tentOffset: vec3_t,
    pub entity: cl_entity_t,
}
pub type TEMPENTITY = tempent_s;
pub type efx_api_t = efx_api_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct efx_api_s {
    pub R_AllocParticle: ::core::option::Option<
        unsafe extern "C" fn(
            callback: ::core::option::Option<
                unsafe extern "C" fn(particle: *mut particle_s, frametime: f32),
            >,
        ) -> *mut particle_t,
    >,
    pub R_BlobExplosion: ::core::option::Option<unsafe extern "C" fn(org: *const f32)>,
    pub R_Blood: ::core::option::Option<
        unsafe extern "C" fn(
            org: *const f32,
            dir: *const f32,
            pcolor: ::core::ffi::c_int,
            speed: ::core::ffi::c_int,
        ),
    >,
    pub R_BloodSprite: ::core::option::Option<
        unsafe extern "C" fn(
            org: *const f32,
            colorindex: ::core::ffi::c_int,
            modelIndex: ::core::ffi::c_int,
            modelIndex2: ::core::ffi::c_int,
            size: f32,
        ),
    >,
    pub R_BloodStream: ::core::option::Option<
        unsafe extern "C" fn(
            org: *const f32,
            dir: *const f32,
            pcolor: ::core::ffi::c_int,
            speed: ::core::ffi::c_int,
        ),
    >,
    pub R_BreakModel: ::core::option::Option<
        unsafe extern "C" fn(
            pos: *const f32,
            size: *const f32,
            dir: *const f32,
            random: f32,
            life: f32,
            count: ::core::ffi::c_int,
            modelIndex: ::core::ffi::c_int,
            flags: ::core::ffi::c_char,
        ),
    >,
    pub R_Bubbles: ::core::option::Option<
        unsafe extern "C" fn(
            mins: *const f32,
            maxs: *const f32,
            height: f32,
            modelIndex: ::core::ffi::c_int,
            count: ::core::ffi::c_int,
            speed: f32,
        ),
    >,
    pub R_BubbleTrail: ::core::option::Option<
        unsafe extern "C" fn(
            start: *const f32,
            end: *const f32,
            height: f32,
            modelIndex: ::core::ffi::c_int,
            count: ::core::ffi::c_int,
            speed: f32,
        ),
    >,
    pub R_BulletImpactParticles: ::core::option::Option<unsafe extern "C" fn(pos: *const f32)>,
    pub R_EntityParticles: ::core::option::Option<unsafe extern "C" fn(ent: *mut cl_entity_s)>,
    pub R_Explosion: ::core::option::Option<
        unsafe extern "C" fn(
            pos: *mut f32,
            model: ::core::ffi::c_int,
            scale: f32,
            framerate: f32,
            flags: ::core::ffi::c_int,
        ),
    >,
    pub R_FizzEffect: ::core::option::Option<
        unsafe extern "C" fn(
            pent: *mut cl_entity_s,
            modelIndex: ::core::ffi::c_int,
            density: ::core::ffi::c_int,
        ),
    >,
    pub R_FireField: ::core::option::Option<
        unsafe extern "C" fn(
            org: *mut f32,
            radius: ::core::ffi::c_int,
            modelIndex: ::core::ffi::c_int,
            count: ::core::ffi::c_int,
            flags: ::core::ffi::c_int,
            life: f32,
        ),
    >,
    pub R_FlickerParticles: ::core::option::Option<unsafe extern "C" fn(org: *const f32)>,
    pub R_FunnelSprite: ::core::option::Option<
        unsafe extern "C" fn(
            org: *const f32,
            modelIndex: ::core::ffi::c_int,
            reverse: ::core::ffi::c_int,
        ),
    >,
    pub R_Implosion: ::core::option::Option<
        unsafe extern "C" fn(end: *const f32, radius: f32, count: ::core::ffi::c_int, life: f32),
    >,
    pub R_LargeFunnel:
        ::core::option::Option<unsafe extern "C" fn(org: *const f32, reverse: ::core::ffi::c_int)>,
    pub R_LavaSplash: ::core::option::Option<unsafe extern "C" fn(org: *const f32)>,
    pub R_MultiGunshot: ::core::option::Option<
        unsafe extern "C" fn(
            org: *const f32,
            dir: *const f32,
            noise: *const f32,
            count: ::core::ffi::c_int,
            decalCount: ::core::ffi::c_int,
            decalIndices: *mut ::core::ffi::c_int,
        ),
    >,
    pub R_MuzzleFlash:
        ::core::option::Option<unsafe extern "C" fn(pos1: *const f32, type_: ::core::ffi::c_int)>,
    pub R_ParticleBox: ::core::option::Option<
        unsafe extern "C" fn(
            mins: *const f32,
            maxs: *const f32,
            r: ::core::ffi::c_uchar,
            g: ::core::ffi::c_uchar,
            b: ::core::ffi::c_uchar,
            life: f32,
        ),
    >,
    pub R_ParticleBurst: ::core::option::Option<
        unsafe extern "C" fn(
            pos: *const f32,
            size: ::core::ffi::c_int,
            color: ::core::ffi::c_int,
            life: f32,
        ),
    >,
    pub R_ParticleExplosion: ::core::option::Option<unsafe extern "C" fn(org: *const f32)>,
    pub R_ParticleExplosion2: ::core::option::Option<
        unsafe extern "C" fn(
            org: *const f32,
            colorStart: ::core::ffi::c_int,
            colorLength: ::core::ffi::c_int,
        ),
    >,
    pub R_ParticleLine: ::core::option::Option<
        unsafe extern "C" fn(
            start: *const f32,
            end: *const f32,
            r: ::core::ffi::c_uchar,
            g: ::core::ffi::c_uchar,
            b: ::core::ffi::c_uchar,
            life: f32,
        ),
    >,
    pub R_PlayerSprites: ::core::option::Option<
        unsafe extern "C" fn(
            client: ::core::ffi::c_int,
            modelIndex: ::core::ffi::c_int,
            count: ::core::ffi::c_int,
            size: ::core::ffi::c_int,
        ),
    >,
    pub R_Projectile: ::core::option::Option<
        unsafe extern "C" fn(
            origin: *const f32,
            velocity: *const f32,
            modelIndex: ::core::ffi::c_int,
            life: ::core::ffi::c_int,
            owner: ::core::ffi::c_int,
            hitcallback: ::core::option::Option<
                unsafe extern "C" fn(ent: *mut tempent_s, ptr: *mut pmtrace_s),
            >,
        ),
    >,
    pub R_RicochetSound: ::core::option::Option<unsafe extern "C" fn(pos: *const f32)>,
    pub R_RicochetSprite: ::core::option::Option<
        unsafe extern "C" fn(pos: *const f32, pmodel: *mut model_s, duration: f32, scale: f32),
    >,
    pub R_RocketFlare: ::core::option::Option<unsafe extern "C" fn(pos: *const f32)>,
    pub R_RocketTrail: ::core::option::Option<
        unsafe extern "C" fn(start: *mut f32, end: *mut f32, type_: ::core::ffi::c_int),
    >,
    pub R_RunParticleEffect: ::core::option::Option<
        unsafe extern "C" fn(
            org: *const f32,
            dir: *const f32,
            color: ::core::ffi::c_int,
            count: ::core::ffi::c_int,
        ),
    >,
    pub R_ShowLine:
        ::core::option::Option<unsafe extern "C" fn(start: *const f32, end: *const f32)>,
    pub R_SparkEffect: ::core::option::Option<
        unsafe extern "C" fn(
            pos: *const f32,
            count: ::core::ffi::c_int,
            velocityMin: ::core::ffi::c_int,
            velocityMax: ::core::ffi::c_int,
        ),
    >,
    pub R_SparkShower: ::core::option::Option<unsafe extern "C" fn(pos: *const f32)>,
    pub R_SparkStreaks: ::core::option::Option<
        unsafe extern "C" fn(
            pos: *const f32,
            count: ::core::ffi::c_int,
            velocityMin: ::core::ffi::c_int,
            velocityMax: ::core::ffi::c_int,
        ),
    >,
    pub R_Spray: ::core::option::Option<
        unsafe extern "C" fn(
            pos: *const f32,
            dir: *const f32,
            modelIndex: ::core::ffi::c_int,
            count: ::core::ffi::c_int,
            speed: ::core::ffi::c_int,
            spread: ::core::ffi::c_int,
            rendermode: ::core::ffi::c_int,
        ),
    >,
    pub R_Sprite_Explode: ::core::option::Option<
        unsafe extern "C" fn(pTemp: *mut TEMPENTITY, scale: f32, flags: ::core::ffi::c_int),
    >,
    pub R_Sprite_Smoke:
        ::core::option::Option<unsafe extern "C" fn(pTemp: *mut TEMPENTITY, scale: f32)>,
    pub R_Sprite_Spray: ::core::option::Option<
        unsafe extern "C" fn(
            pos: *const f32,
            dir: *const f32,
            modelIndex: ::core::ffi::c_int,
            count: ::core::ffi::c_int,
            speed: ::core::ffi::c_int,
            iRand: ::core::ffi::c_int,
        ),
    >,
    pub R_Sprite_Trail: ::core::option::Option<
        unsafe extern "C" fn(
            type_: ::core::ffi::c_int,
            start: *mut f32,
            end: *mut f32,
            modelIndex: ::core::ffi::c_int,
            count: ::core::ffi::c_int,
            life: f32,
            size: f32,
            amplitude: f32,
            renderamt: ::core::ffi::c_int,
            speed: f32,
        ),
    >,
    pub R_Sprite_WallPuff:
        ::core::option::Option<unsafe extern "C" fn(pTemp: *mut TEMPENTITY, scale: f32)>,
    pub R_StreakSplash: ::core::option::Option<
        unsafe extern "C" fn(
            pos: *const f32,
            dir: *const f32,
            color: ::core::ffi::c_int,
            count: ::core::ffi::c_int,
            speed: f32,
            velocityMin: ::core::ffi::c_int,
            velocityMax: ::core::ffi::c_int,
        ),
    >,
    pub R_TracerEffect:
        ::core::option::Option<unsafe extern "C" fn(start: *const f32, end: *const f32)>,
    pub R_UserTracerParticle: ::core::option::Option<
        unsafe extern "C" fn(
            org: *mut f32,
            vel: *mut f32,
            life: f32,
            colorIndex: ::core::ffi::c_int,
            length: f32,
            deathcontext: ::core::ffi::c_uchar,
            deathfunc: ::core::option::Option<unsafe extern "C" fn(particle: *mut particle_s)>,
        ),
    >,
    pub R_TracerParticles: ::core::option::Option<
        unsafe extern "C" fn(org: *mut f32, vel: *mut f32, life: f32) -> *mut particle_t,
    >,
    pub R_TeleportSplash: ::core::option::Option<unsafe extern "C" fn(org: *const f32)>,
    pub R_TempSphereModel: ::core::option::Option<
        unsafe extern "C" fn(
            pos: *const f32,
            speed: f32,
            life: f32,
            count: ::core::ffi::c_int,
            modelIndex: ::core::ffi::c_int,
        ),
    >,
    pub R_TempModel: ::core::option::Option<
        unsafe extern "C" fn(
            pos: *const f32,
            dir: *const f32,
            angles: *const f32,
            life: f32,
            modelIndex: ::core::ffi::c_int,
            soundtype: ::core::ffi::c_int,
        ) -> *mut TEMPENTITY,
    >,
    pub R_DefaultSprite: ::core::option::Option<
        unsafe extern "C" fn(
            pos: *const f32,
            spriteIndex: ::core::ffi::c_int,
            framerate: f32,
        ) -> *mut TEMPENTITY,
    >,
    pub R_TempSprite: ::core::option::Option<
        unsafe extern "C" fn(
            pos: *mut f32,
            dir: *const f32,
            scale: f32,
            modelIndex: ::core::ffi::c_int,
            rendermode: ::core::ffi::c_int,
            renderfx: ::core::ffi::c_int,
            a: f32,
            life: f32,
            flags: ::core::ffi::c_int,
        ) -> *mut TEMPENTITY,
    >,
    pub Draw_DecalIndex:
        ::core::option::Option<unsafe extern "C" fn(id: ::core::ffi::c_int) -> ::core::ffi::c_int>,
    pub Draw_DecalIndexFromName: ::core::option::Option<
        unsafe extern "C" fn(name: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub R_DecalShoot: ::core::option::Option<
        unsafe extern "C" fn(
            textureIndex: ::core::ffi::c_int,
            entity: ::core::ffi::c_int,
            modelIndex: ::core::ffi::c_int,
            position: *mut f32,
            flags: ::core::ffi::c_int,
        ),
    >,
    pub R_AttachTentToPlayer: ::core::option::Option<
        unsafe extern "C" fn(
            client: ::core::ffi::c_int,
            modelIndex: ::core::ffi::c_int,
            zoffset: f32,
            life: f32,
        ),
    >,
    pub R_KillAttachedTents:
        ::core::option::Option<unsafe extern "C" fn(client: ::core::ffi::c_int)>,
    pub R_BeamCirclePoints: ::core::option::Option<
        unsafe extern "C" fn(
            type_: ::core::ffi::c_int,
            start: *mut f32,
            end: *mut f32,
            modelIndex: ::core::ffi::c_int,
            life: f32,
            width: f32,
            amplitude: f32,
            brightness: f32,
            speed: f32,
            startFrame: ::core::ffi::c_int,
            framerate: f32,
            r: f32,
            g: f32,
            b: f32,
        ) -> *mut BEAM,
    >,
    pub R_BeamEntPoint: ::core::option::Option<
        unsafe extern "C" fn(
            startEnt: ::core::ffi::c_int,
            end: *mut f32,
            modelIndex: ::core::ffi::c_int,
            life: f32,
            width: f32,
            amplitude: f32,
            brightness: f32,
            speed: f32,
            startFrame: ::core::ffi::c_int,
            framerate: f32,
            r: f32,
            g: f32,
            b: f32,
        ) -> *mut BEAM,
    >,
    pub R_BeamEnts: ::core::option::Option<
        unsafe extern "C" fn(
            startEnt: ::core::ffi::c_int,
            endEnt: ::core::ffi::c_int,
            modelIndex: ::core::ffi::c_int,
            life: f32,
            width: f32,
            amplitude: f32,
            brightness: f32,
            speed: f32,
            startFrame: ::core::ffi::c_int,
            framerate: f32,
            r: f32,
            g: f32,
            b: f32,
        ) -> *mut BEAM,
    >,
    pub R_BeamFollow: ::core::option::Option<
        unsafe extern "C" fn(
            startEnt: ::core::ffi::c_int,
            modelIndex: ::core::ffi::c_int,
            life: f32,
            width: f32,
            r: f32,
            g: f32,
            b: f32,
            brightness: f32,
        ) -> *mut BEAM,
    >,
    pub R_BeamKill: ::core::option::Option<unsafe extern "C" fn(deadEntity: ::core::ffi::c_int)>,
    pub R_BeamLightning: ::core::option::Option<
        unsafe extern "C" fn(
            start: *mut f32,
            end: *mut f32,
            modelIndex: ::core::ffi::c_int,
            life: f32,
            width: f32,
            amplitude: f32,
            brightness: f32,
            speed: f32,
        ) -> *mut BEAM,
    >,
    pub R_BeamPoints: ::core::option::Option<
        unsafe extern "C" fn(
            start: *mut f32,
            end: *mut f32,
            modelIndex: ::core::ffi::c_int,
            life: f32,
            width: f32,
            amplitude: f32,
            brightness: f32,
            speed: f32,
            startFrame: ::core::ffi::c_int,
            framerate: f32,
            r: f32,
            g: f32,
            b: f32,
        ) -> *mut BEAM,
    >,
    pub R_BeamRing: ::core::option::Option<
        unsafe extern "C" fn(
            startEnt: ::core::ffi::c_int,
            endEnt: ::core::ffi::c_int,
            modelIndex: ::core::ffi::c_int,
            life: f32,
            width: f32,
            amplitude: f32,
            brightness: f32,
            speed: f32,
            startFrame: ::core::ffi::c_int,
            framerate: f32,
            r: f32,
            g: f32,
            b: f32,
        ) -> *mut BEAM,
    >,
    pub CL_AllocDlight:
        ::core::option::Option<unsafe extern "C" fn(key: ::core::ffi::c_int) -> *mut dlight_t>,
    pub CL_AllocElight:
        ::core::option::Option<unsafe extern "C" fn(key: ::core::ffi::c_int) -> *mut dlight_t>,
    pub CL_TempEntAlloc: ::core::option::Option<
        unsafe extern "C" fn(org: *const f32, model: *mut model_s) -> *mut TEMPENTITY,
    >,
    pub CL_TempEntAllocNoModel:
        ::core::option::Option<unsafe extern "C" fn(org: *const f32) -> *mut TEMPENTITY>,
    pub CL_TempEntAllocHigh: ::core::option::Option<
        unsafe extern "C" fn(org: *const f32, model: *mut model_s) -> *mut TEMPENTITY,
    >,
    pub CL_TentEntAllocCustom: ::core::option::Option<
        unsafe extern "C" fn(
            origin: *const f32,
            model: *mut model_s,
            high: ::core::ffi::c_int,
            callback: ::core::option::Option<
                unsafe extern "C" fn(ent: *mut tempent_s, frametime: f32, currenttime: f32),
            >,
        ) -> *mut TEMPENTITY,
    >,
    pub R_GetPackedColor: ::core::option::Option<
        unsafe extern "C" fn(packed: *mut ::core::ffi::c_short, color: ::core::ffi::c_short),
    >,
    pub R_LookupColor: ::core::option::Option<
        unsafe extern "C" fn(
            r: ::core::ffi::c_uchar,
            g: ::core::ffi::c_uchar,
            b: ::core::ffi::c_uchar,
        ) -> ::core::ffi::c_short,
    >,
    pub R_DecalRemoveAll:
        ::core::option::Option<unsafe extern "C" fn(textureIndex: ::core::ffi::c_int)>,
    pub R_FireCustomDecal: ::core::option::Option<
        unsafe extern "C" fn(
            textureIndex: ::core::ffi::c_int,
            entity: ::core::ffi::c_int,
            modelIndex: ::core::ffi::c_int,
            position: *mut f32,
            flags: ::core::ffi::c_int,
            scale: f32,
        ),
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GAMEINFO_s {
    pub gamefolder: [::core::ffi::c_char; 64usize],
    pub startmap: [::core::ffi::c_char; 64usize],
    pub trainmap: [::core::ffi::c_char; 64usize],
    pub title: [::core::ffi::c_char; 64usize],
    pub version: [::core::ffi::c_char; 14usize],
    pub flags: ::core::ffi::c_short,
    pub game_url: [::core::ffi::c_char; 256usize],
    pub update_url: [::core::ffi::c_char; 256usize],
    pub type_: [::core::ffi::c_char; 64usize],
    pub date: [::core::ffi::c_char; 64usize],
    pub size: [::core::ffi::c_char; 64usize],
    pub gamemode: ::core::ffi::c_int,
}
pub type GAMEINFO = GAMEINFO_s;
pub const gametype_e_GAME_NORMAL: gametype_e = 0;
pub const gametype_e_GAME_SINGLEPLAYER_ONLY: gametype_e = 1;
pub const gametype_e_GAME_MULTIPLAYER_ONLY: gametype_e = 2;
pub type gametype_e = ::core::ffi::c_uint;
pub use self::gametype_e as gametype_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gameinfo2_s {
    pub gi_version: ::core::ffi::c_int,
    pub gamefolder: [::core::ffi::c_char; 64usize],
    pub startmap: [::core::ffi::c_char; 64usize],
    pub trainmap: [::core::ffi::c_char; 64usize],
    pub demomap: [::core::ffi::c_char; 64usize],
    pub title: [::core::ffi::c_char; 64usize],
    pub iconpath: [::core::ffi::c_char; 64usize],
    pub version: [::core::ffi::c_char; 16usize],
    pub flags: u32,
    pub game_url: [::core::ffi::c_char; 256usize],
    pub update_url: [::core::ffi::c_char; 256usize],
    pub type_: [::core::ffi::c_char; 64usize],
    pub date: [::core::ffi::c_char; 64usize],
    pub size: u64,
    pub gamemode: gametype_t,
}
pub type gameinfo2_t = gameinfo2_s;
pub const FS_STATIC_PATH: _bindgen_ty_8 = 1;
pub const FS_NOWRITE_PATH: _bindgen_ty_8 = 2;
pub const FS_GAMEDIR_PATH: _bindgen_ty_8 = 4;
pub const FS_CUSTOM_PATH: _bindgen_ty_8 = 8;
pub const FS_GAMERODIR_PATH: _bindgen_ty_8 = 16;
pub const FS_SKIP_ARCHIVED_WADS: _bindgen_ty_8 = 32;
pub const FS_LOAD_PACKED_WAD: _bindgen_ty_8 = 64;
pub const FS_MOUNT_HD: _bindgen_ty_8 = 128;
pub const FS_MOUNT_LV: _bindgen_ty_8 = 256;
pub const FS_MOUNT_ADDON: _bindgen_ty_8 = 512;
pub const FS_MOUNT_L10N: _bindgen_ty_8 = 1024;
pub const FS_GAMEDIRONLY_SEARCH_FLAGS: _bindgen_ty_8 = 28;
pub type _bindgen_ty_8 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct searchpath_s {
    _unused: [u8; 0],
}
pub type searchpath_t = searchpath_s;
pub const IAES_ONLY_REAL_ARCHIVES: _bindgen_ty_9 = 1;
pub type _bindgen_ty_9 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct search_t {
    pub numfilenames: ::core::ffi::c_int,
    pub filenames: *mut *mut ::core::ffi::c_char,
    pub filenamesbuffer: *mut ::core::ffi::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gameinfo_s {
    pub gamefolder: [::core::ffi::c_char; 64usize],
    pub basedir: [::core::ffi::c_char; 64usize],
    pub falldir: [::core::ffi::c_char; 64usize],
    pub startmap: [::core::ffi::c_char; 64usize],
    pub trainmap: [::core::ffi::c_char; 64usize],
    pub title: [::core::ffi::c_char; 64usize],
    pub version: f32,
    pub dll_path: [::core::ffi::c_char; 64usize],
    pub game_dll: [::core::ffi::c_char; 64usize],
    pub iconpath: [::core::ffi::c_char; 64usize],
    pub game_url: string,
    pub update_url: string,
    pub type_: [::core::ffi::c_char; 64usize],
    pub date: [::core::ffi::c_char; 64usize],
    pub size: usize,
    pub gamemode: ::core::ffi::c_int,
    pub secure: qboolean,
    pub nomodels: qboolean,
    pub noskills: qboolean,
    pub render_picbutton_text: qboolean,
    pub internal_vgui_support: qboolean,
    pub sp_entity: [::core::ffi::c_char; 32usize],
    pub mp_entity: [::core::ffi::c_char; 32usize],
    pub mp_filter: [::core::ffi::c_char; 32usize],
    pub ambientsound: [[::core::ffi::c_char; 64usize]; 4usize],
    pub max_edicts: ::core::ffi::c_int,
    pub max_tents: ::core::ffi::c_int,
    pub max_beams: ::core::ffi::c_int,
    pub max_particles: ::core::ffi::c_int,
    pub game_dll_linux: [::core::ffi::c_char; 64usize],
    pub game_dll_osx: [::core::ffi::c_char; 64usize],
    pub added: qboolean,
    pub quicksave_aged_count: ::core::ffi::c_int,
    pub autosave_aged_count: ::core::ffi::c_int,
    pub hd_background: qboolean,
    pub animated_title: qboolean,
    pub demomap: [::core::ffi::c_char; 64usize],
    pub rodir: qboolean,
    pub mtime: i64,
}
pub type gameinfo_t = gameinfo_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fs_dllinfo_t {
    pub fullPath: [::core::ffi::c_char; 2048usize],
    pub shortPath: string,
    pub encrypted: qboolean,
    pub custom_loader: qboolean,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fs_globals_t {
    pub GameInfo: *mut gameinfo_t,
    pub games: [*mut gameinfo_t; 512usize],
    pub numgames: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct file_s {
    _unused: [u8; 0],
}
pub type file_t = file_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fs_api_t {
    pub InitStdio: ::core::option::Option<
        unsafe extern "C" fn(
            unused_set_to_true: qboolean,
            rootdir: *const ::core::ffi::c_char,
            basedir: *const ::core::ffi::c_char,
            gamedir: *const ::core::ffi::c_char,
            rodir: *const ::core::ffi::c_char,
        ) -> qboolean,
    >,
    pub ShutdownStdio: ::core::option::Option<unsafe extern "C" fn()>,
    pub Rescan: ::core::option::Option<
        unsafe extern "C" fn(flags: u32, language: *const ::core::ffi::c_char),
    >,
    pub ClearSearchPath: ::core::option::Option<unsafe extern "C" fn()>,
    pub AllowDirectPaths: ::core::option::Option<unsafe extern "C" fn(enable: qboolean)>,
    pub AddGameDirectory:
        ::core::option::Option<unsafe extern "C" fn(dir: *const ::core::ffi::c_char, flags: uint)>,
    pub AddGameHierarchy:
        ::core::option::Option<unsafe extern "C" fn(dir: *const ::core::ffi::c_char, flags: uint)>,
    pub Search: ::core::option::Option<
        unsafe extern "C" fn(
            pattern: *const ::core::ffi::c_char,
            caseinsensitive: ::core::ffi::c_int,
            gamedironly: ::core::ffi::c_int,
        ) -> *mut search_t,
    >,
    pub SetCurrentDirectory: ::core::option::Option<
        unsafe extern "C" fn(path: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub FindLibrary: ::core::option::Option<
        unsafe extern "C" fn(
            dllname: *const ::core::ffi::c_char,
            directpath: qboolean,
            dllinfo: *mut fs_dllinfo_t,
        ) -> qboolean,
    >,
    pub Path_f: ::core::option::Option<unsafe extern "C" fn()>,
    pub Gamedir: ::core::option::Option<unsafe extern "C" fn() -> *const ::core::ffi::c_char>,
    pub LoadGameInfo: ::core::option::Option<
        unsafe extern "C" fn(flags: u32, language: *const ::core::ffi::c_char),
    >,
    pub Open: ::core::option::Option<
        unsafe extern "C" fn(
            filepath: *const ::core::ffi::c_char,
            mode: *const ::core::ffi::c_char,
            gamedironly: qboolean,
        ) -> *mut file_t,
    >,
    pub Write: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut file_t,
            data: *const ::core::ffi::c_void,
            datasize: usize,
        ) -> fs_offset_t,
    >,
    pub Read: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut file_t,
            buffer: *mut ::core::ffi::c_void,
            buffersize: usize,
        ) -> fs_offset_t,
    >,
    pub Seek: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut file_t,
            offset: fs_offset_t,
            whence: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub Tell: ::core::option::Option<unsafe extern "C" fn(file: *mut file_t) -> fs_offset_t>,
    pub Eof: ::core::option::Option<unsafe extern "C" fn(file: *mut file_t) -> qboolean>,
    pub Flush:
        ::core::option::Option<unsafe extern "C" fn(file: *mut file_t) -> ::core::ffi::c_int>,
    pub Close:
        ::core::option::Option<unsafe extern "C" fn(file: *mut file_t) -> ::core::ffi::c_int>,
    pub Gets: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut file_t,
            string: *mut ::core::ffi::c_char,
            bufsize: usize,
        ) -> ::core::ffi::c_int,
    >,
    pub UnGetc: ::core::option::Option<
        unsafe extern "C" fn(file: *mut file_t, c: ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub Getc: ::core::option::Option<unsafe extern "C" fn(file: *mut file_t) -> ::core::ffi::c_int>,
    pub VPrintf: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut file_t,
            format: *const ::core::ffi::c_char,
            ap: va_list,
        ) -> ::core::ffi::c_int,
    >,
    pub Printf: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut file_t,
            format: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int,
    >,
    pub Print: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut file_t,
            msg: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int,
    >,
    pub FileLength: ::core::option::Option<unsafe extern "C" fn(f: *mut file_t) -> fs_offset_t>,
    pub FileCopy: ::core::option::Option<
        unsafe extern "C" fn(
            pOutput: *mut file_t,
            pInput: *mut file_t,
            fileSize: ::core::ffi::c_int,
        ) -> qboolean,
    >,
    pub LoadFile: ::core::option::Option<
        unsafe extern "C" fn(
            path: *const ::core::ffi::c_char,
            filesizeptr: *mut fs_offset_t,
            gamedironly: qboolean,
        ) -> *mut byte,
    >,
    pub LoadDirectFile: ::core::option::Option<
        unsafe extern "C" fn(
            path: *const ::core::ffi::c_char,
            filesizeptr: *mut fs_offset_t,
        ) -> *mut byte,
    >,
    pub WriteFile: ::core::option::Option<
        unsafe extern "C" fn(
            filename: *const ::core::ffi::c_char,
            data: *const ::core::ffi::c_void,
            len: fs_offset_t,
        ) -> qboolean,
    >,
    pub CRC32_File: ::core::option::Option<
        unsafe extern "C" fn(
            crcvalue: *mut dword,
            filename: *const ::core::ffi::c_char,
        ) -> qboolean,
    >,
    pub MD5_HashFile: ::core::option::Option<
        unsafe extern "C" fn(
            digest: *mut [byte; 16usize],
            pszFileName: *const ::core::ffi::c_char,
            seed: *mut [uint; 4usize],
        ) -> qboolean,
    >,
    pub FileExists: ::core::option::Option<
        unsafe extern "C" fn(
            filename: *const ::core::ffi::c_char,
            gamedironly: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub FileTime: ::core::option::Option<
        unsafe extern "C" fn(
            filename: *const ::core::ffi::c_char,
            gamedironly: qboolean,
        ) -> ::core::ffi::c_int,
    >,
    pub FileSize: ::core::option::Option<
        unsafe extern "C" fn(
            filename: *const ::core::ffi::c_char,
            gamedironly: qboolean,
        ) -> fs_offset_t,
    >,
    pub Rename: ::core::option::Option<
        unsafe extern "C" fn(
            oldname: *const ::core::ffi::c_char,
            newname: *const ::core::ffi::c_char,
        ) -> qboolean,
    >,
    pub Delete:
        ::core::option::Option<unsafe extern "C" fn(path: *const ::core::ffi::c_char) -> qboolean>,
    pub SysFileExists:
        ::core::option::Option<unsafe extern "C" fn(path: *const ::core::ffi::c_char) -> qboolean>,
    pub GetDiskPath: ::core::option::Option<
        unsafe extern "C" fn(
            name: *const ::core::ffi::c_char,
            gamedironly: qboolean,
        ) -> *const ::core::ffi::c_char,
    >,
    pub ArchivePath:
        ::core::option::Option<unsafe extern "C" fn(f: *mut file_t) -> *const ::core::ffi::c_char>,
    pub MountArchive_Fullpath: ::core::option::Option<
        unsafe extern "C" fn(
            path: *const ::core::ffi::c_char,
            flags: ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_void,
    >,
    pub GetFullDiskPath: ::core::option::Option<
        unsafe extern "C" fn(
            buffer: *mut ::core::ffi::c_char,
            size: usize,
            name: *const ::core::ffi::c_char,
            gamedironly: qboolean,
        ) -> qboolean,
    >,
    pub LoadFileMalloc: ::core::option::Option<
        unsafe extern "C" fn(
            path: *const ::core::ffi::c_char,
            filesizeptr: *mut fs_offset_t,
            gamedironly: qboolean,
        ) -> *mut byte,
    >,
    pub IsArchiveExtensionSupported: ::core::option::Option<
        unsafe extern "C" fn(ext: *const ::core::ffi::c_char, flags: uint) -> qboolean,
    >,
    pub GetArchiveByName: ::core::option::Option<
        unsafe extern "C" fn(
            name: *const ::core::ffi::c_char,
            prev: *mut searchpath_t,
        ) -> *mut searchpath_t,
    >,
    pub FindFileInArchive: ::core::option::Option<
        unsafe extern "C" fn(
            sp: *mut searchpath_t,
            path: *const ::core::ffi::c_char,
            outpath: *mut ::core::ffi::c_char,
            len: usize,
        ) -> ::core::ffi::c_int,
    >,
    pub OpenFileFromArchive: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut searchpath_t,
            path: *const ::core::ffi::c_char,
            mode: *const ::core::ffi::c_char,
            pack_ind: ::core::ffi::c_int,
        ) -> *mut file_t,
    >,
    pub LoadFileFromArchive: ::core::option::Option<
        unsafe extern "C" fn(
            sp: *mut searchpath_t,
            path: *const ::core::ffi::c_char,
            pack_ind: ::core::ffi::c_int,
            filesizeptr: *mut fs_offset_t,
            sys_malloc: qboolean,
        ) -> *mut byte,
    >,
    pub GetRootDirectory: ::core::option::Option<
        unsafe extern "C" fn(path: *mut ::core::ffi::c_char, size: usize) -> qboolean,
    >,
    pub MakeGameInfo: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fs_interface_t {
    pub _Con_Printf:
        ::core::option::Option<unsafe extern "C" fn(fmt: *const ::core::ffi::c_char, ...)>,
    pub _Con_DPrintf:
        ::core::option::Option<unsafe extern "C" fn(fmt: *const ::core::ffi::c_char, ...)>,
    pub _Con_Reportf:
        ::core::option::Option<unsafe extern "C" fn(fmt: *const ::core::ffi::c_char, ...)>,
    pub _Sys_Error:
        ::core::option::Option<unsafe extern "C" fn(fmt: *const ::core::ffi::c_char, ...)>,
    pub _Mem_AllocPool: ::core::option::Option<
        unsafe extern "C" fn(
            name: *const ::core::ffi::c_char,
            filename: *const ::core::ffi::c_char,
            fileline: ::core::ffi::c_int,
        ) -> poolhandle_t,
    >,
    pub _Mem_FreePool: ::core::option::Option<
        unsafe extern "C" fn(
            poolptr: *mut poolhandle_t,
            filename: *const ::core::ffi::c_char,
            fileline: ::core::ffi::c_int,
        ),
    >,
    pub _Mem_Alloc: ::core::option::Option<
        unsafe extern "C" fn(
            poolptr: poolhandle_t,
            size: usize,
            clear: qboolean,
            filename: *const ::core::ffi::c_char,
            fileline: ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_void,
    >,
    pub _Mem_Realloc: ::core::option::Option<
        unsafe extern "C" fn(
            poolptr: poolhandle_t,
            memptr: *mut ::core::ffi::c_void,
            size: usize,
            clear: qboolean,
            filename: *const ::core::ffi::c_char,
            fileline: ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_void,
    >,
    pub _Mem_Free: ::core::option::Option<
        unsafe extern "C" fn(
            data: *mut ::core::ffi::c_void,
            filename: *const ::core::ffi::c_char,
            fileline: ::core::ffi::c_int,
        ),
    >,
    pub _Sys_GetNativeObject: ::core::option::Option<
        unsafe extern "C" fn(object: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_void,
    >,
}
pub type FSAPI = ::core::option::Option<
    unsafe extern "C" fn(
        version: ::core::ffi::c_int,
        api: *mut fs_api_t,
        globals: *mut *mut fs_globals_t,
        interface: *const fs_interface_t,
    ) -> ::core::ffi::c_int,
>;
pub const demo_mode_DEMO_INACTIVE: demo_mode = 0;
pub const demo_mode_DEMO_XASH3D: demo_mode = 1;
pub const demo_mode_DEMO_QUAKE1: demo_mode = 2;
pub type demo_mode = ::core::ffi::c_uint;
pub const ref_window_type_e_REF_WINDOW_TYPE_NULL: ref_window_type_e = 0;
pub const ref_window_type_e_REF_WINDOW_TYPE_WIN32: ref_window_type_e = 1;
pub const ref_window_type_e_REF_WINDOW_TYPE_X11: ref_window_type_e = 2;
pub const ref_window_type_e_REF_WINDOW_TYPE_WAYLAND: ref_window_type_e = 3;
pub const ref_window_type_e_REF_WINDOW_TYPE_MACOS: ref_window_type_e = 4;
pub const ref_window_type_e_REF_WINDOW_TYPE_SDL: ref_window_type_e = 5;
pub type ref_window_type_e = ::core::ffi::c_uint;
pub use self::ref_window_type_e as ref_window_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sortedface_t {
    pub surf: *mut msurface_t,
    pub cull: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ref_globals_s {
    pub developer: qboolean,
    pub width: ::core::ffi::c_int,
    pub height: ::core::ffi::c_int,
    pub fullScreen: qboolean,
    pub wideScreen: qboolean,
    pub vieworg: vec3_t,
    pub viewangles: vec3_t,
    pub draw_surfaces: *mut sortedface_t,
    pub max_surfaces: ::core::ffi::c_int,
    pub visbytes: usize,
    pub desktopBitsPixel: ::core::ffi::c_int,
}
pub type ref_globals_t = ref_globals_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ref_client_s {
    pub time: f64,
    pub oldtime: f64,
    pub viewentity: ::core::ffi::c_int,
    pub playernum: ::core::ffi::c_int,
    pub maxclients: ::core::ffi::c_int,
    pub nummodels: ::core::ffi::c_int,
    pub models: [*mut model_t; 4097usize],
    pub paused: qboolean,
    pub simorg: vec3_t,
}
pub type ref_client_t = ref_client_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ref_host_s {
    pub realtime: f64,
    pub frametime: f64,
    pub features: ::core::ffi::c_int,
}
pub type ref_host_t = ref_host_s;
pub const GL_KEEP_UNIT: _bindgen_ty_10 = -1;
pub const XASH_TEXTURE0: _bindgen_ty_10 = 0;
pub const XASH_TEXTURE1: _bindgen_ty_10 = 1;
pub const XASH_TEXTURE2: _bindgen_ty_10 = 2;
pub const XASH_TEXTURE3: _bindgen_ty_10 = 3;
pub const MAX_TEXTURE_UNITS: _bindgen_ty_10 = 32;
pub type _bindgen_ty_10 = ::core::ffi::c_int;
pub const RS_ACTIVE_TENTS: _bindgen_ty_11 = 0;
pub type _bindgen_ty_11 = ::core::ffi::c_uint;
pub const connstate_e_ca_disconnected: connstate_e = 0;
pub const connstate_e_ca_connecting: connstate_e = 1;
pub const connstate_e_ca_connected: connstate_e = 2;
pub const connstate_e_ca_validate: connstate_e = 3;
pub const connstate_e_ca_active: connstate_e = 4;
pub const connstate_e_ca_cinematic: connstate_e = 5;
pub type connstate_e = ::core::ffi::c_uint;
pub use self::connstate_e as connstate_t;
pub const ref_defaultsprite_e_REF_DOT_SPRITE: ref_defaultsprite_e = 0;
pub const ref_defaultsprite_e_REF_CHROME_SPRITE: ref_defaultsprite_e = 1;
pub type ref_defaultsprite_e = ::core::ffi::c_uint;
pub const ref_graphic_apis_e_REF_SOFTWARE: ref_graphic_apis_e = 0;
pub const ref_graphic_apis_e_REF_GL: ref_graphic_apis_e = 1;
pub const ref_graphic_apis_e_REF_D3D: ref_graphic_apis_e = 2;
pub type ref_graphic_apis_e = ::core::ffi::c_uint;
pub const ref_safegl_context_t_SAFE_NO: ref_safegl_context_t = 0;
pub const ref_safegl_context_t_SAFE_NOMSAA: ref_safegl_context_t = 1;
pub const ref_safegl_context_t_SAFE_NOACC: ref_safegl_context_t = 2;
pub const ref_safegl_context_t_SAFE_NOSTENCIL: ref_safegl_context_t = 3;
pub const ref_safegl_context_t_SAFE_NOALPHA: ref_safegl_context_t = 4;
pub const ref_safegl_context_t_SAFE_NODEPTH: ref_safegl_context_t = 5;
pub const ref_safegl_context_t_SAFE_NOCOLOR: ref_safegl_context_t = 6;
pub const ref_safegl_context_t_SAFE_DONTCARE: ref_safegl_context_t = 7;
pub const ref_safegl_context_t_SAFE_LAST: ref_safegl_context_t = 8;
pub type ref_safegl_context_t = ::core::ffi::c_uint;
pub const REF_GL_RED_SIZE: _bindgen_ty_12 = 0;
pub const REF_GL_GREEN_SIZE: _bindgen_ty_12 = 1;
pub const REF_GL_BLUE_SIZE: _bindgen_ty_12 = 2;
pub const REF_GL_ALPHA_SIZE: _bindgen_ty_12 = 3;
pub const REF_GL_DOUBLEBUFFER: _bindgen_ty_12 = 4;
pub const REF_GL_DEPTH_SIZE: _bindgen_ty_12 = 5;
pub const REF_GL_STENCIL_SIZE: _bindgen_ty_12 = 6;
pub const REF_GL_MULTISAMPLEBUFFERS: _bindgen_ty_12 = 7;
pub const REF_GL_MULTISAMPLESAMPLES: _bindgen_ty_12 = 8;
pub const REF_GL_ACCELERATED_VISUAL: _bindgen_ty_12 = 9;
pub const REF_GL_CONTEXT_MAJOR_VERSION: _bindgen_ty_12 = 10;
pub const REF_GL_CONTEXT_MINOR_VERSION: _bindgen_ty_12 = 11;
pub const REF_GL_CONTEXT_EGL: _bindgen_ty_12 = 12;
pub const REF_GL_CONTEXT_FLAGS: _bindgen_ty_12 = 13;
pub const REF_GL_CONTEXT_PROFILE_MASK: _bindgen_ty_12 = 14;
pub const REF_GL_SHARE_WITH_CURRENT_CONTEXT: _bindgen_ty_12 = 15;
pub const REF_GL_FRAMEBUFFER_SRGB_CAPABLE: _bindgen_ty_12 = 16;
pub const REF_GL_CONTEXT_RELEASE_BEHAVIOR: _bindgen_ty_12 = 17;
pub const REF_GL_CONTEXT_RESET_NOTIFICATION: _bindgen_ty_12 = 18;
pub const REF_GL_CONTEXT_NO_ERROR: _bindgen_ty_12 = 19;
pub const REF_GL_ATTRIBUTES_COUNT: _bindgen_ty_12 = 20;
pub type _bindgen_ty_12 = ::core::ffi::c_uint;
pub const REF_GL_CONTEXT_PROFILE_CORE: _bindgen_ty_13 = 1;
pub const REF_GL_CONTEXT_PROFILE_COMPATIBILITY: _bindgen_ty_13 = 2;
pub const REF_GL_CONTEXT_PROFILE_ES: _bindgen_ty_13 = 4;
pub type _bindgen_ty_13 = ::core::ffi::c_uint;
pub const REF_GL_CONTEXT_DEBUG_FLAG: _bindgen_ty_14 = 1;
pub const REF_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG: _bindgen_ty_14 = 2;
pub const REF_GL_CONTEXT_ROBUST_ACCESS_FLAG: _bindgen_ty_14 = 4;
pub const REF_GL_CONTEXT_RESET_ISOLATION_FLAG: _bindgen_ty_14 = 8;
pub type _bindgen_ty_14 = ::core::ffi::c_uint;
pub const ref_screen_rotation_e_REF_ROTATE_NONE: ref_screen_rotation_e = 0;
pub const ref_screen_rotation_e_REF_ROTATE_CW: ref_screen_rotation_e = 1;
pub const ref_screen_rotation_e_REF_ROTATE_UD: ref_screen_rotation_e = 2;
pub const ref_screen_rotation_e_REF_ROTATE_CCW: ref_screen_rotation_e = 3;
pub type ref_screen_rotation_e = ::core::ffi::c_uint;
pub use self::ref_screen_rotation_e as ref_screen_rotation_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct remap_info_s {
    pub textures: [::core::ffi::c_ushort; 32usize],
    pub ptexture: *mut mstudiotex_s,
    pub numtextures: ::core::ffi::c_short,
    pub topcolor: ::core::ffi::c_short,
    pub bottomcolor: ::core::ffi::c_short,
    pub model: *mut model_t,
}
pub type remap_info_t = remap_info_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct convar_s {
    _unused: [u8; 0],
}
pub type convar_t = convar_s;
pub const ref_parm_e_PARM_DEV_OVERVIEW: ref_parm_e = -1;
pub const ref_parm_e_PARM_THIRDPERSON: ref_parm_e = -2;
pub const ref_parm_e_PARM_QUAKE_COMPATIBLE: ref_parm_e = -3;
pub const ref_parm_e_PARM_GET_CLIENT_PTR: ref_parm_e = -4;
pub const ref_parm_e_PARM_GET_HOST_PTR: ref_parm_e = -5;
pub const ref_parm_e_PARM_CONNSTATE: ref_parm_e = -6;
pub const ref_parm_e_PARM_PLAYING_DEMO: ref_parm_e = -7;
pub const ref_parm_e_PARM_WATER_LEVEL: ref_parm_e = -8;
pub const ref_parm_e_PARM_GET_WORLD_PTR: ref_parm_e = -9;
pub const ref_parm_e_PARM_LOCAL_HEALTH: ref_parm_e = -10;
pub const ref_parm_e_PARM_LOCAL_GAME: ref_parm_e = -11;
pub const ref_parm_e_PARM_NUMENTITIES: ref_parm_e = -12;
pub const ref_parm_e_PARM_GET_MOVEVARS_PTR: ref_parm_e = -13;
pub const ref_parm_e_PARM_GET_PALETTE_PTR: ref_parm_e = -14;
pub const ref_parm_e_PARM_GET_VIEWENT_PTR: ref_parm_e = -15;
pub const ref_parm_e_PARM_GET_TEXGAMMATABLE_PTR: ref_parm_e = -16;
pub const ref_parm_e_PARM_GET_LIGHTGAMMATABLE_PTR: ref_parm_e = -17;
pub const ref_parm_e_PARM_GET_SCREENGAMMATABLE_PTR: ref_parm_e = -18;
pub const ref_parm_e_PARM_GET_LINEARGAMMATABLE_PTR: ref_parm_e = -19;
pub const ref_parm_e_PARM_GET_LIGHTSTYLES_PTR: ref_parm_e = -20;
pub const ref_parm_e_PARM_GET_DLIGHTS_PTR: ref_parm_e = -21;
pub const ref_parm_e_PARM_GET_ELIGHTS_PTR: ref_parm_e = -22;
pub const ref_parm_e_PARM_TEX_FILTERING: ref_parm_e = -65536;
pub type ref_parm_e = ::core::ffi::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ref_api_s {
    pub EngineGetParm: ::core::option::Option<
        unsafe extern "C" fn(parm: ::core::ffi::c_int, arg: ::core::ffi::c_int) -> isize,
    >,
    pub Cvar_Get: ::core::option::Option<
        unsafe extern "C" fn(
            szName: *const ::core::ffi::c_char,
            szValue: *const ::core::ffi::c_char,
            flags: ::core::ffi::c_int,
            description: *const ::core::ffi::c_char,
        ) -> *mut cvar_t,
    >,
    pub pfnGetCvarPointer: ::core::option::Option<
        unsafe extern "C" fn(
            name: *const ::core::ffi::c_char,
            ignore_flags: ::core::ffi::c_int,
        ) -> *mut cvar_t,
    >,
    pub pfnGetCvarFloat:
        ::core::option::Option<unsafe extern "C" fn(szName: *const ::core::ffi::c_char) -> f32>,
    pub pfnGetCvarString: ::core::option::Option<
        unsafe extern "C" fn(szName: *const ::core::ffi::c_char) -> *const ::core::ffi::c_char,
    >,
    pub Cvar_SetValue:
        ::core::option::Option<unsafe extern "C" fn(name: *const ::core::ffi::c_char, value: f32)>,
    pub Cvar_Set: ::core::option::Option<
        unsafe extern "C" fn(name: *const ::core::ffi::c_char, value: *const ::core::ffi::c_char),
    >,
    pub Cvar_RegisterVariable: ::core::option::Option<unsafe extern "C" fn(var: *mut convar_t)>,
    pub Cvar_FullSet: ::core::option::Option<
        unsafe extern "C" fn(
            var_name: *const ::core::ffi::c_char,
            value: *const ::core::ffi::c_char,
            flags: ::core::ffi::c_int,
        ),
    >,
    pub Cmd_AddCommand: ::core::option::Option<
        unsafe extern "C" fn(
            cmd_name: *const ::core::ffi::c_char,
            function: ::core::option::Option<unsafe extern "C" fn()>,
            description: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int,
    >,
    pub Cmd_RemoveCommand:
        ::core::option::Option<unsafe extern "C" fn(cmd_name: *const ::core::ffi::c_char)>,
    pub Cmd_Argc: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub Cmd_Argv: ::core::option::Option<
        unsafe extern "C" fn(arg: ::core::ffi::c_int) -> *const ::core::ffi::c_char,
    >,
    pub Cmd_Args: ::core::option::Option<unsafe extern "C" fn() -> *const ::core::ffi::c_char>,
    pub Cbuf_AddText:
        ::core::option::Option<unsafe extern "C" fn(commands: *const ::core::ffi::c_char)>,
    pub Cbuf_InsertText:
        ::core::option::Option<unsafe extern "C" fn(commands: *const ::core::ffi::c_char)>,
    pub Cbuf_Execute: ::core::option::Option<unsafe extern "C" fn()>,
    pub Con_Printf:
        ::core::option::Option<unsafe extern "C" fn(fmt: *const ::core::ffi::c_char, ...)>,
    pub Con_DPrintf:
        ::core::option::Option<unsafe extern "C" fn(fmt: *const ::core::ffi::c_char, ...)>,
    pub Con_Reportf:
        ::core::option::Option<unsafe extern "C" fn(fmt: *const ::core::ffi::c_char, ...)>,
    pub Con_NPrintf: ::core::option::Option<
        unsafe extern "C" fn(pos: ::core::ffi::c_int, fmt: *const ::core::ffi::c_char, ...),
    >,
    pub Con_NXPrintf: ::core::option::Option<
        unsafe extern "C" fn(info: *mut con_nprint_s, fmt: *const ::core::ffi::c_char, ...),
    >,
    pub CL_CenterPrint:
        ::core::option::Option<unsafe extern "C" fn(s: *const ::core::ffi::c_char, y: f32)>,
    pub Con_DrawStringLen: ::core::option::Option<
        unsafe extern "C" fn(
            pText: *const ::core::ffi::c_char,
            length: *mut ::core::ffi::c_int,
            height: *mut ::core::ffi::c_int,
        ),
    >,
    pub Con_DrawString: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            string: *const ::core::ffi::c_char,
            setColor: *const rgba_t,
        ) -> ::core::ffi::c_int,
    >,
    pub CL_DrawCenterPrint: ::core::option::Option<unsafe extern "C" fn()>,
    pub R_BeamGetEntity:
        ::core::option::Option<unsafe extern "C" fn(index: ::core::ffi::c_int) -> *mut cl_entity_s>,
    pub CL_GetWaterEntity:
        ::core::option::Option<unsafe extern "C" fn(p: *const vec3_t) -> *mut cl_entity_s>,
    pub CL_AddVisibleEntity: ::core::option::Option<
        unsafe extern "C" fn(ent: *mut cl_entity_t, entityType: ::core::ffi::c_int) -> qboolean,
    >,
    pub Mod_SampleSizeForFace:
        ::core::option::Option<unsafe extern "C" fn(surf: *const msurface_s) -> ::core::ffi::c_int>,
    pub Mod_BoxVisible: ::core::option::Option<
        unsafe extern "C" fn(
            mins: *const vec3_t,
            maxs: *const vec3_t,
            visbits: *const byte,
        ) -> qboolean,
    >,
    pub Mod_PointInLeaf: ::core::option::Option<
        unsafe extern "C" fn(p: *const vec3_t, node: *mut mnode_t) -> *mut mleaf_t,
    >,
    pub R_DrawWorldHull: ::core::option::Option<unsafe extern "C" fn()>,
    pub R_DrawModelHull: ::core::option::Option<unsafe extern "C" fn(mod_: *mut model_t)>,
    pub R_StudioGetAnim: ::core::option::Option<
        unsafe extern "C" fn(
            m_pStudioHeader: *mut studiohdr_t,
            m_pSubModel: *mut model_t,
            pseqdesc: *mut mstudioseqdesc_t,
        ) -> *mut ::core::ffi::c_void,
    >,
    pub pfnStudioEvent: ::core::option::Option<
        unsafe extern "C" fn(event: *const mstudioevent_s, entity: *const cl_entity_t),
    >,
    pub CL_DrawEFX: ::core::option::Option<unsafe extern "C" fn(time: f32, fTrans: qboolean)>,
    pub CL_ThinkParticle:
        ::core::option::Option<unsafe extern "C" fn(frametime: f64, p: *mut particle_t)>,
    pub R_FreeDeadParticles:
        ::core::option::Option<unsafe extern "C" fn(ppparticles: *mut *mut particle_t)>,
    pub CL_AllocParticleFast: ::core::option::Option<unsafe extern "C" fn() -> *mut particle_t>,
    pub CL_AllocElight:
        ::core::option::Option<unsafe extern "C" fn(key: ::core::ffi::c_int) -> *mut dlight_s>,
    pub GetDefaultSprite:
        ::core::option::Option<unsafe extern "C" fn(spr: ref_defaultsprite_e) -> *mut model_s>,
    pub R_StoreEfrags: ::core::option::Option<
        unsafe extern "C" fn(ppefrag: *mut *mut efrag_s, framecount: ::core::ffi::c_int),
    >,
    pub Mod_ForName: ::core::option::Option<
        unsafe extern "C" fn(
            name: *const ::core::ffi::c_char,
            crash: qboolean,
            trackCRC: qboolean,
        ) -> *mut model_t,
    >,
    pub Mod_Extradata: ::core::option::Option<
        unsafe extern "C" fn(
            type_: ::core::ffi::c_int,
            model: *mut model_t,
        ) -> *mut ::core::ffi::c_void,
    >,
    pub CL_EntitySetRemapColors: ::core::option::Option<
        unsafe extern "C" fn(
            e: *mut cl_entity_t,
            mod_: *mut model_t,
            top: ::core::ffi::c_int,
            bottom: ::core::ffi::c_int,
        ) -> qboolean,
    >,
    pub CL_GetRemapInfoForEntity:
        ::core::option::Option<unsafe extern "C" fn(e: *mut cl_entity_t) -> *mut remap_info_s>,
    pub CL_ExtraUpdate: ::core::option::Option<unsafe extern "C" fn()>,
    pub Host_Error:
        ::core::option::Option<unsafe extern "C" fn(fmt: *const ::core::ffi::c_char, ...)>,
    pub COM_SetRandomSeed: ::core::option::Option<unsafe extern "C" fn(lSeed: ::core::ffi::c_int)>,
    pub COM_RandomFloat: ::core::option::Option<unsafe extern "C" fn(rmin: f32, rmax: f32) -> f32>,
    pub COM_RandomLong: ::core::option::Option<
        unsafe extern "C" fn(
            rmin: ::core::ffi::c_int,
            rmax: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub GetScreenFade: ::core::option::Option<unsafe extern "C" fn() -> *mut screenfade_s>,
    pub CL_GetScreenInfo: ::core::option::Option<
        unsafe extern "C" fn(width: *mut ::core::ffi::c_int, height: *mut ::core::ffi::c_int),
    >,
    pub SetLocalLightLevel: ::core::option::Option<unsafe extern "C" fn(level: ::core::ffi::c_int)>,
    pub Sys_CheckParm: ::core::option::Option<
        unsafe extern "C" fn(flag: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub pfnPlayerInfo: ::core::option::Option<
        unsafe extern "C" fn(index: ::core::ffi::c_int) -> *mut player_info_t,
    >,
    pub pfnGetPlayerState: ::core::option::Option<
        unsafe extern "C" fn(index: ::core::ffi::c_int) -> *mut entity_state_t,
    >,
    pub Mod_CacheCheck: ::core::option::Option<
        unsafe extern "C" fn(c: *mut cache_user_s) -> *mut ::core::ffi::c_void,
    >,
    pub Mod_LoadCacheFile: ::core::option::Option<
        unsafe extern "C" fn(path: *const ::core::ffi::c_char, cu: *mut cache_user_s),
    >,
    pub Mod_Calloc: ::core::option::Option<
        unsafe extern "C" fn(number: ::core::ffi::c_int, size: usize) -> *mut ::core::ffi::c_void,
    >,
    pub pfnGetStudioModelInterface: ::core::option::Option<
        unsafe extern "C" fn(
            version: ::core::ffi::c_int,
            ppinterface: *mut *mut r_studio_interface_s,
            pstudio: *mut engine_studio_api_s,
        ) -> ::core::ffi::c_int,
    >,
    pub _Mem_AllocPool: ::core::option::Option<
        unsafe extern "C" fn(
            name: *const ::core::ffi::c_char,
            filename: *const ::core::ffi::c_char,
            fileline: ::core::ffi::c_int,
        ) -> poolhandle_t,
    >,
    pub _Mem_FreePool: ::core::option::Option<
        unsafe extern "C" fn(
            poolptr: *mut poolhandle_t,
            filename: *const ::core::ffi::c_char,
            fileline: ::core::ffi::c_int,
        ),
    >,
    pub _Mem_Alloc: ::core::option::Option<
        unsafe extern "C" fn(
            poolptr: poolhandle_t,
            size: usize,
            clear: qboolean,
            filename: *const ::core::ffi::c_char,
            fileline: ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_void,
    >,
    pub _Mem_Realloc: ::core::option::Option<
        unsafe extern "C" fn(
            poolptr: poolhandle_t,
            memptr: *mut ::core::ffi::c_void,
            size: usize,
            clear: qboolean,
            filename: *const ::core::ffi::c_char,
            fileline: ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_void,
    >,
    pub _Mem_Free: ::core::option::Option<
        unsafe extern "C" fn(
            data: *mut ::core::ffi::c_void,
            filename: *const ::core::ffi::c_char,
            fileline: ::core::ffi::c_int,
        ),
    >,
    pub COM_LoadLibrary: ::core::option::Option<
        unsafe extern "C" fn(
            name: *const ::core::ffi::c_char,
            build_ordinals_table: ::core::ffi::c_int,
            directpath: qboolean,
        ) -> *mut ::core::ffi::c_void,
    >,
    pub COM_FreeLibrary:
        ::core::option::Option<unsafe extern "C" fn(handle: *mut ::core::ffi::c_void)>,
    pub COM_GetProcAddress: ::core::option::Option<
        unsafe extern "C" fn(
            handle: *mut ::core::ffi::c_void,
            name: *const ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_void,
    >,
    pub R_Init_Video:
        ::core::option::Option<unsafe extern "C" fn(type_: ::core::ffi::c_int) -> qboolean>,
    pub R_Free_Video: ::core::option::Option<unsafe extern "C" fn()>,
    pub GL_SetAttribute: ::core::option::Option<
        unsafe extern "C" fn(
            attr: ::core::ffi::c_int,
            value: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub GL_GetAttribute: ::core::option::Option<
        unsafe extern "C" fn(
            attr: ::core::ffi::c_int,
            value: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub GL_GetProcAddress: ::core::option::Option<
        unsafe extern "C" fn(name: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_void,
    >,
    pub GL_SwapBuffers: ::core::option::Option<unsafe extern "C" fn()>,
    pub SW_CreateBuffer: ::core::option::Option<
        unsafe extern "C" fn(
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
            stride: *mut uint,
            bpp: *mut uint,
            r: *mut uint,
            g: *mut uint,
            b: *mut uint,
        ) -> qboolean,
    >,
    pub SW_LockBuffer: ::core::option::Option<unsafe extern "C" fn() -> *mut ::core::ffi::c_void>,
    pub SW_UnlockBuffer: ::core::option::Option<unsafe extern "C" fn()>,
    pub R_FatPVS: ::core::option::Option<
        unsafe extern "C" fn(
            org: *const f32,
            radius: f32,
            visbuffer: *mut byte,
            merge: qboolean,
            fullvis: qboolean,
        ) -> ::core::ffi::c_int,
    >,
    pub GetOverviewParms: ::core::option::Option<unsafe extern "C" fn() -> *const ref_overview_s>,
    pub pfnTime: ::core::option::Option<unsafe extern "C" fn() -> f64>,
    pub EV_GetPhysent:
        ::core::option::Option<unsafe extern "C" fn(idx: ::core::ffi::c_int) -> *mut physent_s>,
    pub EV_TraceSurface: ::core::option::Option<
        unsafe extern "C" fn(
            ground: ::core::ffi::c_int,
            vstart: *mut f32,
            vend: *mut f32,
        ) -> *mut msurface_s,
    >,
    pub PM_TraceLine: ::core::option::Option<
        unsafe extern "C" fn(
            start: *mut f32,
            end: *mut f32,
            flags: ::core::ffi::c_int,
            usehull: ::core::ffi::c_int,
            ignore_pe: ::core::ffi::c_int,
        ) -> *mut pmtrace_s,
    >,
    pub EV_VisTraceLine: ::core::option::Option<
        unsafe extern "C" fn(
            start: *mut f32,
            end: *mut f32,
            flags: ::core::ffi::c_int,
        ) -> *mut pmtrace_s,
    >,
    pub CL_TraceLine: ::core::option::Option<
        unsafe extern "C" fn(
            start: *mut vec3_t,
            end: *mut vec3_t,
            flags: ::core::ffi::c_int,
        ) -> pmtrace_s,
    >,
    pub Image_AddCmdFlags: ::core::option::Option<unsafe extern "C" fn(flags: uint)>,
    pub Image_SetForceFlags: ::core::option::Option<unsafe extern "C" fn(flags: uint)>,
    pub Image_ClearForceFlags: ::core::option::Option<unsafe extern "C" fn()>,
    pub Image_CustomPalette: ::core::option::Option<unsafe extern "C" fn() -> qboolean>,
    pub Image_Process: ::core::option::Option<
        unsafe extern "C" fn(
            pix: *mut *mut rgbdata_t,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
            flags: uint,
            reserved: f32,
        ) -> qboolean,
    >,
    pub FS_LoadImage: ::core::option::Option<
        unsafe extern "C" fn(
            filename: *const ::core::ffi::c_char,
            buffer: *const byte,
            size: usize,
        ) -> *mut rgbdata_t,
    >,
    pub FS_SaveImage: ::core::option::Option<
        unsafe extern "C" fn(filename: *const ::core::ffi::c_char, pix: *mut rgbdata_t) -> qboolean,
    >,
    pub FS_CopyImage:
        ::core::option::Option<unsafe extern "C" fn(in_: *mut rgbdata_t) -> *mut rgbdata_t>,
    pub FS_FreeImage: ::core::option::Option<unsafe extern "C" fn(pack: *mut rgbdata_t)>,
    pub Image_SetMDLPointer: ::core::option::Option<unsafe extern "C" fn(p: *mut byte)>,
    pub Image_GetPFDesc:
        ::core::option::Option<unsafe extern "C" fn(idx: ::core::ffi::c_int) -> *const bpc_desc_s>,
    pub pfnDrawNormalTriangles: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnDrawTransparentTriangles: ::core::option::Option<unsafe extern "C" fn()>,
    pub drawFuncs: *mut render_interface_t,
    pub fsapi: *mut fs_api_t,
    pub R_GetWindowHandle: ::core::option::Option<
        unsafe extern "C" fn(
            handle: *mut *mut ::core::ffi::c_void,
            type_: ref_window_type_t,
        ) -> ref_window_type_t,
    >,
}
pub type ref_api_t = ref_api_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mip_s {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ref_interface_s {
    pub R_Init: ::core::option::Option<unsafe extern "C" fn() -> qboolean>,
    pub R_Shutdown: ::core::option::Option<unsafe extern "C" fn()>,
    pub R_GetConfigName:
        ::core::option::Option<unsafe extern "C" fn() -> *const ::core::ffi::c_char>,
    pub R_SetDisplayTransform: ::core::option::Option<
        unsafe extern "C" fn(
            rotate: ref_screen_rotation_t,
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            scale_x: f32,
            scale_y: f32,
        ) -> qboolean,
    >,
    pub GL_SetupAttributes:
        ::core::option::Option<unsafe extern "C" fn(safegl: ::core::ffi::c_int)>,
    pub GL_InitExtensions: ::core::option::Option<unsafe extern "C" fn()>,
    pub GL_ClearExtensions: ::core::option::Option<unsafe extern "C" fn()>,
    pub R_GammaChanged: ::core::option::Option<unsafe extern "C" fn(do_reset_gamma: qboolean)>,
    pub R_BeginFrame: ::core::option::Option<unsafe extern "C" fn(clearScene: qboolean)>,
    pub R_RenderScene: ::core::option::Option<unsafe extern "C" fn()>,
    pub R_EndFrame: ::core::option::Option<unsafe extern "C" fn()>,
    pub R_PushScene: ::core::option::Option<unsafe extern "C" fn()>,
    pub R_PopScene: ::core::option::Option<unsafe extern "C" fn()>,
    pub GL_BackendStartFrame: ::core::option::Option<unsafe extern "C" fn()>,
    pub GL_BackendEndFrame: ::core::option::Option<unsafe extern "C" fn()>,
    pub R_ClearScreen: ::core::option::Option<unsafe extern "C" fn()>,
    pub R_AllowFog: ::core::option::Option<unsafe extern "C" fn(allow: qboolean)>,
    pub GL_SetRenderMode:
        ::core::option::Option<unsafe extern "C" fn(renderMode: ::core::ffi::c_int)>,
    pub R_AddEntity: ::core::option::Option<
        unsafe extern "C" fn(clent: *mut cl_entity_s, type_: ::core::ffi::c_int) -> qboolean,
    >,
    pub CL_AddCustomBeam: ::core::option::Option<unsafe extern "C" fn(pEnvBeam: *mut cl_entity_t)>,
    pub R_ProcessEntData: ::core::option::Option<
        unsafe extern "C" fn(
            allocate: qboolean,
            entities: *mut cl_entity_t,
            max_entities: ::core::ffi::c_uint,
        ),
    >,
    pub R_Flush: ::core::option::Option<unsafe extern "C" fn(flush_flags: ::core::ffi::c_uint)>,
    pub R_ShowTextures: ::core::option::Option<unsafe extern "C" fn()>,
    pub R_GetTextureOriginalBuffer:
        ::core::option::Option<unsafe extern "C" fn(idx: ::core::ffi::c_uint) -> *const byte>,
    pub GL_LoadTextureFromBuffer: ::core::option::Option<
        unsafe extern "C" fn(
            name: *const ::core::ffi::c_char,
            pic: *mut rgbdata_t,
            flags: texFlags_t,
            update: qboolean,
        ) -> ::core::ffi::c_int,
    >,
    pub GL_ProcessTexture: ::core::option::Option<
        unsafe extern "C" fn(
            texnum: ::core::ffi::c_int,
            gamma: f32,
            topColor: ::core::ffi::c_int,
            bottomColor: ::core::ffi::c_int,
        ),
    >,
    pub R_SetupSky:
        ::core::option::Option<unsafe extern "C" fn(skyboxTextures: *mut ::core::ffi::c_int)>,
    pub R_Set2DMode: ::core::option::Option<unsafe extern "C" fn(enable: qboolean)>,
    pub R_DrawStretchRaw: ::core::option::Option<
        unsafe extern "C" fn(
            x: f32,
            y: f32,
            w: f32,
            h: f32,
            cols: ::core::ffi::c_int,
            rows: ::core::ffi::c_int,
            data: *const byte,
            dirty: qboolean,
        ),
    >,
    pub R_DrawStretchPic: ::core::option::Option<
        unsafe extern "C" fn(
            x: f32,
            y: f32,
            w: f32,
            h: f32,
            s1: f32,
            t1: f32,
            s2: f32,
            t2: f32,
            texnum: ::core::ffi::c_int,
        ),
    >,
    pub FillRGBA: ::core::option::Option<
        unsafe extern "C" fn(
            rendermode: ::core::ffi::c_int,
            x: f32,
            y: f32,
            w: f32,
            h: f32,
            r: byte,
            g: byte,
            b: byte,
            a: byte,
        ),
    >,
    pub WorldToScreen: ::core::option::Option<
        unsafe extern "C" fn(world: *const vec3_t, screen: *mut vec3_t) -> ::core::ffi::c_int,
    >,
    pub VID_ScreenShot: ::core::option::Option<
        unsafe extern "C" fn(
            filename: *const ::core::ffi::c_char,
            shot_type: ::core::ffi::c_int,
        ) -> qboolean,
    >,
    pub VID_CubemapShot: ::core::option::Option<
        unsafe extern "C" fn(
            base: *const ::core::ffi::c_char,
            size: uint,
            vieworg: *const f32,
            skyshot: qboolean,
        ) -> qboolean,
    >,
    pub R_LightPoint: ::core::option::Option<unsafe extern "C" fn(p: *const f32) -> colorVec>,
    pub R_DecalShoot: ::core::option::Option<
        unsafe extern "C" fn(
            textureIndex: ::core::ffi::c_int,
            entityIndex: ::core::ffi::c_int,
            modelIndex: ::core::ffi::c_int,
            pos: *mut vec3_t,
            flags: ::core::ffi::c_int,
            scale: f32,
        ),
    >,
    pub R_DecalRemoveAll: ::core::option::Option<unsafe extern "C" fn(texture: ::core::ffi::c_int)>,
    pub R_CreateDecalList:
        ::core::option::Option<unsafe extern "C" fn(pList: *mut decallist_s) -> ::core::ffi::c_int>,
    pub R_ClearAllDecals: ::core::option::Option<unsafe extern "C" fn()>,
    pub R_StudioEstimateFrame: ::core::option::Option<
        unsafe extern "C" fn(
            e: *mut cl_entity_t,
            pseqdesc: *mut mstudioseqdesc_t,
            time: f64,
        ) -> f32,
    >,
    pub R_StudioLerpMovement: ::core::option::Option<
        unsafe extern "C" fn(
            e: *mut cl_entity_t,
            time: f64,
            origin: *mut vec3_t,
            angles: *mut vec3_t,
        ),
    >,
    pub CL_InitStudioAPI: ::core::option::Option<unsafe extern "C" fn()>,
    pub R_SetSkyCloudsTextures: ::core::option::Option<
        unsafe extern "C" fn(
            solidskyTexture: ::core::ffi::c_int,
            alphaskyTexture: ::core::ffi::c_int,
        ),
    >,
    pub GL_SubdivideSurface:
        ::core::option::Option<unsafe extern "C" fn(mod_: *mut model_t, fa: *mut msurface_t)>,
    pub CL_RunLightStyles: ::core::option::Option<unsafe extern "C" fn(ls: *mut lightstyle_t)>,
    pub R_GetSpriteParms: ::core::option::Option<
        unsafe extern "C" fn(
            frameWidth: *mut ::core::ffi::c_int,
            frameHeight: *mut ::core::ffi::c_int,
            numFrames: *mut ::core::ffi::c_int,
            currentFrame: ::core::ffi::c_int,
            pSprite: *const model_t,
        ),
    >,
    pub R_GetSpriteTexture: ::core::option::Option<
        unsafe extern "C" fn(
            m_pSpriteModel: *const model_t,
            frame: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub Mod_ProcessRenderData: ::core::option::Option<
        unsafe extern "C" fn(mod_: *mut model_t, create: qboolean, buffer: *const byte) -> qboolean,
    >,
    pub Mod_StudioLoadTextures: ::core::option::Option<
        unsafe extern "C" fn(mod_: *mut model_t, data: *mut ::core::ffi::c_void),
    >,
    pub CL_DrawParticles: ::core::option::Option<
        unsafe extern "C" fn(frametime: f64, particles: *mut particle_t, partsize: f32),
    >,
    pub CL_DrawTracers:
        ::core::option::Option<unsafe extern "C" fn(frametime: f64, tracers: *mut particle_t)>,
    pub CL_DrawBeams:
        ::core::option::Option<unsafe extern "C" fn(fTrans: ::core::ffi::c_int, beams: *mut BEAM)>,
    pub R_BeamCull: ::core::option::Option<
        unsafe extern "C" fn(
            start: *const vec3_t,
            end: *const vec3_t,
            pvsOnly: qboolean,
        ) -> qboolean,
    >,
    pub RefGetParm: ::core::option::Option<
        unsafe extern "C" fn(
            parm: ::core::ffi::c_int,
            arg: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub GetDetailScaleForTexture: ::core::option::Option<
        unsafe extern "C" fn(texture: ::core::ffi::c_int, xScale: *mut f32, yScale: *mut f32),
    >,
    pub GetExtraParmsForTexture: ::core::option::Option<
        unsafe extern "C" fn(
            texture: ::core::ffi::c_int,
            red: *mut byte,
            green: *mut byte,
            blue: *mut byte,
            alpha: *mut byte,
        ),
    >,
    pub GetFrameTime: ::core::option::Option<unsafe extern "C" fn() -> f32>,
    pub R_SetCurrentEntity: ::core::option::Option<unsafe extern "C" fn(ent: *mut cl_entity_s)>,
    pub R_SetCurrentModel: ::core::option::Option<unsafe extern "C" fn(mod_: *mut model_s)>,
    pub GL_FindTexture: ::core::option::Option<
        unsafe extern "C" fn(name: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub GL_TextureName: ::core::option::Option<
        unsafe extern "C" fn(texnum: ::core::ffi::c_uint) -> *const ::core::ffi::c_char,
    >,
    pub GL_TextureData:
        ::core::option::Option<unsafe extern "C" fn(texnum: ::core::ffi::c_uint) -> *const byte>,
    pub GL_LoadTexture: ::core::option::Option<
        unsafe extern "C" fn(
            name: *const ::core::ffi::c_char,
            buf: *const byte,
            size: usize,
            flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub GL_CreateTexture: ::core::option::Option<
        unsafe extern "C" fn(
            name: *const ::core::ffi::c_char,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
            buffer: *const ::core::ffi::c_void,
            flags: texFlags_t,
        ) -> ::core::ffi::c_int,
    >,
    pub GL_LoadTextureArray: ::core::option::Option<
        unsafe extern "C" fn(
            names: *mut *const ::core::ffi::c_char,
            flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub GL_CreateTextureArray: ::core::option::Option<
        unsafe extern "C" fn(
            name: *const ::core::ffi::c_char,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
            depth: ::core::ffi::c_int,
            buffer: *const ::core::ffi::c_void,
            flags: texFlags_t,
        ) -> ::core::ffi::c_int,
    >,
    pub GL_FreeTexture: ::core::option::Option<unsafe extern "C" fn(texnum: ::core::ffi::c_uint)>,
    pub R_OverrideTextureSourceSize: ::core::option::Option<
        unsafe extern "C" fn(
            texnum: ::core::ffi::c_uint,
            srcWidth: ::core::ffi::c_uint,
            srcHeight: ::core::ffi::c_uint,
        ),
    >,
    pub DrawSingleDecal:
        ::core::option::Option<unsafe extern "C" fn(pDecal: *mut decal_s, fa: *mut msurface_s)>,
    pub R_DecalSetupVerts: ::core::option::Option<
        unsafe extern "C" fn(
            pDecal: *mut decal_s,
            surf: *mut msurface_s,
            texture: ::core::ffi::c_int,
            outCount: *mut ::core::ffi::c_int,
        ) -> *mut f32,
    >,
    pub R_EntityRemoveDecals: ::core::option::Option<unsafe extern "C" fn(mod_: *mut model_s)>,
    pub AVI_UploadRawFrame: ::core::option::Option<
        unsafe extern "C" fn(
            texture: ::core::ffi::c_int,
            cols: ::core::ffi::c_int,
            rows: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
            data: *const byte,
        ),
    >,
    pub GL_Bind: ::core::option::Option<
        unsafe extern "C" fn(tmu: ::core::ffi::c_int, texnum: ::core::ffi::c_uint),
    >,
    pub GL_SelectTexture: ::core::option::Option<unsafe extern "C" fn(tmu: ::core::ffi::c_int)>,
    pub GL_LoadTextureMatrix: ::core::option::Option<unsafe extern "C" fn(glmatrix: *const f32)>,
    pub GL_TexMatrixIdentity: ::core::option::Option<unsafe extern "C" fn()>,
    pub GL_CleanUpTextureUnits:
        ::core::option::Option<unsafe extern "C" fn(last: ::core::ffi::c_int)>,
    pub GL_TexGen: ::core::option::Option<
        unsafe extern "C" fn(coord: ::core::ffi::c_uint, mode: ::core::ffi::c_uint),
    >,
    pub GL_TextureTarget: ::core::option::Option<unsafe extern "C" fn(target: ::core::ffi::c_uint)>,
    pub GL_TexCoordArrayMode:
        ::core::option::Option<unsafe extern "C" fn(texmode: ::core::ffi::c_uint)>,
    pub GL_UpdateTexSize: ::core::option::Option<
        unsafe extern "C" fn(
            texnum: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
            depth: ::core::ffi::c_int,
        ),
    >,
    pub GL_Reserved0: ::core::option::Option<unsafe extern "C" fn()>,
    pub GL_Reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub GL_DrawParticles: ::core::option::Option<
        unsafe extern "C" fn(rvp: *const ref_viewpass_s, trans_pass: qboolean, frametime: f32),
    >,
    pub LightVec: ::core::option::Option<
        unsafe extern "C" fn(
            start: *const f32,
            end: *const f32,
            lightspot: *mut f32,
            lightvec: *mut f32,
        ) -> colorVec,
    >,
    pub StudioGetTexture:
        ::core::option::Option<unsafe extern "C" fn(e: *mut cl_entity_s) -> *mut mstudiotex_s>,
    pub GL_RenderFrame: ::core::option::Option<unsafe extern "C" fn(rvp: *const ref_viewpass_s)>,
    pub GL_OrthoBounds:
        ::core::option::Option<unsafe extern "C" fn(mins: *const f32, maxs: *const f32)>,
    pub R_SpeedsMessage: ::core::option::Option<
        unsafe extern "C" fn(out: *mut ::core::ffi::c_char, size: usize) -> qboolean,
    >,
    pub Mod_GetCurrentVis: ::core::option::Option<unsafe extern "C" fn() -> *mut byte>,
    pub R_NewMap: ::core::option::Option<unsafe extern "C" fn()>,
    pub R_ClearScene: ::core::option::Option<unsafe extern "C" fn()>,
    pub R_GetProcAddress: ::core::option::Option<
        unsafe extern "C" fn(name: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_void,
    >,
    pub TriRenderMode: ::core::option::Option<unsafe extern "C" fn(mode: ::core::ffi::c_int)>,
    pub Begin: ::core::option::Option<unsafe extern "C" fn(primitiveCode: ::core::ffi::c_int)>,
    pub End: ::core::option::Option<unsafe extern "C" fn()>,
    pub Color4f: ::core::option::Option<unsafe extern "C" fn(r: f32, g: f32, b: f32, a: f32)>,
    pub Color4ub: ::core::option::Option<
        unsafe extern "C" fn(
            r: ::core::ffi::c_uchar,
            g: ::core::ffi::c_uchar,
            b: ::core::ffi::c_uchar,
            a: ::core::ffi::c_uchar,
        ),
    >,
    pub TexCoord2f: ::core::option::Option<unsafe extern "C" fn(u: f32, v: f32)>,
    pub Vertex3fv: ::core::option::Option<unsafe extern "C" fn(worldPnt: *const f32)>,
    pub Vertex3f: ::core::option::Option<unsafe extern "C" fn(x: f32, y: f32, z: f32)>,
    pub Fog: ::core::option::Option<
        unsafe extern "C" fn(
            flFogColor: *mut [f32; 3usize],
            flStart: f32,
            flEnd: f32,
            bOn: ::core::ffi::c_int,
        ),
    >,
    pub ScreenToWorld:
        ::core::option::Option<unsafe extern "C" fn(screen: *const f32, world: *mut f32)>,
    pub GetMatrix:
        ::core::option::Option<unsafe extern "C" fn(pname: ::core::ffi::c_int, matrix: *mut f32)>,
    pub FogParams: ::core::option::Option<
        unsafe extern "C" fn(flDensity: f32, iFogSkybox: ::core::ffi::c_int),
    >,
    pub CullFace: ::core::option::Option<unsafe extern "C" fn(mode: TRICULLSTYLE)>,
    pub VGUI_SetupDrawing: ::core::option::Option<unsafe extern "C" fn(rect: qboolean)>,
    pub VGUI_UploadTextureBlock: ::core::option::Option<
        unsafe extern "C" fn(
            drawX: ::core::ffi::c_int,
            drawY: ::core::ffi::c_int,
            rgba: *const byte,
            blockWidth: ::core::ffi::c_int,
            blockHeight: ::core::ffi::c_int,
        ),
    >,
}
pub type ref_interface_t = ref_interface_s;
pub type REFAPI = ::core::option::Option<
    unsafe extern "C" fn(
        version: ::core::ffi::c_int,
        pFunctionTable: *mut ref_interface_t,
        engfuncs: *mut ref_api_t,
        pGlobals: *mut ref_globals_t,
    ) -> ::core::ffi::c_int,
>;
pub type HIMAGE = ::core::ffi::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ui_globalvars_s {
    pub time: f32,
    pub frametime: f32,
    pub scrWidth: ::core::ffi::c_int,
    pub scrHeight: ::core::ffi::c_int,
    pub maxClients: ::core::ffi::c_int,
    pub developer: ::core::ffi::c_int,
    pub demoplayback: ::core::ffi::c_int,
    pub demorecording: ::core::ffi::c_int,
    pub demoname: [::core::ffi::c_char; 64usize],
    pub maptitle: [::core::ffi::c_char; 64usize],
}
pub type ui_globalvars_t = ui_globalvars_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ui_enginefuncs_s {
    pub pfnPIC_Load: ::core::option::Option<
        unsafe extern "C" fn(
            szPicName: *const ::core::ffi::c_char,
            ucRawImage: *const byte,
            ulRawImageSize: ::core::ffi::c_int,
            flags: ::core::ffi::c_int,
        ) -> HIMAGE,
    >,
    pub pfnPIC_Free:
        ::core::option::Option<unsafe extern "C" fn(szPicName: *const ::core::ffi::c_char)>,
    pub pfnPIC_Width:
        ::core::option::Option<unsafe extern "C" fn(hPic: HIMAGE) -> ::core::ffi::c_int>,
    pub pfnPIC_Height:
        ::core::option::Option<unsafe extern "C" fn(hPic: HIMAGE) -> ::core::ffi::c_int>,
    pub pfnPIC_Set: ::core::option::Option<
        unsafe extern "C" fn(
            hPic: HIMAGE,
            r: ::core::ffi::c_int,
            g: ::core::ffi::c_int,
            b: ::core::ffi::c_int,
            a: ::core::ffi::c_int,
        ),
    >,
    pub pfnPIC_Draw: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
            prc: *const wrect_t,
        ),
    >,
    pub pfnPIC_DrawHoles: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
            prc: *const wrect_t,
        ),
    >,
    pub pfnPIC_DrawTrans: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
            prc: *const wrect_t,
        ),
    >,
    pub pfnPIC_DrawAdditive: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
            prc: *const wrect_t,
        ),
    >,
    pub pfnPIC_EnableScissor: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
        ),
    >,
    pub pfnPIC_DisableScissor: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnFillRGBA: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
            r: ::core::ffi::c_int,
            g: ::core::ffi::c_int,
            b: ::core::ffi::c_int,
            a: ::core::ffi::c_int,
        ),
    >,
    pub pfnRegisterVariable: ::core::option::Option<
        unsafe extern "C" fn(
            szName: *const ::core::ffi::c_char,
            szValue: *const ::core::ffi::c_char,
            flags: ::core::ffi::c_int,
        ) -> *mut cvar_t,
    >,
    pub pfnGetCvarFloat:
        ::core::option::Option<unsafe extern "C" fn(szName: *const ::core::ffi::c_char) -> f32>,
    pub pfnGetCvarString: ::core::option::Option<
        unsafe extern "C" fn(szName: *const ::core::ffi::c_char) -> *const ::core::ffi::c_char,
    >,
    pub pfnCvarSetString: ::core::option::Option<
        unsafe extern "C" fn(
            szName: *const ::core::ffi::c_char,
            szValue: *const ::core::ffi::c_char,
        ),
    >,
    pub pfnCvarSetValue: ::core::option::Option<
        unsafe extern "C" fn(szName: *const ::core::ffi::c_char, flValue: f32),
    >,
    pub pfnAddCommand: ::core::option::Option<
        unsafe extern "C" fn(
            cmd_name: *const ::core::ffi::c_char,
            function: ::core::option::Option<unsafe extern "C" fn()>,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnClientCmd: ::core::option::Option<
        unsafe extern "C" fn(
            execute_now: ::core::ffi::c_int,
            szCmdString: *const ::core::ffi::c_char,
        ),
    >,
    pub pfnDelCommand:
        ::core::option::Option<unsafe extern "C" fn(cmd_name: *const ::core::ffi::c_char)>,
    pub pfnCmdArgc: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnCmdArgv: ::core::option::Option<
        unsafe extern "C" fn(argc: ::core::ffi::c_int) -> *const ::core::ffi::c_char,
    >,
    pub pfnCmd_Args: ::core::option::Option<unsafe extern "C" fn() -> *const ::core::ffi::c_char>,
    pub Con_Printf:
        ::core::option::Option<unsafe extern "C" fn(fmt: *const ::core::ffi::c_char, ...)>,
    pub Con_DPrintf:
        ::core::option::Option<unsafe extern "C" fn(fmt: *const ::core::ffi::c_char, ...)>,
    pub Con_NPrintf: ::core::option::Option<
        unsafe extern "C" fn(pos: ::core::ffi::c_int, fmt: *const ::core::ffi::c_char, ...),
    >,
    pub Con_NXPrintf: ::core::option::Option<
        unsafe extern "C" fn(info: *mut con_nprint_s, fmt: *const ::core::ffi::c_char, ...),
    >,
    pub pfnPlayLocalSound:
        ::core::option::Option<unsafe extern "C" fn(szSound: *const ::core::ffi::c_char)>,
    pub pfnDrawLogo: ::core::option::Option<
        unsafe extern "C" fn(
            filename: *const ::core::ffi::c_char,
            x: f32,
            y: f32,
            width: f32,
            height: f32,
        ),
    >,
    pub pfnGetLogoWidth: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnGetLogoHeight: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnGetLogoLength: ::core::option::Option<unsafe extern "C" fn() -> f32>,
    pub pfnDrawCharacter: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
            ch: ::core::ffi::c_int,
            ulRGBA: ::core::ffi::c_int,
            hFont: HIMAGE,
        ),
    >,
    pub pfnDrawConsoleString: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            string: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnDrawSetTextColor: ::core::option::Option<
        unsafe extern "C" fn(
            r: ::core::ffi::c_int,
            g: ::core::ffi::c_int,
            b: ::core::ffi::c_int,
            alpha: ::core::ffi::c_int,
        ),
    >,
    pub pfnDrawConsoleStringLen: ::core::option::Option<
        unsafe extern "C" fn(
            string: *const ::core::ffi::c_char,
            length: *mut ::core::ffi::c_int,
            height: *mut ::core::ffi::c_int,
        ),
    >,
    pub pfnSetConsoleDefaultColor: ::core::option::Option<
        unsafe extern "C" fn(r: ::core::ffi::c_int, g: ::core::ffi::c_int, b: ::core::ffi::c_int),
    >,
    pub pfnGetPlayerModel: ::core::option::Option<unsafe extern "C" fn() -> *mut cl_entity_s>,
    pub pfnSetModel: ::core::option::Option<
        unsafe extern "C" fn(ed: *mut cl_entity_s, path: *const ::core::ffi::c_char),
    >,
    pub pfnClearScene: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnRenderScene: ::core::option::Option<unsafe extern "C" fn(rvp: *const ref_viewpass_s)>,
    pub CL_CreateVisibleEntity: ::core::option::Option<
        unsafe extern "C" fn(
            type_: ::core::ffi::c_int,
            ent: *mut cl_entity_s,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnHostError:
        ::core::option::Option<unsafe extern "C" fn(szFmt: *const ::core::ffi::c_char, ...)>,
    pub pfnFileExists: ::core::option::Option<
        unsafe extern "C" fn(
            filename: *const ::core::ffi::c_char,
            gamedironly: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnGetGameDir:
        ::core::option::Option<unsafe extern "C" fn(szGetGameDir: *mut ::core::ffi::c_char)>,
    pub pfnCreateMapsList: ::core::option::Option<
        unsafe extern "C" fn(fRefresh: ::core::ffi::c_int) -> ::core::ffi::c_int,
    >,
    pub pfnClientInGame: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnClientJoin: ::core::option::Option<unsafe extern "C" fn(adr: netadr_s)>,
    pub COM_LoadFile: ::core::option::Option<
        unsafe extern "C" fn(
            filename: *const ::core::ffi::c_char,
            pLength: *mut ::core::ffi::c_int,
        ) -> *mut byte,
    >,
    pub COM_ParseFile: ::core::option::Option<
        unsafe extern "C" fn(
            data: *mut ::core::ffi::c_char,
            token: *mut ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char,
    >,
    pub COM_FreeFile:
        ::core::option::Option<unsafe extern "C" fn(buffer: *mut ::core::ffi::c_void)>,
    pub pfnKeyClearStates: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnSetKeyDest: ::core::option::Option<unsafe extern "C" fn(dest: ::core::ffi::c_int)>,
    pub pfnKeynumToString: ::core::option::Option<
        unsafe extern "C" fn(keynum: ::core::ffi::c_int) -> *const ::core::ffi::c_char,
    >,
    pub pfnKeyGetBinding: ::core::option::Option<
        unsafe extern "C" fn(keynum: ::core::ffi::c_int) -> *const ::core::ffi::c_char,
    >,
    pub pfnKeySetBinding: ::core::option::Option<
        unsafe extern "C" fn(keynum: ::core::ffi::c_int, binding: *const ::core::ffi::c_char),
    >,
    pub pfnKeyIsDown: ::core::option::Option<
        unsafe extern "C" fn(keynum: ::core::ffi::c_int) -> ::core::ffi::c_int,
    >,
    pub pfnKeyGetOverstrikeMode:
        ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnKeySetOverstrikeMode:
        ::core::option::Option<unsafe extern "C" fn(fActive: ::core::ffi::c_int)>,
    pub pfnKeyGetState: ::core::option::Option<
        unsafe extern "C" fn(name: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_void,
    >,
    pub pfnMemAlloc: ::core::option::Option<
        unsafe extern "C" fn(
            cb: usize,
            filename: *const ::core::ffi::c_char,
            fileline: ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_void,
    >,
    pub pfnMemFree: ::core::option::Option<
        unsafe extern "C" fn(
            mem: *mut ::core::ffi::c_void,
            filename: *const ::core::ffi::c_char,
            fileline: ::core::ffi::c_int,
        ),
    >,
    pub pfnGetGameInfo: ::core::option::Option<
        unsafe extern "C" fn(pgameinfo: *mut GAMEINFO) -> ::core::ffi::c_int,
    >,
    pub pfnGetGamesList: ::core::option::Option<
        unsafe extern "C" fn(numGames: *mut ::core::ffi::c_int) -> *mut *mut GAMEINFO,
    >,
    pub pfnGetFilesList: ::core::option::Option<
        unsafe extern "C" fn(
            pattern: *const ::core::ffi::c_char,
            numFiles: *mut ::core::ffi::c_int,
            gamedironly: ::core::ffi::c_int,
        ) -> *mut *mut ::core::ffi::c_char,
    >,
    pub pfnGetSaveComment: ::core::option::Option<
        unsafe extern "C" fn(
            savename: *const ::core::ffi::c_char,
            comment: *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnGetDemoComment: ::core::option::Option<
        unsafe extern "C" fn(
            demoname: *const ::core::ffi::c_char,
            comment: *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnCheckGameDll: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnGetClipboardData:
        ::core::option::Option<unsafe extern "C" fn() -> *mut ::core::ffi::c_char>,
    pub pfnShellExecute: ::core::option::Option<
        unsafe extern "C" fn(
            name: *const ::core::ffi::c_char,
            args: *const ::core::ffi::c_char,
            closeEngine: ::core::ffi::c_int,
        ),
    >,
    pub pfnWriteServerConfig:
        ::core::option::Option<unsafe extern "C" fn(name: *const ::core::ffi::c_char)>,
    pub pfnChangeInstance: ::core::option::Option<
        unsafe extern "C" fn(
            newInstance: *const ::core::ffi::c_char,
            szFinalMessage: *const ::core::ffi::c_char,
        ),
    >,
    pub pfnPlayBackgroundTrack: ::core::option::Option<
        unsafe extern "C" fn(
            introName: *const ::core::ffi::c_char,
            loopName: *const ::core::ffi::c_char,
        ),
    >,
    pub pfnHostEndGame:
        ::core::option::Option<unsafe extern "C" fn(szFinalMessage: *const ::core::ffi::c_char)>,
    pub pfnRandomFloat:
        ::core::option::Option<unsafe extern "C" fn(flLow: f32, flHigh: f32) -> f32>,
    pub pfnRandomLong: ::core::option::Option<
        unsafe extern "C" fn(
            lLow: ::core::ffi::c_int,
            lHigh: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnSetCursor:
        ::core::option::Option<unsafe extern "C" fn(hCursor: *mut ::core::ffi::c_void)>,
    pub pfnIsMapValid: ::core::option::Option<
        unsafe extern "C" fn(filename: *mut ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub pfnProcessImage: ::core::option::Option<
        unsafe extern "C" fn(
            texnum: ::core::ffi::c_int,
            gamma: f32,
            topColor: ::core::ffi::c_int,
            bottomColor: ::core::ffi::c_int,
        ),
    >,
    pub pfnCompareFileTime: ::core::option::Option<
        unsafe extern "C" fn(
            filename1: *const ::core::ffi::c_char,
            filename2: *const ::core::ffi::c_char,
            iCompare: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnGetModeString: ::core::option::Option<
        unsafe extern "C" fn(vid_mode: ::core::ffi::c_int) -> *const ::core::ffi::c_char,
    >,
    pub COM_SaveFile: ::core::option::Option<
        unsafe extern "C" fn(
            filename: *const ::core::ffi::c_char,
            data: *const ::core::ffi::c_void,
            len: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub COM_RemoveFile: ::core::option::Option<
        unsafe extern "C" fn(filepath: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
}
pub type ui_enginefuncs_t = ui_enginefuncs_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UI_FUNCTIONS {
    pub pfnVidInit: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnInit: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnShutdown: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnRedraw: ::core::option::Option<unsafe extern "C" fn(flTime: f32)>,
    pub pfnKeyEvent: ::core::option::Option<
        unsafe extern "C" fn(key: ::core::ffi::c_int, down: ::core::ffi::c_int),
    >,
    pub pfnMouseMove:
        ::core::option::Option<unsafe extern "C" fn(x: ::core::ffi::c_int, y: ::core::ffi::c_int)>,
    pub pfnSetActiveMenu: ::core::option::Option<unsafe extern "C" fn(active: ::core::ffi::c_int)>,
    pub pfnAddServerToList: ::core::option::Option<
        unsafe extern "C" fn(adr: netadr_s, info: *const ::core::ffi::c_char),
    >,
    pub pfnGetCursorPos: ::core::option::Option<
        unsafe extern "C" fn(pos_x: *mut ::core::ffi::c_int, pos_y: *mut ::core::ffi::c_int),
    >,
    pub pfnSetCursorPos: ::core::option::Option<
        unsafe extern "C" fn(pos_x: ::core::ffi::c_int, pos_y: ::core::ffi::c_int),
    >,
    pub pfnShowCursor: ::core::option::Option<unsafe extern "C" fn(show: ::core::ffi::c_int)>,
    pub pfnCharEvent: ::core::option::Option<unsafe extern "C" fn(key: ::core::ffi::c_int)>,
    pub pfnMouseInRect: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnIsVisible: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnCreditsActive: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnFinalCredits: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ui_extendedfuncs_s {
    pub pfnEnableTextInput:
        ::core::option::Option<unsafe extern "C" fn(enable: ::core::ffi::c_int)>,
    pub pfnUtfProcessChar:
        ::core::option::Option<unsafe extern "C" fn(ch: ::core::ffi::c_int) -> ::core::ffi::c_int>,
    pub pfnUtfMoveLeft: ::core::option::Option<
        unsafe extern "C" fn(
            str_: *mut ::core::ffi::c_char,
            pos: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnUtfMoveRight: ::core::option::Option<
        unsafe extern "C" fn(
            str_: *mut ::core::ffi::c_char,
            pos: ::core::ffi::c_int,
            length: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnGetRenderers: ::core::option::Option<
        unsafe extern "C" fn(
            num: ::core::ffi::c_uint,
            short_name: *mut ::core::ffi::c_char,
            size1: usize,
            long_name: *mut ::core::ffi::c_char,
            size2: usize,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnDoubleTime: ::core::option::Option<unsafe extern "C" fn() -> f64>,
    pub pfnParseFile: ::core::option::Option<
        unsafe extern "C" fn(
            data: *mut ::core::ffi::c_char,
            buf: *mut ::core::ffi::c_char,
            size: ::core::ffi::c_int,
            flags: ::core::ffi::c_uint,
            len: *mut ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_char,
    >,
    pub pfnAdrToString:
        ::core::option::Option<unsafe extern "C" fn(a: netadr_s) -> *const ::core::ffi::c_char>,
    pub pfnCompareAdr: ::core::option::Option<
        unsafe extern "C" fn(
            a: *const ::core::ffi::c_void,
            b: *const ::core::ffi::c_void,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnGetNativeObject: ::core::option::Option<
        unsafe extern "C" fn(name: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_void,
    >,
    pub pNetAPI: *mut net_api_s,
    pub pfnGetGameInfo: ::core::option::Option<
        unsafe extern "C" fn(gi_version: ::core::ffi::c_int) -> *mut gameinfo2_t,
    >,
    pub pfnGetModInfo: ::core::option::Option<
        unsafe extern "C" fn(
            gi_version: ::core::ffi::c_int,
            mod_index: ::core::ffi::c_int,
        ) -> *mut gameinfo2_t,
    >,
    pub pfnIsCvarReadOnly: ::core::option::Option<
        unsafe extern "C" fn(name: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
}
pub type ui_extendedfuncs_t = ui_extendedfuncs_s;
pub type ADDTOUCHBUTTONTOLIST = ::core::option::Option<
    unsafe extern "C" fn(
        name: *const ::core::ffi::c_char,
        texture: *const ::core::ffi::c_char,
        command: *const ::core::ffi::c_char,
        color: *mut ::core::ffi::c_uchar,
        flags: ::core::ffi::c_int,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UI_EXTENDED_FUNCTIONS {
    pub pfnAddTouchButtonToList: ADDTOUCHBUTTONTOLIST,
    pub pfnResetPing: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnShowConnectionWarning: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnShowUpdateDialog:
        ::core::option::Option<unsafe extern "C" fn(preferStore: ::core::ffi::c_int)>,
    pub pfnShowMessageBox:
        ::core::option::Option<unsafe extern "C" fn(text: *const ::core::ffi::c_char)>,
    pub pfnConnectionProgress_Disconnect: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnConnectionProgress_Download: ::core::option::Option<
        unsafe extern "C" fn(
            pszFileName: *const ::core::ffi::c_char,
            pszServerName: *const ::core::ffi::c_char,
            iCurrent: ::core::ffi::c_int,
            iTotal: ::core::ffi::c_int,
            comment: *const ::core::ffi::c_char,
        ),
    >,
    pub pfnConnectionProgress_DownloadEnd: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnConnectionProgress_Precache: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnConnectionProgress_Connect:
        ::core::option::Option<unsafe extern "C" fn(server: *const ::core::ffi::c_char)>,
    pub pfnConnectionProgress_ChangeLevel: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnConnectionProgress_ParseServerInfo:
        ::core::option::Option<unsafe extern "C" fn(server: *const ::core::ffi::c_char)>,
}
pub type MENUAPI = ::core::option::Option<
    unsafe extern "C" fn(
        pFunctionTable: *mut UI_FUNCTIONS,
        engfuncs: *mut ui_enginefuncs_t,
        pGlobals: *mut ui_globalvars_t,
    ) -> ::core::ffi::c_int,
>;
pub type UIEXTENEDEDAPI = ::core::option::Option<
    unsafe extern "C" fn(
        version: ::core::ffi::c_int,
        pFunctionTable: *mut UI_EXTENDED_FUNCTIONS,
        engfuncs: *mut ui_extendedfuncs_t,
    ) -> ::core::ffi::c_int,
>;
pub type UITEXTAPI = ::core::option::Option<
    unsafe extern "C" fn(engfuncs: *mut ui_extendedfuncs_t) -> ::core::ffi::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grasshdr_s {
    pub _address: u8,
}
