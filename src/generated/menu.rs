/* automatically generated by rust-bindgen 0.72.0 */

pub const GFL_NOMODELS: i32 = 1;
pub const GFL_NOSKILLS: i32 = 2;
pub const GFL_RENDER_PICBUTTON_TEXT: i32 = 4;
pub const GFL_HD_BACKGROUND: i32 = 8;
pub const GFL_ANIMATED_TITLE: i32 = 16;
pub const GAMEINFO_VERSION: i32 = 2;
pub const PIC_NEAREST: i32 = 1;
pub const PIC_KEEP_SOURCE: i32 = 2;
pub const PIC_NOFLIP_TGA: i32 = 4;
pub const PIC_EXPAND_SOURCE: i32 = 8;
pub const PFILE_IGNOREBRACKET: i32 = 1;
pub const PFILE_HANDLECOLON: i32 = 2;
pub const PFILE_IGNOREHASHCMT: i32 = 4;
pub const MENU_EXTENDED_API_VERSION: i32 = 1;
#[allow(unsafe_code)]
pub const PLATFORM_UPDATE_PAGE: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"PlatformUpdatePage\0") };
#[allow(unsafe_code)]
pub const GENERIC_UPDATE_PAGE: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"GenericUpdatePage\0") };
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GAMEINFO_s {
    pub gamefolder: [::core::ffi::c_char; 64usize],
    pub startmap: [::core::ffi::c_char; 64usize],
    pub trainmap: [::core::ffi::c_char; 64usize],
    pub title: [::core::ffi::c_char; 64usize],
    pub version: [::core::ffi::c_char; 14usize],
    pub flags: ::core::ffi::c_short,
    pub game_url: [::core::ffi::c_char; 256usize],
    pub update_url: [::core::ffi::c_char; 256usize],
    pub type_: [::core::ffi::c_char; 64usize],
    pub date: [::core::ffi::c_char; 64usize],
    pub size: [::core::ffi::c_char; 64usize],
    pub gamemode: ::core::ffi::c_int,
}
pub type GAMEINFO = GAMEINFO_s;
pub const gametype_e_GAME_NORMAL: gametype_e = 0;
pub const gametype_e_GAME_SINGLEPLAYER_ONLY: gametype_e = 1;
pub const gametype_e_GAME_MULTIPLAYER_ONLY: gametype_e = 2;
pub type gametype_e = ::core::ffi::c_uint;
pub use self::gametype_e as gametype_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gameinfo2_s {
    pub gi_version: ::core::ffi::c_int,
    pub gamefolder: [::core::ffi::c_char; 64usize],
    pub startmap: [::core::ffi::c_char; 64usize],
    pub trainmap: [::core::ffi::c_char; 64usize],
    pub demomap: [::core::ffi::c_char; 64usize],
    pub title: [::core::ffi::c_char; 64usize],
    pub iconpath: [::core::ffi::c_char; 64usize],
    pub version: [::core::ffi::c_char; 16usize],
    pub flags: u32,
    pub game_url: [::core::ffi::c_char; 256usize],
    pub update_url: [::core::ffi::c_char; 256usize],
    pub type_: [::core::ffi::c_char; 64usize],
    pub date: [::core::ffi::c_char; 64usize],
    pub size: u64,
    pub gamemode: gametype_t,
}
pub type gameinfo2_t = gameinfo2_s;
pub type HIMAGE = ::core::ffi::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ui_globalvars_s {
    pub time: f32,
    pub frametime: f32,
    pub scrWidth: ::core::ffi::c_int,
    pub scrHeight: ::core::ffi::c_int,
    pub maxClients: ::core::ffi::c_int,
    pub developer: ::core::ffi::c_int,
    pub demoplayback: ::core::ffi::c_int,
    pub demorecording: ::core::ffi::c_int,
    pub demoname: [::core::ffi::c_char; 64usize],
    pub maptitle: [::core::ffi::c_char; 64usize],
}
pub type ui_globalvars_t = ui_globalvars_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ui_enginefuncs_s {
    pub pfnPIC_Load: ::core::option::Option<
        unsafe extern "C" fn(
            szPicName: *const ::core::ffi::c_char,
            ucRawImage: *const byte,
            ulRawImageSize: ::core::ffi::c_int,
            flags: ::core::ffi::c_int,
        ) -> HIMAGE,
    >,
    pub pfnPIC_Free:
        ::core::option::Option<unsafe extern "C" fn(szPicName: *const ::core::ffi::c_char)>,
    pub pfnPIC_Width:
        ::core::option::Option<unsafe extern "C" fn(hPic: HIMAGE) -> ::core::ffi::c_int>,
    pub pfnPIC_Height:
        ::core::option::Option<unsafe extern "C" fn(hPic: HIMAGE) -> ::core::ffi::c_int>,
    pub pfnPIC_Set: ::core::option::Option<
        unsafe extern "C" fn(
            hPic: HIMAGE,
            r: ::core::ffi::c_int,
            g: ::core::ffi::c_int,
            b: ::core::ffi::c_int,
            a: ::core::ffi::c_int,
        ),
    >,
    pub pfnPIC_Draw: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
            prc: *const wrect_t,
        ),
    >,
    pub pfnPIC_DrawHoles: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
            prc: *const wrect_t,
        ),
    >,
    pub pfnPIC_DrawTrans: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
            prc: *const wrect_t,
        ),
    >,
    pub pfnPIC_DrawAdditive: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
            prc: *const wrect_t,
        ),
    >,
    pub pfnPIC_EnableScissor: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
        ),
    >,
    pub pfnPIC_DisableScissor: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnFillRGBA: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
            r: ::core::ffi::c_int,
            g: ::core::ffi::c_int,
            b: ::core::ffi::c_int,
            a: ::core::ffi::c_int,
        ),
    >,
    pub pfnRegisterVariable: ::core::option::Option<
        unsafe extern "C" fn(
            szName: *const ::core::ffi::c_char,
            szValue: *const ::core::ffi::c_char,
            flags: ::core::ffi::c_int,
        ) -> *mut cvar_t,
    >,
    pub pfnGetCvarFloat:
        ::core::option::Option<unsafe extern "C" fn(szName: *const ::core::ffi::c_char) -> f32>,
    pub pfnGetCvarString: ::core::option::Option<
        unsafe extern "C" fn(szName: *const ::core::ffi::c_char) -> *const ::core::ffi::c_char,
    >,
    pub pfnCvarSetString: ::core::option::Option<
        unsafe extern "C" fn(
            szName: *const ::core::ffi::c_char,
            szValue: *const ::core::ffi::c_char,
        ),
    >,
    pub pfnCvarSetValue: ::core::option::Option<
        unsafe extern "C" fn(szName: *const ::core::ffi::c_char, flValue: f32),
    >,
    pub pfnAddCommand: ::core::option::Option<
        unsafe extern "C" fn(
            cmd_name: *const ::core::ffi::c_char,
            function: ::core::option::Option<unsafe extern "C" fn()>,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnClientCmd: ::core::option::Option<
        unsafe extern "C" fn(
            execute_now: ::core::ffi::c_int,
            szCmdString: *const ::core::ffi::c_char,
        ),
    >,
    pub pfnDelCommand:
        ::core::option::Option<unsafe extern "C" fn(cmd_name: *const ::core::ffi::c_char)>,
    pub pfnCmdArgc: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnCmdArgv: ::core::option::Option<
        unsafe extern "C" fn(argc: ::core::ffi::c_int) -> *const ::core::ffi::c_char,
    >,
    pub pfnCmd_Args: ::core::option::Option<unsafe extern "C" fn() -> *const ::core::ffi::c_char>,
    pub Con_Printf:
        ::core::option::Option<unsafe extern "C" fn(fmt: *const ::core::ffi::c_char, ...)>,
    pub Con_DPrintf:
        ::core::option::Option<unsafe extern "C" fn(fmt: *const ::core::ffi::c_char, ...)>,
    pub Con_NPrintf: ::core::option::Option<
        unsafe extern "C" fn(pos: ::core::ffi::c_int, fmt: *const ::core::ffi::c_char, ...),
    >,
    pub Con_NXPrintf: ::core::option::Option<
        unsafe extern "C" fn(info: *mut con_nprint_s, fmt: *const ::core::ffi::c_char, ...),
    >,
    pub pfnPlayLocalSound:
        ::core::option::Option<unsafe extern "C" fn(szSound: *const ::core::ffi::c_char)>,
    pub pfnDrawLogo: ::core::option::Option<
        unsafe extern "C" fn(
            filename: *const ::core::ffi::c_char,
            x: f32,
            y: f32,
            width: f32,
            height: f32,
        ),
    >,
    pub pfnGetLogoWidth: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnGetLogoHeight: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnGetLogoLength: ::core::option::Option<unsafe extern "C" fn() -> f32>,
    pub pfnDrawCharacter: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
            ch: ::core::ffi::c_int,
            ulRGBA: ::core::ffi::c_int,
            hFont: HIMAGE,
        ),
    >,
    pub pfnDrawConsoleString: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            string: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnDrawSetTextColor: ::core::option::Option<
        unsafe extern "C" fn(
            r: ::core::ffi::c_int,
            g: ::core::ffi::c_int,
            b: ::core::ffi::c_int,
            alpha: ::core::ffi::c_int,
        ),
    >,
    pub pfnDrawConsoleStringLen: ::core::option::Option<
        unsafe extern "C" fn(
            string: *const ::core::ffi::c_char,
            length: *mut ::core::ffi::c_int,
            height: *mut ::core::ffi::c_int,
        ),
    >,
    pub pfnSetConsoleDefaultColor: ::core::option::Option<
        unsafe extern "C" fn(r: ::core::ffi::c_int, g: ::core::ffi::c_int, b: ::core::ffi::c_int),
    >,
    pub pfnGetPlayerModel: ::core::option::Option<unsafe extern "C" fn() -> *mut cl_entity_s>,
    pub pfnSetModel: ::core::option::Option<
        unsafe extern "C" fn(ed: *mut cl_entity_s, path: *const ::core::ffi::c_char),
    >,
    pub pfnClearScene: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnRenderScene: ::core::option::Option<unsafe extern "C" fn(rvp: *const ref_viewpass_s)>,
    pub CL_CreateVisibleEntity: ::core::option::Option<
        unsafe extern "C" fn(
            type_: ::core::ffi::c_int,
            ent: *mut cl_entity_s,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnHostError:
        ::core::option::Option<unsafe extern "C" fn(szFmt: *const ::core::ffi::c_char, ...)>,
    pub pfnFileExists: ::core::option::Option<
        unsafe extern "C" fn(
            filename: *const ::core::ffi::c_char,
            gamedironly: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnGetGameDir:
        ::core::option::Option<unsafe extern "C" fn(szGetGameDir: *mut ::core::ffi::c_char)>,
    pub pfnCreateMapsList: ::core::option::Option<
        unsafe extern "C" fn(fRefresh: ::core::ffi::c_int) -> ::core::ffi::c_int,
    >,
    pub pfnClientInGame: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnClientJoin: ::core::option::Option<unsafe extern "C" fn(adr: netadr_s)>,
    pub COM_LoadFile: ::core::option::Option<
        unsafe extern "C" fn(
            filename: *const ::core::ffi::c_char,
            pLength: *mut ::core::ffi::c_int,
        ) -> *mut byte,
    >,
    pub COM_ParseFile: ::core::option::Option<
        unsafe extern "C" fn(
            data: *mut ::core::ffi::c_char,
            token: *mut ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char,
    >,
    pub COM_FreeFile:
        ::core::option::Option<unsafe extern "C" fn(buffer: *mut ::core::ffi::c_void)>,
    pub pfnKeyClearStates: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnSetKeyDest: ::core::option::Option<unsafe extern "C" fn(dest: ::core::ffi::c_int)>,
    pub pfnKeynumToString: ::core::option::Option<
        unsafe extern "C" fn(keynum: ::core::ffi::c_int) -> *const ::core::ffi::c_char,
    >,
    pub pfnKeyGetBinding: ::core::option::Option<
        unsafe extern "C" fn(keynum: ::core::ffi::c_int) -> *const ::core::ffi::c_char,
    >,
    pub pfnKeySetBinding: ::core::option::Option<
        unsafe extern "C" fn(keynum: ::core::ffi::c_int, binding: *const ::core::ffi::c_char),
    >,
    pub pfnKeyIsDown: ::core::option::Option<
        unsafe extern "C" fn(keynum: ::core::ffi::c_int) -> ::core::ffi::c_int,
    >,
    pub pfnKeyGetOverstrikeMode:
        ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnKeySetOverstrikeMode:
        ::core::option::Option<unsafe extern "C" fn(fActive: ::core::ffi::c_int)>,
    pub pfnKeyGetState: ::core::option::Option<
        unsafe extern "C" fn(name: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_void,
    >,
    pub pfnMemAlloc: ::core::option::Option<
        unsafe extern "C" fn(
            cb: usize,
            filename: *const ::core::ffi::c_char,
            fileline: ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_void,
    >,
    pub pfnMemFree: ::core::option::Option<
        unsafe extern "C" fn(
            mem: *mut ::core::ffi::c_void,
            filename: *const ::core::ffi::c_char,
            fileline: ::core::ffi::c_int,
        ),
    >,
    pub pfnGetGameInfo: ::core::option::Option<
        unsafe extern "C" fn(pgameinfo: *mut GAMEINFO) -> ::core::ffi::c_int,
    >,
    pub pfnGetGamesList: ::core::option::Option<
        unsafe extern "C" fn(numGames: *mut ::core::ffi::c_int) -> *mut *mut GAMEINFO,
    >,
    pub pfnGetFilesList: ::core::option::Option<
        unsafe extern "C" fn(
            pattern: *const ::core::ffi::c_char,
            numFiles: *mut ::core::ffi::c_int,
            gamedironly: ::core::ffi::c_int,
        ) -> *mut *mut ::core::ffi::c_char,
    >,
    pub pfnGetSaveComment: ::core::option::Option<
        unsafe extern "C" fn(
            savename: *const ::core::ffi::c_char,
            comment: *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnGetDemoComment: ::core::option::Option<
        unsafe extern "C" fn(
            demoname: *const ::core::ffi::c_char,
            comment: *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnCheckGameDll: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnGetClipboardData:
        ::core::option::Option<unsafe extern "C" fn() -> *mut ::core::ffi::c_char>,
    pub pfnShellExecute: ::core::option::Option<
        unsafe extern "C" fn(
            name: *const ::core::ffi::c_char,
            args: *const ::core::ffi::c_char,
            closeEngine: ::core::ffi::c_int,
        ),
    >,
    pub pfnWriteServerConfig:
        ::core::option::Option<unsafe extern "C" fn(name: *const ::core::ffi::c_char)>,
    pub pfnChangeInstance: ::core::option::Option<
        unsafe extern "C" fn(
            newInstance: *const ::core::ffi::c_char,
            szFinalMessage: *const ::core::ffi::c_char,
        ),
    >,
    pub pfnPlayBackgroundTrack: ::core::option::Option<
        unsafe extern "C" fn(
            introName: *const ::core::ffi::c_char,
            loopName: *const ::core::ffi::c_char,
        ),
    >,
    pub pfnHostEndGame:
        ::core::option::Option<unsafe extern "C" fn(szFinalMessage: *const ::core::ffi::c_char)>,
    pub pfnRandomFloat:
        ::core::option::Option<unsafe extern "C" fn(flLow: f32, flHigh: f32) -> f32>,
    pub pfnRandomLong: ::core::option::Option<
        unsafe extern "C" fn(
            lLow: ::core::ffi::c_int,
            lHigh: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnSetCursor:
        ::core::option::Option<unsafe extern "C" fn(hCursor: *mut ::core::ffi::c_void)>,
    pub pfnIsMapValid: ::core::option::Option<
        unsafe extern "C" fn(filename: *mut ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub pfnProcessImage: ::core::option::Option<
        unsafe extern "C" fn(
            texnum: ::core::ffi::c_int,
            gamma: f32,
            topColor: ::core::ffi::c_int,
            bottomColor: ::core::ffi::c_int,
        ),
    >,
    pub pfnCompareFileTime: ::core::option::Option<
        unsafe extern "C" fn(
            filename1: *const ::core::ffi::c_char,
            filename2: *const ::core::ffi::c_char,
            iCompare: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnGetModeString: ::core::option::Option<
        unsafe extern "C" fn(vid_mode: ::core::ffi::c_int) -> *const ::core::ffi::c_char,
    >,
    pub COM_SaveFile: ::core::option::Option<
        unsafe extern "C" fn(
            filename: *const ::core::ffi::c_char,
            data: *const ::core::ffi::c_void,
            len: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub COM_RemoveFile: ::core::option::Option<
        unsafe extern "C" fn(filepath: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
}
pub type ui_enginefuncs_t = ui_enginefuncs_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UI_FUNCTIONS {
    pub pfnVidInit: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnInit: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnShutdown: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnRedraw: ::core::option::Option<unsafe extern "C" fn(flTime: f32)>,
    pub pfnKeyEvent: ::core::option::Option<
        unsafe extern "C" fn(key: ::core::ffi::c_int, down: ::core::ffi::c_int),
    >,
    pub pfnMouseMove:
        ::core::option::Option<unsafe extern "C" fn(x: ::core::ffi::c_int, y: ::core::ffi::c_int)>,
    pub pfnSetActiveMenu: ::core::option::Option<unsafe extern "C" fn(active: ::core::ffi::c_int)>,
    pub pfnAddServerToList: ::core::option::Option<
        unsafe extern "C" fn(adr: netadr_s, info: *const ::core::ffi::c_char),
    >,
    pub pfnGetCursorPos: ::core::option::Option<
        unsafe extern "C" fn(pos_x: *mut ::core::ffi::c_int, pos_y: *mut ::core::ffi::c_int),
    >,
    pub pfnSetCursorPos: ::core::option::Option<
        unsafe extern "C" fn(pos_x: ::core::ffi::c_int, pos_y: ::core::ffi::c_int),
    >,
    pub pfnShowCursor: ::core::option::Option<unsafe extern "C" fn(show: ::core::ffi::c_int)>,
    pub pfnCharEvent: ::core::option::Option<unsafe extern "C" fn(key: ::core::ffi::c_int)>,
    pub pfnMouseInRect: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnIsVisible: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnCreditsActive: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnFinalCredits: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ui_extendedfuncs_s {
    pub pfnEnableTextInput:
        ::core::option::Option<unsafe extern "C" fn(enable: ::core::ffi::c_int)>,
    pub pfnUtfProcessChar:
        ::core::option::Option<unsafe extern "C" fn(ch: ::core::ffi::c_int) -> ::core::ffi::c_int>,
    pub pfnUtfMoveLeft: ::core::option::Option<
        unsafe extern "C" fn(
            str_: *mut ::core::ffi::c_char,
            pos: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnUtfMoveRight: ::core::option::Option<
        unsafe extern "C" fn(
            str_: *mut ::core::ffi::c_char,
            pos: ::core::ffi::c_int,
            length: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnGetRenderers: ::core::option::Option<
        unsafe extern "C" fn(
            num: ::core::ffi::c_uint,
            short_name: *mut ::core::ffi::c_char,
            size1: usize,
            long_name: *mut ::core::ffi::c_char,
            size2: usize,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnDoubleTime: ::core::option::Option<unsafe extern "C" fn() -> f64>,
    pub pfnParseFile: ::core::option::Option<
        unsafe extern "C" fn(
            data: *mut ::core::ffi::c_char,
            buf: *mut ::core::ffi::c_char,
            size: ::core::ffi::c_int,
            flags: ::core::ffi::c_uint,
            len: *mut ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_char,
    >,
    pub pfnAdrToString:
        ::core::option::Option<unsafe extern "C" fn(a: netadr_s) -> *const ::core::ffi::c_char>,
    pub pfnCompareAdr: ::core::option::Option<
        unsafe extern "C" fn(
            a: *const ::core::ffi::c_void,
            b: *const ::core::ffi::c_void,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnGetNativeObject: ::core::option::Option<
        unsafe extern "C" fn(name: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_void,
    >,
    pub pNetAPI: *mut net_api_s,
    pub pfnGetGameInfo: ::core::option::Option<
        unsafe extern "C" fn(gi_version: ::core::ffi::c_int) -> *mut gameinfo2_t,
    >,
    pub pfnGetModInfo: ::core::option::Option<
        unsafe extern "C" fn(
            gi_version: ::core::ffi::c_int,
            mod_index: ::core::ffi::c_int,
        ) -> *mut gameinfo2_t,
    >,
    pub pfnIsCvarReadOnly: ::core::option::Option<
        unsafe extern "C" fn(name: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
}
pub type ui_extendedfuncs_t = ui_extendedfuncs_s;
pub type ADDTOUCHBUTTONTOLIST = ::core::option::Option<
    unsafe extern "C" fn(
        name: *const ::core::ffi::c_char,
        texture: *const ::core::ffi::c_char,
        command: *const ::core::ffi::c_char,
        color: *mut ::core::ffi::c_uchar,
        flags: ::core::ffi::c_int,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UI_EXTENDED_FUNCTIONS {
    pub pfnAddTouchButtonToList: ADDTOUCHBUTTONTOLIST,
    pub pfnResetPing: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnShowConnectionWarning: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnShowUpdateDialog:
        ::core::option::Option<unsafe extern "C" fn(preferStore: ::core::ffi::c_int)>,
    pub pfnShowMessageBox:
        ::core::option::Option<unsafe extern "C" fn(text: *const ::core::ffi::c_char)>,
    pub pfnConnectionProgress_Disconnect: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnConnectionProgress_Download: ::core::option::Option<
        unsafe extern "C" fn(
            pszFileName: *const ::core::ffi::c_char,
            pszServerName: *const ::core::ffi::c_char,
            iCurrent: ::core::ffi::c_int,
            iTotal: ::core::ffi::c_int,
            comment: *const ::core::ffi::c_char,
        ),
    >,
    pub pfnConnectionProgress_DownloadEnd: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnConnectionProgress_Precache: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnConnectionProgress_Connect:
        ::core::option::Option<unsafe extern "C" fn(server: *const ::core::ffi::c_char)>,
    pub pfnConnectionProgress_ChangeLevel: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnConnectionProgress_ParseServerInfo:
        ::core::option::Option<unsafe extern "C" fn(server: *const ::core::ffi::c_char)>,
}
pub type MENUAPI = ::core::option::Option<
    unsafe extern "C" fn(
        pFunctionTable: *mut UI_FUNCTIONS,
        engfuncs: *mut ui_enginefuncs_t,
        pGlobals: *mut ui_globalvars_t,
    ) -> ::core::ffi::c_int,
>;
pub type UIEXTENEDEDAPI = ::core::option::Option<
    unsafe extern "C" fn(
        version: ::core::ffi::c_int,
        pFunctionTable: *mut UI_EXTENDED_FUNCTIONS,
        engfuncs: *mut ui_extendedfuncs_t,
    ) -> ::core::ffi::c_int,
>;
pub type UITEXTAPI = ::core::option::Option<
    unsafe extern "C" fn(engfuncs: *mut ui_extendedfuncs_t) -> ::core::ffi::c_int,
>;
