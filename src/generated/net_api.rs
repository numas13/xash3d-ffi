/* automatically generated by rust-bindgen 0.72.0 */

pub const NETAPI_REQUEST_SERVERLIST: i32 = 0;
pub const NETAPI_REQUEST_PING: i32 = 1;
pub const NETAPI_REQUEST_RULES: i32 = 2;
pub const NETAPI_REQUEST_PLAYERS: i32 = 3;
pub const NETAPI_REQUEST_DETAILS: i32 = 4;
pub const FNETAPI_MULTIPLE_RESPONSE: i32 = 1;
pub const FNETAPI_LEGACY_PROTOCOL: i32 = 2;
pub const NET_SUCCESS: i32 = 0;
pub const NET_ERROR_TIMEOUT: i32 = 1;
pub const NET_ERROR_PROTO_UNSUPPORTED: i32 = 2;
pub const NET_ERROR_UNDEFINED: i32 = 4;
pub const NET_ERROR_FORBIDDEN: i32 = 8;
pub type net_api_response_func_t =
    ::core::option::Option<unsafe extern "C" fn(response: *mut net_response_s)>;
#[repr(C)]
pub struct net_adrlist_s {
    pub next: *mut net_adrlist_s,
    pub remote_address: netadr_t,
}
pub type net_adrlist_t = net_adrlist_s;
#[repr(C)]
pub struct net_response_s {
    pub error: ::core::ffi::c_int,
    pub context: ::core::ffi::c_int,
    pub type_: ::core::ffi::c_int,
    pub remote_address: netadr_t,
    pub ping: f64,
    pub response: *mut ::core::ffi::c_void,
}
pub type net_response_t = net_response_s;
#[repr(C)]
pub struct net_status_s {
    pub connected: ::core::ffi::c_int,
    pub local_address: netadr_t,
    pub remote_address: netadr_t,
    pub packet_loss: ::core::ffi::c_int,
    pub latency: f64,
    pub connection_time: f64,
    pub rate: f64,
}
pub type net_status_t = net_status_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct net_api_s {
    pub InitNetworking: ::core::option::Option<unsafe extern "C" fn()>,
    pub Status: ::core::option::Option<unsafe extern "C" fn(status: *mut net_status_s)>,
    pub SendRequest: ::core::option::Option<
        unsafe extern "C" fn(
            context: ::core::ffi::c_int,
            request: ::core::ffi::c_int,
            flags: ::core::ffi::c_int,
            timeout: f64,
            remote_address: *mut netadr_s,
            response: net_api_response_func_t,
        ),
    >,
    pub CancelRequest: ::core::option::Option<unsafe extern "C" fn(context: ::core::ffi::c_int)>,
    pub CancelAllRequests: ::core::option::Option<unsafe extern "C" fn()>,
    pub AdrToString: ::core::option::Option<
        unsafe extern "C" fn(a: *mut netadr_s) -> *const ::core::ffi::c_char,
    >,
    pub CompareAdr: ::core::option::Option<
        unsafe extern "C" fn(a: *mut netadr_s, b: *mut netadr_s) -> ::core::ffi::c_int,
    >,
    pub StringToAdr: ::core::option::Option<
        unsafe extern "C" fn(s: *mut ::core::ffi::c_char, a: *mut netadr_s) -> ::core::ffi::c_int,
    >,
    pub ValueForKey: ::core::option::Option<
        unsafe extern "C" fn(
            s: *const ::core::ffi::c_char,
            key: *const ::core::ffi::c_char,
        ) -> *const ::core::ffi::c_char,
    >,
    pub RemoveKey: ::core::option::Option<
        unsafe extern "C" fn(s: *mut ::core::ffi::c_char, key: *const ::core::ffi::c_char),
    >,
    pub SetValueForKey: ::core::option::Option<
        unsafe extern "C" fn(
            s: *mut ::core::ffi::c_char,
            key: *const ::core::ffi::c_char,
            value: *const ::core::ffi::c_char,
            maxsize: ::core::ffi::c_int,
        ),
    >,
}
pub type net_api_t = net_api_s;
