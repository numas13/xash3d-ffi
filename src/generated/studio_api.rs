/* automatically generated by rust-bindgen 0.72.0 */

pub const STUDIO_INTERFACE_VERSION: i32 = 1;
pub const SV_BLENDING_INTERFACE_VERSION: i32 = 1;
pub const STUDIO_VERSION: i32 = 10;
pub const MAXSTUDIOVERTS: i32 = 16384;
pub const MAXSTUDIOSEQUENCES: i32 = 256;
pub const MAXSTUDIOSKINS: i32 = 256;
pub const MAXSTUDIOSRCBONES: i32 = 512;
pub const MAXSTUDIOBONES: i32 = 128;
pub const MAXSTUDIOMODELS: i32 = 32;
pub const MAXSTUDIOBODYPARTS: i32 = 32;
pub const MAXSTUDIOGROUPS: i32 = 16;
pub const MAXSTUDIOMESHES: i32 = 256;
pub const MAXSTUDIOCONTROLLERS: i32 = 32;
pub const MAXSTUDIOATTACHMENTS: i32 = 64;
pub const MAXSTUDIOBONEWEIGHTS: i32 = 4;
pub const MAXSTUDIONAME: i32 = 32;
pub const MAXSTUDIOPOSEPARAM: i32 = 24;
pub const MAX_STUDIO_LIGHTMAP_SIZE: i32 = 256;
pub const STUDIO_ROCKET: i32 = 1;
pub const STUDIO_GRENADE: i32 = 2;
pub const STUDIO_GIB: i32 = 4;
pub const STUDIO_ROTATE: i32 = 8;
pub const STUDIO_TRACER: i32 = 16;
pub const STUDIO_ZOMGIB: i32 = 32;
pub const STUDIO_TRACER2: i32 = 64;
pub const STUDIO_TRACER3: i32 = 128;
pub const STUDIO_AMBIENT_LIGHT: i32 = 256;
pub const STUDIO_TRACE_HITBOX: i32 = 512;
pub const STUDIO_FORCE_SKYLIGHT: i32 = 1024;
pub const STUDIO_HAS_BUMP: i32 = 65536;
pub const STUDIO_STATIC_PROP: i32 = 536870912;
pub const STUDIO_HAS_BONEINFO: i32 = 1073741824;
pub const STUDIO_HAS_BONEWEIGHTS: i64 = 2147483648;
pub const STUDIO_NF_FLATSHADE: i32 = 1;
pub const STUDIO_NF_CHROME: i32 = 2;
pub const STUDIO_NF_FULLBRIGHT: i32 = 4;
pub const STUDIO_NF_NOMIPS: i32 = 8;
pub const STUDIO_NF_SMOOTH: i32 = 16;
pub const STUDIO_NF_ADDITIVE: i32 = 32;
pub const STUDIO_NF_MASKED: i32 = 64;
pub const STUDIO_NF_NORMALMAP: i32 = 128;
pub const STUDIO_NF_GLOSSMAP: i32 = 256;
pub const STUDIO_NF_GLOSSPOWER: i32 = 512;
pub const STUDIO_NF_LUMA: i32 = 1024;
pub const STUDIO_NF_ALPHASOLID: i32 = 2048;
pub const STUDIO_NF_TWOSIDE: i32 = 4096;
pub const STUDIO_NF_HEIGHTMAP: i32 = 8192;
pub const STUDIO_NF_NODRAW: i32 = 65536;
pub const STUDIO_NF_NODLIGHT: i32 = 131072;
pub const STUDIO_NF_NOSUNLIGHT: i32 = 262144;
pub const STUDIO_NF_HAS_ALPHA: i32 = 1048576;
pub const STUDIO_NF_HAS_DETAIL: i32 = 2097152;
pub const STUDIO_NF_COLORMAP: i32 = 1073741824;
pub const STUDIO_NF_UV_COORDS: i64 = 2147483648;
pub const STUDIO_X: i32 = 1;
pub const STUDIO_Y: i32 = 2;
pub const STUDIO_Z: i32 = 4;
pub const STUDIO_XR: i32 = 8;
pub const STUDIO_YR: i32 = 16;
pub const STUDIO_ZR: i32 = 32;
pub const STUDIO_LX: i32 = 64;
pub const STUDIO_LY: i32 = 128;
pub const STUDIO_LZ: i32 = 256;
pub const STUDIO_LXR: i32 = 512;
pub const STUDIO_LYR: i32 = 1024;
pub const STUDIO_LZR: i32 = 2048;
pub const STUDIO_LINEAR: i32 = 4096;
pub const STUDIO_QUADRATIC_MOTION: i32 = 8192;
pub const STUDIO_RESERVED: i32 = 16384;
pub const STUDIO_TYPES: i32 = 32767;
pub const STUDIO_RLOOP: i32 = 32768;
pub const STUDIO_MOUTH: i32 = 4;
pub const STUDIO_LOOPING: i32 = 1;
pub const STUDIO_SNAP: i32 = 2;
pub const STUDIO_DELTA: i32 = 4;
pub const STUDIO_AUTOPLAY: i32 = 8;
pub const STUDIO_POST: i32 = 16;
pub const STUDIO_ALLZEROS: i32 = 32;
pub const STUDIO_BLENDPOSE: i32 = 64;
pub const STUDIO_CYCLEPOSE: i32 = 128;
pub const STUDIO_REALTIME: i32 = 256;
pub const STUDIO_LOCAL: i32 = 512;
pub const STUDIO_HIDDEN: i32 = 1024;
pub const STUDIO_IKRULES: i32 = 2048;
pub const STUDIO_ACTIVITY: i32 = 4096;
pub const STUDIO_EVENT: i32 = 8192;
pub const STUDIO_WORLD: i32 = 16384;
pub const STUDIO_LIGHT_FROM_ROOT: i32 = 32768;
pub const STUDIO_AL_POST: i32 = 1;
pub const STUDIO_AL_SPLINE: i32 = 2;
pub const STUDIO_AL_XFADE: i32 = 4;
pub const STUDIO_AL_NOBLEND: i32 = 8;
pub const STUDIO_AL_LOCAL: i32 = 16;
pub const STUDIO_AL_POSE: i32 = 32;
pub const BONE_ALWAYS_PROCEDURAL: i32 = 1;
pub const BONE_SCREEN_ALIGN_SPHERE: i32 = 2;
pub const BONE_SCREEN_ALIGN_CYLINDER: i32 = 4;
pub const BONE_JIGGLE_PROCEDURAL: i32 = 8;
pub const BONE_FIXED_ALIGNMENT: i32 = 16;
pub const BONE_USED_BY_HITBOX: i32 = 256;
pub const BONE_USED_BY_ATTACHMENT: i32 = 512;
pub const BONE_USED_BY_VERTEX: i32 = 1024;
pub const BONE_USED_BY_BONE_MERGE: i32 = 2048;
pub const STUDIO_PROC_AXISINTERP: i32 = 1;
pub const STUDIO_PROC_QUATINTERP: i32 = 2;
pub const STUDIO_PROC_AIMATBONE: i32 = 3;
pub const STUDIO_PROC_AIMATATTACH: i32 = 4;
pub const STUDIO_PROC_JIGGLE: i32 = 5;
pub const JIGGLE_IS_FLEXIBLE: i32 = 1;
pub const JIGGLE_IS_RIGID: i32 = 2;
pub const JIGGLE_HAS_YAW_CONSTRAINT: i32 = 4;
pub const JIGGLE_HAS_PITCH_CONSTRAINT: i32 = 8;
pub const JIGGLE_HAS_ANGLE_CONSTRAINT: i32 = 16;
pub const JIGGLE_HAS_LENGTH_CONSTRAINT: i32 = 32;
pub const JIGGLE_HAS_BASE_SPRING: i32 = 64;
pub const JIGGLE_IS_BOING: i32 = 128;
pub const MAXEVENTSTRING: i32 = 64;
pub const STUDIO_ATTACHMENT_LOCAL: i32 = 1;
pub const IK_SELF: i32 = 1;
pub const IK_WORLD: i32 = 2;
pub const IK_GROUND: i32 = 3;
pub const IK_RELEASE: i32 = 4;
pub const IK_ATTACHMENT: i32 = 5;
pub const IK_UNLATCH: i32 = 6;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct engine_studio_api_s {
    pub Mem_Calloc: ::core::option::Option<
        unsafe extern "C" fn(number: ::core::ffi::c_int, size: usize) -> *mut ::core::ffi::c_void,
    >,
    pub Cache_Check: ::core::option::Option<
        unsafe extern "C" fn(c: *mut cache_user_s) -> *mut ::core::ffi::c_void,
    >,
    pub LoadCacheFile: ::core::option::Option<
        unsafe extern "C" fn(path: *const ::core::ffi::c_char, cu: *mut cache_user_s),
    >,
    pub Mod_ForName: ::core::option::Option<
        unsafe extern "C" fn(
            name: *const ::core::ffi::c_char,
            crash_if_missing: ::core::ffi::c_int,
        ) -> *mut model_s,
    >,
    pub Mod_Extradata: ::core::option::Option<
        unsafe extern "C" fn(mod_: *mut model_s) -> *mut ::core::ffi::c_void,
    >,
    pub GetModelByIndex:
        ::core::option::Option<unsafe extern "C" fn(index: ::core::ffi::c_int) -> *mut model_s>,
    pub GetCurrentEntity: ::core::option::Option<unsafe extern "C" fn() -> *mut cl_entity_s>,
    pub PlayerInfo: ::core::option::Option<
        unsafe extern "C" fn(index: ::core::ffi::c_int) -> *mut player_info_s,
    >,
    pub GetPlayerState: ::core::option::Option<
        unsafe extern "C" fn(index: ::core::ffi::c_int) -> *mut entity_state_s,
    >,
    pub GetViewEntity: ::core::option::Option<unsafe extern "C" fn() -> *mut cl_entity_s>,
    pub GetTimes: ::core::option::Option<
        unsafe extern "C" fn(framecount: *mut ::core::ffi::c_int, current: *mut f64, old: *mut f64),
    >,
    pub GetCvar: ::core::option::Option<
        unsafe extern "C" fn(name: *const ::core::ffi::c_char) -> *mut cvar_s,
    >,
    pub GetViewInfo: ::core::option::Option<
        unsafe extern "C" fn(origin: *mut f32, upv: *mut f32, rightv: *mut f32, vpnv: *mut f32),
    >,
    pub GetChromeSprite: ::core::option::Option<unsafe extern "C" fn() -> *mut model_s>,
    pub GetModelCounters: ::core::option::Option<
        unsafe extern "C" fn(s: *mut *mut ::core::ffi::c_int, a: *mut *mut ::core::ffi::c_int),
    >,
    pub GetAliasScale: ::core::option::Option<unsafe extern "C" fn(x: *mut f32, y: *mut f32)>,
    pub StudioGetBoneTransform:
        ::core::option::Option<unsafe extern "C" fn() -> *mut *mut *mut *mut f32>,
    pub StudioGetLightTransform:
        ::core::option::Option<unsafe extern "C" fn() -> *mut *mut *mut *mut f32>,
    pub StudioGetAliasTransform:
        ::core::option::Option<unsafe extern "C" fn() -> *mut *mut *mut f32>,
    pub StudioGetRotationMatrix:
        ::core::option::Option<unsafe extern "C" fn() -> *mut *mut *mut f32>,
    pub StudioSetupModel: ::core::option::Option<
        unsafe extern "C" fn(
            bodypart: ::core::ffi::c_int,
            ppbodypart: *mut *mut ::core::ffi::c_void,
            ppsubmodel: *mut *mut ::core::ffi::c_void,
        ),
    >,
    pub StudioCheckBBox: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub StudioDynamicLight:
        ::core::option::Option<unsafe extern "C" fn(ent: *mut cl_entity_s, plight: *mut alight_s)>,
    pub StudioEntityLight: ::core::option::Option<unsafe extern "C" fn(plight: *mut alight_s)>,
    pub StudioSetupLighting: ::core::option::Option<unsafe extern "C" fn(plighting: *mut alight_s)>,
    pub StudioDrawPoints: ::core::option::Option<unsafe extern "C" fn()>,
    pub StudioDrawHulls: ::core::option::Option<unsafe extern "C" fn()>,
    pub StudioDrawAbsBBox: ::core::option::Option<unsafe extern "C" fn()>,
    pub StudioDrawBones: ::core::option::Option<unsafe extern "C" fn()>,
    pub StudioSetupSkin: ::core::option::Option<
        unsafe extern "C" fn(ptexturehdr: *mut ::core::ffi::c_void, index: ::core::ffi::c_int),
    >,
    pub StudioSetRemapColors: ::core::option::Option<
        unsafe extern "C" fn(top: ::core::ffi::c_int, bottom: ::core::ffi::c_int),
    >,
    pub SetupPlayerModel:
        ::core::option::Option<unsafe extern "C" fn(index: ::core::ffi::c_int) -> *mut model_s>,
    pub StudioClientEvents: ::core::option::Option<unsafe extern "C" fn()>,
    pub GetForceFaceFlags: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub SetForceFaceFlags: ::core::option::Option<unsafe extern "C" fn(flags: ::core::ffi::c_int)>,
    pub StudioSetHeader:
        ::core::option::Option<unsafe extern "C" fn(header: *mut ::core::ffi::c_void)>,
    pub SetRenderModel: ::core::option::Option<unsafe extern "C" fn(model: *mut model_s)>,
    pub SetupRenderer: ::core::option::Option<unsafe extern "C" fn(rendermode: ::core::ffi::c_int)>,
    pub RestoreRenderer: ::core::option::Option<unsafe extern "C" fn()>,
    pub SetChromeOrigin: ::core::option::Option<unsafe extern "C" fn()>,
    pub IsHardware: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub GL_StudioDrawShadow: ::core::option::Option<unsafe extern "C" fn()>,
    pub GL_SetRenderMode: ::core::option::Option<unsafe extern "C" fn(mode: ::core::ffi::c_int)>,
    pub StudioSetRenderamt:
        ::core::option::Option<unsafe extern "C" fn(iRenderamt: ::core::ffi::c_int)>,
    pub StudioSetCullState: ::core::option::Option<unsafe extern "C" fn(iCull: ::core::ffi::c_int)>,
    pub StudioRenderShadow: ::core::option::Option<
        unsafe extern "C" fn(
            iSprite: ::core::ffi::c_int,
            p1: *mut f32,
            p2: *mut f32,
            p3: *mut f32,
            p4: *mut f32,
        ),
    >,
}
pub type engine_studio_api_t = engine_studio_api_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct server_studio_api_s {
    pub Mem_Calloc: ::core::option::Option<
        unsafe extern "C" fn(number: ::core::ffi::c_int, size: usize) -> *mut ::core::ffi::c_void,
    >,
    pub Cache_Check: ::core::option::Option<
        unsafe extern "C" fn(c: *mut cache_user_s) -> *mut ::core::ffi::c_void,
    >,
    pub LoadCacheFile: ::core::option::Option<
        unsafe extern "C" fn(path: *const ::core::ffi::c_char, cu: *mut cache_user_s),
    >,
    pub Mod_Extradata: ::core::option::Option<
        unsafe extern "C" fn(mod_: *mut model_s) -> *mut ::core::ffi::c_void,
    >,
}
pub type server_studio_api_t = server_studio_api_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct r_studio_interface_s {
    pub version: ::core::ffi::c_int,
    pub StudioDrawModel: ::core::option::Option<
        unsafe extern "C" fn(flags: ::core::ffi::c_int) -> ::core::ffi::c_int,
    >,
    pub StudioDrawPlayer: ::core::option::Option<
        unsafe extern "C" fn(
            flags: ::core::ffi::c_int,
            pplayer: *mut entity_state_s,
        ) -> ::core::ffi::c_int,
    >,
}
pub type r_studio_interface_t = r_studio_interface_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sv_blending_interface_s {
    pub version: ::core::ffi::c_int,
    pub SV_StudioSetupBones: ::core::option::Option<
        unsafe extern "C" fn(
            pModel: *mut model_s,
            frame: f32,
            sequence: ::core::ffi::c_int,
            angles: *const vec3_t,
            origin: *const vec3_t,
            pcontroller: *const byte,
            pblending: *const byte,
            iBone: ::core::ffi::c_int,
            pEdict: *const edict_t,
        ),
    >,
}
pub type sv_blending_interface_t = sv_blending_interface_s;
#[repr(C)]
pub struct studiohdr_s {
    pub ident: i32,
    pub version: i32,
    pub name: [::core::ffi::c_char; 64usize],
    pub length: i32,
    pub eyeposition: vec3_t,
    pub min: vec3_t,
    pub max: vec3_t,
    pub bbmin: vec3_t,
    pub bbmax: vec3_t,
    pub flags: i32,
    pub numbones: i32,
    pub boneindex: i32,
    pub numbonecontrollers: i32,
    pub bonecontrollerindex: i32,
    pub numhitboxes: i32,
    pub hitboxindex: i32,
    pub numseq: i32,
    pub seqindex: i32,
    pub numseqgroups: i32,
    pub seqgroupindex: i32,
    pub numtextures: i32,
    pub textureindex: i32,
    pub texturedataindex: i32,
    pub numskinref: i32,
    pub numskinfamilies: i32,
    pub skinindex: i32,
    pub numbodyparts: i32,
    pub bodypartindex: i32,
    pub numattachments: i32,
    pub attachmentindex: i32,
    pub studiohdr2index: i32,
    pub unused: i32,
    pub unused2: i32,
    pub unused3: i32,
    pub numtransitions: i32,
    pub transitionindex: i32,
}
pub type studiohdr_t = studiohdr_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct studiohdr2_t {
    pub numposeparameters: i32,
    pub poseparamindex: i32,
    pub numikautoplaylocks: i32,
    pub ikautoplaylockindex: i32,
    pub numikchains: i32,
    pub ikchainindex: i32,
    pub keyvalueindex: i32,
    pub keyvaluesize: i32,
    pub numhitboxsets: i32,
    pub hitboxsetindex: i32,
    pub unused: [i32; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct studioseqhdr_t {
    pub id: i32,
    pub version: i32,
    pub name: [::core::ffi::c_char; 64usize],
    pub length: i32,
}
#[repr(C)]
pub struct mstudiobone_s {
    pub name: [::core::ffi::c_char; 32usize],
    pub parent: i32,
    pub unused: i32,
    pub bonecontroller: [i32; 6usize],
    pub value: [vec_t; 6usize],
    pub scale: [vec_t; 6usize],
}
#[repr(C)]
pub struct mstudioaxisinterpbone_t {
    pub control: i32,
    pub axis: i32,
    pub pos: [vec3_t; 6usize],
    pub quat: [vec4_t; 6usize],
}
#[repr(C)]
pub struct mstudioquatinterpinfo_t {
    pub inv_tolerance: vec_t,
    pub trigger: vec4_t,
    pub pos: vec3_t,
    pub quat: vec4_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudioquatinterpbone_t {
    pub control: i32,
    pub numtriggers: i32,
    pub triggerindex: i32,
}
#[repr(C)]
pub struct mstudioboneinfo_t {
    pub poseToBone: [[vec_t; 4usize]; 3usize],
    pub qAlignment: vec4_t,
    pub proctype: i32,
    pub procindex: i32,
    pub quat: vec4_t,
    pub reserved: [i32; 10usize],
}
#[repr(C)]
pub struct mstudiojigglebone_t {
    pub flags: i32,
    pub length: vec_t,
    pub tipMass: vec_t,
    pub yawStiffness: vec_t,
    pub yawDamping: vec_t,
    pub pitchStiffness: vec_t,
    pub pitchDamping: vec_t,
    pub alongStiffness: vec_t,
    pub alongDamping: vec_t,
    pub angleLimit: vec_t,
    pub minYaw: vec_t,
    pub maxYaw: vec_t,
    pub yawFriction: vec_t,
    pub yawBounce: vec_t,
    pub minPitch: vec_t,
    pub maxPitch: vec_t,
    pub pitchFriction: vec_t,
    pub pitchBounce: vec_t,
    pub baseMass: vec_t,
    pub baseStiffness: vec_t,
    pub baseDamping: vec_t,
    pub baseMinLeft: vec_t,
    pub baseMaxLeft: vec_t,
    pub baseLeftFriction: vec_t,
    pub baseMinUp: vec_t,
    pub baseMaxUp: vec_t,
    pub baseUpFriction: vec_t,
    pub baseMinForward: vec_t,
    pub baseMaxForward: vec_t,
    pub baseForwardFriction: vec_t,
    pub boingImpactSpeed: vec_t,
    pub boingImpactAngle: vec_t,
    pub boingDampingRate: vec_t,
    pub boingFrequency: vec_t,
    pub boingAmplitude: vec_t,
}
#[repr(C)]
pub struct mstudioaimatbone_t {
    pub parent: i32,
    pub aim: i32,
    pub aimvector: vec3_t,
    pub upvector: vec3_t,
    pub basepos: vec3_t,
}
#[repr(C)]
pub struct mstudiobonecontroller_t {
    pub bone: i32,
    pub type_: i32,
    pub start: vec_t,
    pub end: vec_t,
    pub unused: i32,
    pub index: i32,
}
#[repr(C)]
pub struct mstudiobbox_t {
    pub bone: i32,
    pub group: i32,
    pub bbmin: vec3_t,
    pub bbmax: vec3_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudiohitboxset_t {
    pub name: [::core::ffi::c_char; 32usize],
    pub numhitboxes: i32,
    pub hitboxindex: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudioseqgroup_t {
    pub label: [::core::ffi::c_char; 32usize],
    pub name: [::core::ffi::c_char; 64usize],
    pub unused: i32,
    pub unused2: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudioevent_s {
    pub frame: i32,
    pub event: i32,
    pub unused: i32,
    pub options: [::core::ffi::c_char; 64usize],
}
pub type mstudioevent_t = mstudioevent_s;
#[repr(C)]
pub struct mstudioattachment_t {
    pub unused: [::core::ffi::c_char; 32usize],
    pub flags: i32,
    pub bone: i32,
    pub org: vec3_t,
    pub vectors: [vec3_t; 3usize],
}
#[repr(C)]
pub struct mstudioikerror_t {
    pub scale: [vec_t; 6usize],
    pub offset: [u16; 6usize],
}
#[repr(C)]
pub struct mstudioikrule_t {
    pub index: i32,
    pub type_: i32,
    pub chain: i32,
    pub bone: i32,
    pub attachment: i32,
    pub slot: i32,
    pub height: vec_t,
    pub radius: vec_t,
    pub floor: vec_t,
    pub pos: vec3_t,
    pub quat: vec4_t,
    pub ikerrorindex: i32,
    pub iStart: i32,
    pub start: vec_t,
    pub peak: vec_t,
    pub tail: vec_t,
    pub end: vec_t,
    pub contact: vec_t,
    pub drop: vec_t,
    pub top: vec_t,
    pub unused: [i32; 4usize],
}
#[repr(C)]
pub struct mstudioiklock_t {
    pub chain: i32,
    pub flPosWeight: vec_t,
    pub flLocalQWeight: vec_t,
    pub flags: i32,
    pub unused: [i32; 4usize],
}
#[repr(C)]
pub struct mstudiomovement_t {
    pub endframe: i32,
    pub motionflags: i32,
    pub v0: vec_t,
    pub v1: vec_t,
    pub angle: vec_t,
    pub vector: vec3_t,
    pub position: vec3_t,
}
#[repr(C)]
pub struct mstudioanimdesc_t {
    pub label: [::core::ffi::c_char; 32usize],
    pub fps: vec_t,
    pub flags: i32,
    pub numframes: i32,
    pub nummovements: i32,
    pub movementindex: i32,
    pub numikrules: i32,
    pub ikruleindex: i32,
    pub unused: [i32; 8usize],
}
#[repr(C)]
pub struct mstudioautolayer_t {
    pub iSequence: i16,
    pub iPose: i16,
    pub flags: i32,
    pub start: vec_t,
    pub peak: vec_t,
    pub tail: vec_t,
    pub end: vec_t,
}
#[repr(C)]
pub struct mstudioseqdesc_s {
    pub label: [::core::ffi::c_char; 32usize],
    pub fps: vec_t,
    pub flags: i32,
    pub activity: i32,
    pub actweight: i32,
    pub numevents: i32,
    pub eventindex: i32,
    pub numframes: i32,
    pub weightlistindex: i32,
    pub iklockindex: i32,
    pub motiontype: i32,
    pub motionbone: i32,
    pub linearmovement: vec3_t,
    pub autolayerindex: i32,
    pub keyvalueindex: i32,
    pub bbmin: vec3_t,
    pub bbmax: vec3_t,
    pub numblends: i32,
    pub animindex: i32,
    pub blendtype: [i32; 2usize],
    pub blendstart: [vec_t; 2usize],
    pub blendend: [vec_t; 2usize],
    pub groupsize: [u8; 2usize],
    pub numautolayers: u8,
    pub numiklocks: u8,
    pub seqgroup: i32,
    pub entrynode: i32,
    pub exitnode: i32,
    pub nodeflags: u8,
    pub cycleposeindex: u8,
    pub fadeintime: u8,
    pub fadeouttime: u8,
    pub animdescindex: i32,
}
pub type mstudioseqdesc_t = mstudioseqdesc_s;
#[repr(C)]
pub struct mstudioposeparamdesc_t {
    pub name: [::core::ffi::c_char; 32usize],
    pub flags: i32,
    pub start: vec_t,
    pub end: vec_t,
    pub loop_: vec_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudioanim_s {
    pub offset: [u16; 6usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mstudioanimvalue_t {
    pub num: mstudioanimvalue_t__bindgen_ty_1,
    pub value: i16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudioanimvalue_t__bindgen_ty_1 {
    pub valid: u8,
    pub total: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudiobodyparts_t {
    pub name: [::core::ffi::c_char; 64usize],
    pub nummodels: i32,
    pub base: i32,
    pub modelindex: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudiotex_s {
    pub name: [::core::ffi::c_char; 64usize],
    pub flags: u32,
    pub width: i32,
    pub height: i32,
    pub index: i32,
}
pub type mstudiotexture_t = mstudiotex_s;
#[repr(C)]
pub struct mstudioiklink_t {
    pub bone: i32,
    pub kneeDir: vec3_t,
    pub unused0: vec3_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudioikchain_t {
    pub name: [::core::ffi::c_char; 32usize],
    pub linktype: i32,
    pub numlinks: i32,
    pub linkindex: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudioboneweight_t {
    pub weight: [u8; 4usize],
    pub bone: [i8; 4usize],
}
#[repr(C)]
pub struct mstudiomodel_t {
    pub name: [::core::ffi::c_char; 64usize],
    pub unused: i32,
    pub unused2: vec_t,
    pub nummesh: i32,
    pub meshindex: i32,
    pub numverts: i32,
    pub vertinfoindex: i32,
    pub vertindex: i32,
    pub numnorms: i32,
    pub norminfoindex: i32,
    pub normindex: i32,
    pub blendvertinfoindex: i32,
    pub blendnorminfoindex: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudiomesh_t {
    pub numtris: i32,
    pub triindex: i32,
    pub skinref: i32,
    pub numnorms: i32,
    pub unused: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstudiotrivert_t {
    pub vertindex: i16,
    pub normindex: i16,
    pub s: i16,
    pub t: i16,
}
