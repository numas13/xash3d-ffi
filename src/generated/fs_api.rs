/* automatically generated by rust-bindgen 0.72.0 */

pub const FS_API_VERSION: i32 = 4;
#[allow(unsafe_code)]
pub const FS_API_CREATEINTERFACE_TAG: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"XashFileSystem004\0") };
#[allow(unsafe_code)]
pub const FILESYSTEM_INTERFACE_VERSION: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"VFileSystem009\0") };
#[allow(unsafe_code)]
pub const GET_FS_API: &::core::ffi::CStr =
    unsafe { ::core::ffi::CStr::from_bytes_with_nul_unchecked(b"GetFSAPI\0") };
pub const FS_STATIC_PATH: _bindgen_ty_7 = 1;
pub const FS_NOWRITE_PATH: _bindgen_ty_7 = 2;
pub const FS_GAMEDIR_PATH: _bindgen_ty_7 = 4;
pub const FS_CUSTOM_PATH: _bindgen_ty_7 = 8;
pub const FS_GAMERODIR_PATH: _bindgen_ty_7 = 16;
pub const FS_SKIP_ARCHIVED_WADS: _bindgen_ty_7 = 32;
pub const FS_LOAD_PACKED_WAD: _bindgen_ty_7 = 64;
pub const FS_MOUNT_HD: _bindgen_ty_7 = 128;
pub const FS_MOUNT_LV: _bindgen_ty_7 = 256;
pub const FS_MOUNT_ADDON: _bindgen_ty_7 = 512;
pub const FS_MOUNT_L10N: _bindgen_ty_7 = 1024;
pub const FS_GAMEDIRONLY_SEARCH_FLAGS: _bindgen_ty_7 = 28;
pub type _bindgen_ty_7 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct searchpath_s {
    _unused: [u8; 0],
}
pub type searchpath_t = searchpath_s;
pub const IAES_ONLY_REAL_ARCHIVES: _bindgen_ty_8 = 1;
pub type _bindgen_ty_8 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct search_t {
    pub numfilenames: ::core::ffi::c_int,
    pub filenames: *mut *mut ::core::ffi::c_char,
    pub filenamesbuffer: *mut ::core::ffi::c_char,
}
#[repr(C)]
pub struct gameinfo_s {
    pub gamefolder: [::core::ffi::c_char; 64usize],
    pub basedir: [::core::ffi::c_char; 64usize],
    pub falldir: [::core::ffi::c_char; 64usize],
    pub startmap: [::core::ffi::c_char; 64usize],
    pub trainmap: [::core::ffi::c_char; 64usize],
    pub title: [::core::ffi::c_char; 64usize],
    pub version: f32,
    pub dll_path: [::core::ffi::c_char; 64usize],
    pub game_dll: [::core::ffi::c_char; 64usize],
    pub iconpath: [::core::ffi::c_char; 64usize],
    pub game_url: string,
    pub update_url: string,
    pub type_: [::core::ffi::c_char; 64usize],
    pub date: [::core::ffi::c_char; 64usize],
    pub size: usize,
    pub gamemode: ::core::ffi::c_int,
    pub secure: qboolean,
    pub nomodels: qboolean,
    pub noskills: qboolean,
    pub render_picbutton_text: qboolean,
    pub internal_vgui_support: qboolean,
    pub sp_entity: [::core::ffi::c_char; 32usize],
    pub mp_entity: [::core::ffi::c_char; 32usize],
    pub mp_filter: [::core::ffi::c_char; 32usize],
    pub ambientsound: [[::core::ffi::c_char; 64usize]; 4usize],
    pub max_edicts: ::core::ffi::c_int,
    pub max_tents: ::core::ffi::c_int,
    pub max_beams: ::core::ffi::c_int,
    pub max_particles: ::core::ffi::c_int,
    pub game_dll_linux: [::core::ffi::c_char; 64usize],
    pub game_dll_osx: [::core::ffi::c_char; 64usize],
    pub added: qboolean,
    pub quicksave_aged_count: ::core::ffi::c_int,
    pub autosave_aged_count: ::core::ffi::c_int,
    pub hd_background: qboolean,
    pub animated_title: qboolean,
    pub demomap: [::core::ffi::c_char; 64usize],
    pub rodir: qboolean,
    pub mtime: i64,
}
pub type gameinfo_t = gameinfo_s;
#[repr(C)]
pub struct fs_dllinfo_t {
    pub fullPath: [::core::ffi::c_char; 2048usize],
    pub shortPath: string,
    pub encrypted: qboolean,
    pub custom_loader: qboolean,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fs_globals_t {
    pub GameInfo: *mut gameinfo_t,
    pub games: [*mut gameinfo_t; 512usize],
    pub numgames: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct file_s {
    _unused: [u8; 0],
}
pub type file_t = file_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fs_api_t {
    pub InitStdio: ::core::option::Option<
        unsafe extern "C" fn(
            unused_set_to_true: qboolean,
            rootdir: *const ::core::ffi::c_char,
            basedir: *const ::core::ffi::c_char,
            gamedir: *const ::core::ffi::c_char,
            rodir: *const ::core::ffi::c_char,
        ) -> qboolean,
    >,
    pub ShutdownStdio: ::core::option::Option<unsafe extern "C" fn()>,
    pub Rescan: ::core::option::Option<
        unsafe extern "C" fn(flags: u32, language: *const ::core::ffi::c_char),
    >,
    pub ClearSearchPath: ::core::option::Option<unsafe extern "C" fn()>,
    pub AllowDirectPaths: ::core::option::Option<unsafe extern "C" fn(enable: qboolean)>,
    pub AddGameDirectory:
        ::core::option::Option<unsafe extern "C" fn(dir: *const ::core::ffi::c_char, flags: uint)>,
    pub AddGameHierarchy:
        ::core::option::Option<unsafe extern "C" fn(dir: *const ::core::ffi::c_char, flags: uint)>,
    pub Search: ::core::option::Option<
        unsafe extern "C" fn(
            pattern: *const ::core::ffi::c_char,
            caseinsensitive: ::core::ffi::c_int,
            gamedironly: ::core::ffi::c_int,
        ) -> *mut search_t,
    >,
    pub SetCurrentDirectory: ::core::option::Option<
        unsafe extern "C" fn(path: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub FindLibrary: ::core::option::Option<
        unsafe extern "C" fn(
            dllname: *const ::core::ffi::c_char,
            directpath: qboolean,
            dllinfo: *mut fs_dllinfo_t,
        ) -> qboolean,
    >,
    pub Path_f: ::core::option::Option<unsafe extern "C" fn()>,
    pub Gamedir: ::core::option::Option<unsafe extern "C" fn() -> *const ::core::ffi::c_char>,
    pub LoadGameInfo: ::core::option::Option<
        unsafe extern "C" fn(flags: u32, language: *const ::core::ffi::c_char),
    >,
    pub Open: ::core::option::Option<
        unsafe extern "C" fn(
            filepath: *const ::core::ffi::c_char,
            mode: *const ::core::ffi::c_char,
            gamedironly: qboolean,
        ) -> *mut file_t,
    >,
    pub Write: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut file_t,
            data: *const ::core::ffi::c_void,
            datasize: usize,
        ) -> fs_offset_t,
    >,
    pub Read: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut file_t,
            buffer: *mut ::core::ffi::c_void,
            buffersize: usize,
        ) -> fs_offset_t,
    >,
    pub Seek: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut file_t,
            offset: fs_offset_t,
            whence: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub Tell: ::core::option::Option<unsafe extern "C" fn(file: *mut file_t) -> fs_offset_t>,
    pub Eof: ::core::option::Option<unsafe extern "C" fn(file: *mut file_t) -> qboolean>,
    pub Flush:
        ::core::option::Option<unsafe extern "C" fn(file: *mut file_t) -> ::core::ffi::c_int>,
    pub Close:
        ::core::option::Option<unsafe extern "C" fn(file: *mut file_t) -> ::core::ffi::c_int>,
    pub Gets: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut file_t,
            string: *mut ::core::ffi::c_char,
            bufsize: usize,
        ) -> ::core::ffi::c_int,
    >,
    pub UnGetc: ::core::option::Option<
        unsafe extern "C" fn(file: *mut file_t, c: ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub Getc: ::core::option::Option<unsafe extern "C" fn(file: *mut file_t) -> ::core::ffi::c_int>,
    pub VPrintf: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut file_t,
            format: *const ::core::ffi::c_char,
            ap: va_list,
        ) -> ::core::ffi::c_int,
    >,
    pub Printf: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut file_t,
            format: *const ::core::ffi::c_char,
            ...
        ) -> ::core::ffi::c_int,
    >,
    pub Print: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut file_t,
            msg: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int,
    >,
    pub FileLength: ::core::option::Option<unsafe extern "C" fn(f: *mut file_t) -> fs_offset_t>,
    pub FileCopy: ::core::option::Option<
        unsafe extern "C" fn(
            pOutput: *mut file_t,
            pInput: *mut file_t,
            fileSize: ::core::ffi::c_int,
        ) -> qboolean,
    >,
    pub LoadFile: ::core::option::Option<
        unsafe extern "C" fn(
            path: *const ::core::ffi::c_char,
            filesizeptr: *mut fs_offset_t,
            gamedironly: qboolean,
        ) -> *mut byte,
    >,
    pub LoadDirectFile: ::core::option::Option<
        unsafe extern "C" fn(
            path: *const ::core::ffi::c_char,
            filesizeptr: *mut fs_offset_t,
        ) -> *mut byte,
    >,
    pub WriteFile: ::core::option::Option<
        unsafe extern "C" fn(
            filename: *const ::core::ffi::c_char,
            data: *const ::core::ffi::c_void,
            len: fs_offset_t,
        ) -> qboolean,
    >,
    pub CRC32_File: ::core::option::Option<
        unsafe extern "C" fn(
            crcvalue: *mut dword,
            filename: *const ::core::ffi::c_char,
        ) -> qboolean,
    >,
    pub MD5_HashFile: ::core::option::Option<
        unsafe extern "C" fn(
            digest: *mut [byte; 16usize],
            pszFileName: *const ::core::ffi::c_char,
            seed: *mut [uint; 4usize],
        ) -> qboolean,
    >,
    pub FileExists: ::core::option::Option<
        unsafe extern "C" fn(
            filename: *const ::core::ffi::c_char,
            gamedironly: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub FileTime: ::core::option::Option<
        unsafe extern "C" fn(
            filename: *const ::core::ffi::c_char,
            gamedironly: qboolean,
        ) -> ::core::ffi::c_int,
    >,
    pub FileSize: ::core::option::Option<
        unsafe extern "C" fn(
            filename: *const ::core::ffi::c_char,
            gamedironly: qboolean,
        ) -> fs_offset_t,
    >,
    pub Rename: ::core::option::Option<
        unsafe extern "C" fn(
            oldname: *const ::core::ffi::c_char,
            newname: *const ::core::ffi::c_char,
        ) -> qboolean,
    >,
    pub Delete:
        ::core::option::Option<unsafe extern "C" fn(path: *const ::core::ffi::c_char) -> qboolean>,
    pub SysFileExists:
        ::core::option::Option<unsafe extern "C" fn(path: *const ::core::ffi::c_char) -> qboolean>,
    pub GetDiskPath: ::core::option::Option<
        unsafe extern "C" fn(
            name: *const ::core::ffi::c_char,
            gamedironly: qboolean,
        ) -> *const ::core::ffi::c_char,
    >,
    pub ArchivePath:
        ::core::option::Option<unsafe extern "C" fn(f: *mut file_t) -> *const ::core::ffi::c_char>,
    pub MountArchive_Fullpath: ::core::option::Option<
        unsafe extern "C" fn(
            path: *const ::core::ffi::c_char,
            flags: ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_void,
    >,
    pub GetFullDiskPath: ::core::option::Option<
        unsafe extern "C" fn(
            buffer: *mut ::core::ffi::c_char,
            size: usize,
            name: *const ::core::ffi::c_char,
            gamedironly: qboolean,
        ) -> qboolean,
    >,
    pub LoadFileMalloc: ::core::option::Option<
        unsafe extern "C" fn(
            path: *const ::core::ffi::c_char,
            filesizeptr: *mut fs_offset_t,
            gamedironly: qboolean,
        ) -> *mut byte,
    >,
    pub IsArchiveExtensionSupported: ::core::option::Option<
        unsafe extern "C" fn(ext: *const ::core::ffi::c_char, flags: uint) -> qboolean,
    >,
    pub GetArchiveByName: ::core::option::Option<
        unsafe extern "C" fn(
            name: *const ::core::ffi::c_char,
            prev: *mut searchpath_t,
        ) -> *mut searchpath_t,
    >,
    pub FindFileInArchive: ::core::option::Option<
        unsafe extern "C" fn(
            sp: *mut searchpath_t,
            path: *const ::core::ffi::c_char,
            outpath: *mut ::core::ffi::c_char,
            len: usize,
        ) -> ::core::ffi::c_int,
    >,
    pub OpenFileFromArchive: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut searchpath_t,
            path: *const ::core::ffi::c_char,
            mode: *const ::core::ffi::c_char,
            pack_ind: ::core::ffi::c_int,
        ) -> *mut file_t,
    >,
    pub LoadFileFromArchive: ::core::option::Option<
        unsafe extern "C" fn(
            sp: *mut searchpath_t,
            path: *const ::core::ffi::c_char,
            pack_ind: ::core::ffi::c_int,
            filesizeptr: *mut fs_offset_t,
            sys_malloc: qboolean,
        ) -> *mut byte,
    >,
    pub GetRootDirectory: ::core::option::Option<
        unsafe extern "C" fn(path: *mut ::core::ffi::c_char, size: usize) -> qboolean,
    >,
    pub MakeGameInfo: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fs_interface_t {
    pub _Con_Printf:
        ::core::option::Option<unsafe extern "C" fn(fmt: *const ::core::ffi::c_char, ...)>,
    pub _Con_DPrintf:
        ::core::option::Option<unsafe extern "C" fn(fmt: *const ::core::ffi::c_char, ...)>,
    pub _Con_Reportf:
        ::core::option::Option<unsafe extern "C" fn(fmt: *const ::core::ffi::c_char, ...)>,
    pub _Sys_Error:
        ::core::option::Option<unsafe extern "C" fn(fmt: *const ::core::ffi::c_char, ...)>,
    pub _Mem_AllocPool: ::core::option::Option<
        unsafe extern "C" fn(
            name: *const ::core::ffi::c_char,
            filename: *const ::core::ffi::c_char,
            fileline: ::core::ffi::c_int,
        ) -> poolhandle_t,
    >,
    pub _Mem_FreePool: ::core::option::Option<
        unsafe extern "C" fn(
            poolptr: *mut poolhandle_t,
            filename: *const ::core::ffi::c_char,
            fileline: ::core::ffi::c_int,
        ),
    >,
    pub _Mem_Alloc: ::core::option::Option<
        unsafe extern "C" fn(
            poolptr: poolhandle_t,
            size: usize,
            clear: qboolean,
            filename: *const ::core::ffi::c_char,
            fileline: ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_void,
    >,
    pub _Mem_Realloc: ::core::option::Option<
        unsafe extern "C" fn(
            poolptr: poolhandle_t,
            memptr: *mut ::core::ffi::c_void,
            size: usize,
            clear: qboolean,
            filename: *const ::core::ffi::c_char,
            fileline: ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_void,
    >,
    pub _Mem_Free: ::core::option::Option<
        unsafe extern "C" fn(
            data: *mut ::core::ffi::c_void,
            filename: *const ::core::ffi::c_char,
            fileline: ::core::ffi::c_int,
        ),
    >,
    pub _Sys_GetNativeObject: ::core::option::Option<
        unsafe extern "C" fn(object: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_void,
    >,
}
pub type FSAPI = ::core::option::Option<
    unsafe extern "C" fn(
        version: ::core::ffi::c_int,
        api: *mut fs_api_t,
        globals: *mut *mut fs_globals_t,
        interface: *const fs_interface_t,
    ) -> ::core::ffi::c_int,
>;
