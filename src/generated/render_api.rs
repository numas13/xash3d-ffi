/* automatically generated by rust-bindgen 0.72.0 */

pub const CL_RENDER_INTERFACE_VERSION: i32 = 37;
pub const MAX_STUDIO_DECALS: i32 = 4096;
pub const PARM_TEX_WIDTH: i32 = 1;
pub const PARM_TEX_HEIGHT: i32 = 2;
pub const PARM_TEX_SRC_WIDTH: i32 = 3;
pub const PARM_TEX_SRC_HEIGHT: i32 = 4;
pub const PARM_TEX_SKYBOX: i32 = 5;
pub const PARM_TEX_SKYTEXNUM: i32 = 6;
pub const PARM_TEX_LIGHTMAP: i32 = 7;
pub const PARM_TEX_TARGET: i32 = 8;
pub const PARM_TEX_TEXNUM: i32 = 9;
pub const PARM_TEX_FLAGS: i32 = 10;
pub const PARM_TEX_DEPTH: i32 = 11;
pub const PARM_TEX_GLFORMAT: i32 = 13;
pub const PARM_TEX_ENCODE: i32 = 14;
pub const PARM_TEX_MIPCOUNT: i32 = 15;
pub const PARM_BSP2_SUPPORTED: i32 = 16;
pub const PARM_SKY_SPHERE: i32 = 17;
pub const PARAM_GAMEPAUSED: i32 = 18;
pub const PARM_MAP_HAS_DELUXE: i32 = 19;
pub const PARM_MAX_ENTITIES: i32 = 20;
pub const PARM_WIDESCREEN: i32 = 21;
pub const PARM_FULLSCREEN: i32 = 22;
pub const PARM_SCREEN_WIDTH: i32 = 23;
pub const PARM_SCREEN_HEIGHT: i32 = 24;
pub const PARM_CLIENT_INGAME: i32 = 25;
pub const PARM_FEATURES: i32 = 26;
pub const PARM_ACTIVE_TMU: i32 = 27;
pub const PARM_LIGHTSTYLEVALUE: i32 = 28;
pub const PARM_MAX_IMAGE_UNITS: i32 = 29;
pub const PARM_CLIENT_ACTIVE: i32 = 30;
pub const PARM_REBUILD_GAMMA: i32 = 31;
pub const PARM_DEDICATED_SERVER: i32 = 32;
pub const PARM_SURF_SAMPLESIZE: i32 = 33;
pub const PARM_GL_CONTEXT_TYPE: i32 = 34;
pub const PARM_GLES_WRAPPER: i32 = 35;
pub const PARM_STENCIL_ACTIVE: i32 = 36;
pub const PARM_WATER_ALPHA: i32 = 37;
pub const PARM_TEX_MEMORY: i32 = 38;
pub const PARM_DELUXEDATA: i32 = 39;
pub const PARM_SHADOWDATA: i32 = 40;
#[repr(C)]
pub struct lightstyle_t {
    pub pattern: [::core::ffi::c_char; 256usize],
    pub map: [f32; 256usize],
    pub length: ::core::ffi::c_int,
    pub value: f32,
    pub interp: qboolean,
    pub time: f32,
}
pub const SKYBOX_RIGHT: _bindgen_ty_10 = 0;
pub const SKYBOX_BACK: _bindgen_ty_10 = 1;
pub const SKYBOX_LEFT: _bindgen_ty_10 = 2;
pub const SKYBOX_FORWARD: _bindgen_ty_10 = 3;
pub const SKYBOX_UP: _bindgen_ty_10 = 4;
pub const SKYBOX_DOWN: _bindgen_ty_10 = 5;
pub type _bindgen_ty_10 = ::core::ffi::c_uint;
pub const texFlags_t_TF_COLORMAP: texFlags_t = 0;
pub const texFlags_t_TF_NEAREST: texFlags_t = 1;
pub const texFlags_t_TF_KEEP_SOURCE: texFlags_t = 2;
pub const texFlags_t_TF_NOFLIP_TGA: texFlags_t = 4;
pub const texFlags_t_TF_EXPAND_SOURCE: texFlags_t = 8;
pub const texFlags_t_TF_RECTANGLE: texFlags_t = 32;
pub const texFlags_t_TF_CUBEMAP: texFlags_t = 64;
pub const texFlags_t_TF_DEPTHMAP: texFlags_t = 128;
pub const texFlags_t_TF_QUAKEPAL: texFlags_t = 256;
pub const texFlags_t_TF_LUMINANCE: texFlags_t = 512;
pub const texFlags_t_TF_SKYSIDE: texFlags_t = 1024;
pub const texFlags_t_TF_CLAMP: texFlags_t = 2048;
pub const texFlags_t_TF_NOMIPMAP: texFlags_t = 4096;
pub const texFlags_t_TF_HAS_LUMA: texFlags_t = 8192;
pub const texFlags_t_TF_MAKELUMA: texFlags_t = 16384;
pub const texFlags_t_TF_NORMALMAP: texFlags_t = 32768;
pub const texFlags_t_TF_HAS_ALPHA: texFlags_t = 65536;
pub const texFlags_t_TF_FORCE_COLOR: texFlags_t = 131072;
pub const texFlags_t_TF_UPDATE: texFlags_t = 262144;
pub const texFlags_t_TF_BORDER: texFlags_t = 524288;
pub const texFlags_t_TF_TEXTURE_3D: texFlags_t = 1048576;
pub const texFlags_t_TF_ATLAS_PAGE: texFlags_t = 2097152;
pub const texFlags_t_TF_ALPHACONTRAST: texFlags_t = 4194304;
pub const texFlags_t_TF_IMG_UPLOADED: texFlags_t = 33554432;
pub const texFlags_t_TF_ARB_FLOAT: texFlags_t = 67108864;
pub const texFlags_t_TF_NOCOMPARE: texFlags_t = 134217728;
pub const texFlags_t_TF_ARB_16BIT: texFlags_t = 268435456;
pub const texFlags_t_TF_MULTISAMPLE: texFlags_t = 536870912;
pub const texFlags_t_TF_ALLOW_NEAREST: texFlags_t = 1073741824;
pub type texFlags_t = ::core::ffi::c_uint;
pub const gl_context_type_t_CONTEXT_TYPE_GL: gl_context_type_t = 0;
pub const gl_context_type_t_CONTEXT_TYPE_GLES_1_X: gl_context_type_t = 1;
pub const gl_context_type_t_CONTEXT_TYPE_GLES_2_X: gl_context_type_t = 2;
pub const gl_context_type_t_CONTEXT_TYPE_GL_CORE: gl_context_type_t = 3;
pub type gl_context_type_t = ::core::ffi::c_uint;
pub const gles_wrapper_t_GLES_WRAPPER_NONE: gles_wrapper_t = 0;
pub const gles_wrapper_t_GLES_WRAPPER_NANOGL: gles_wrapper_t = 1;
pub const gles_wrapper_t_GLES_WRAPPER_WES: gles_wrapper_t = 2;
pub const gles_wrapper_t_GLES_WRAPPER_GL4ES: gles_wrapper_t = 3;
pub type gles_wrapper_t = ::core::ffi::c_uint;
#[repr(C)]
pub struct modelstate_s {
    pub sequence: ::core::ffi::c_short,
    pub frame: ::core::ffi::c_short,
    pub blending: [byte; 2usize],
    pub controller: [byte; 4usize],
    pub poseparam: [byte; 16usize],
    pub body: byte,
    pub skin: byte,
    pub scale: ::core::ffi::c_short,
}
pub type modelstate_t = modelstate_s;
#[repr(C)]
pub struct decallist_s {
    pub position: vec3_t,
    pub name: [::core::ffi::c_char; 64usize],
    pub entityIndex: ::core::ffi::c_short,
    pub depth: byte,
    pub flags: byte,
    pub scale: f32,
    pub impactPlaneNormal: vec3_t,
    pub studio_state: modelstate_t,
}
pub type decallist_t = decallist_s;
pub const movie_parms_e_AVI_PARM_LAST: movie_parms_e = 0;
pub const movie_parms_e_AVI_RENDER_TEXNUM: movie_parms_e = 1;
pub const movie_parms_e_AVI_RENDER_X: movie_parms_e = 2;
pub const movie_parms_e_AVI_RENDER_Y: movie_parms_e = 3;
pub const movie_parms_e_AVI_RENDER_W: movie_parms_e = 4;
pub const movie_parms_e_AVI_RENDER_H: movie_parms_e = 5;
pub const movie_parms_e_AVI_REWIND: movie_parms_e = 6;
pub const movie_parms_e_AVI_ENTNUM: movie_parms_e = 7;
pub const movie_parms_e_AVI_VOLUME: movie_parms_e = 8;
pub const movie_parms_e_AVI_ATTN: movie_parms_e = 9;
pub const movie_parms_e_AVI_PAUSE: movie_parms_e = 10;
pub const movie_parms_e_AVI_RESUME: movie_parms_e = 11;
pub type movie_parms_e = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct movie_state_s {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct render_api_s {
    pub RenderGetParm: ::core::option::Option<
        unsafe extern "C" fn(parm: ::core::ffi::c_int, arg: ::core::ffi::c_int) -> isize,
    >,
    pub GetDetailScaleForTexture: ::core::option::Option<
        unsafe extern "C" fn(texture: ::core::ffi::c_int, xScale: *mut f32, yScale: *mut f32),
    >,
    pub GetExtraParmsForTexture: ::core::option::Option<
        unsafe extern "C" fn(
            texture: ::core::ffi::c_int,
            red: *mut byte,
            green: *mut byte,
            blue: *mut byte,
            alpha: *mut byte,
        ),
    >,
    pub GetLightStyle: ::core::option::Option<
        unsafe extern "C" fn(number: ::core::ffi::c_int) -> *mut lightstyle_t,
    >,
    pub GetDynamicLight:
        ::core::option::Option<unsafe extern "C" fn(number: ::core::ffi::c_int) -> *mut dlight_t>,
    pub GetEntityLight:
        ::core::option::Option<unsafe extern "C" fn(number: ::core::ffi::c_int) -> *mut dlight_t>,
    pub LightToTexGamma: ::core::option::Option<unsafe extern "C" fn(color: byte) -> byte>,
    pub GetFrameTime: ::core::option::Option<unsafe extern "C" fn() -> f32>,
    pub R_SetCurrentEntity: ::core::option::Option<unsafe extern "C" fn(ent: *mut cl_entity_s)>,
    pub R_SetCurrentModel: ::core::option::Option<unsafe extern "C" fn(mod_: *mut model_s)>,
    pub R_FatPVS: ::core::option::Option<
        unsafe extern "C" fn(
            org: *const f32,
            radius: f32,
            visbuffer: *mut byte,
            merge: qboolean,
            fullvis: qboolean,
        ) -> ::core::ffi::c_int,
    >,
    pub R_StoreEfrags: ::core::option::Option<
        unsafe extern "C" fn(ppefrag: *mut *mut efrag_s, framecount: ::core::ffi::c_int),
    >,
    pub GL_FindTexture: ::core::option::Option<
        unsafe extern "C" fn(name: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub GL_TextureName: ::core::option::Option<
        unsafe extern "C" fn(texnum: ::core::ffi::c_uint) -> *const ::core::ffi::c_char,
    >,
    pub GL_TextureData:
        ::core::option::Option<unsafe extern "C" fn(texnum: ::core::ffi::c_uint) -> *const byte>,
    pub GL_LoadTexture: ::core::option::Option<
        unsafe extern "C" fn(
            name: *const ::core::ffi::c_char,
            buf: *const byte,
            size: usize,
            flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub GL_CreateTexture: ::core::option::Option<
        unsafe extern "C" fn(
            name: *const ::core::ffi::c_char,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
            buffer: *const ::core::ffi::c_void,
            flags: texFlags_t,
        ) -> ::core::ffi::c_int,
    >,
    pub GL_LoadTextureArray: ::core::option::Option<
        unsafe extern "C" fn(
            names: *mut *const ::core::ffi::c_char,
            flags: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub GL_CreateTextureArray: ::core::option::Option<
        unsafe extern "C" fn(
            name: *const ::core::ffi::c_char,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
            depth: ::core::ffi::c_int,
            buffer: *const ::core::ffi::c_void,
            flags: texFlags_t,
        ) -> ::core::ffi::c_int,
    >,
    pub GL_FreeTexture: ::core::option::Option<unsafe extern "C" fn(texnum: ::core::ffi::c_uint)>,
    pub DrawSingleDecal:
        ::core::option::Option<unsafe extern "C" fn(pDecal: *mut decal_s, fa: *mut msurface_s)>,
    pub R_DecalSetupVerts: ::core::option::Option<
        unsafe extern "C" fn(
            pDecal: *mut decal_s,
            surf: *mut msurface_s,
            texture: ::core::ffi::c_int,
            outCount: *mut ::core::ffi::c_int,
        ) -> *mut f32,
    >,
    pub R_EntityRemoveDecals: ::core::option::Option<unsafe extern "C" fn(mod_: *mut model_s)>,
    pub AVI_LoadVideo: ::core::option::Option<
        unsafe extern "C" fn(
            filename: *const ::core::ffi::c_char,
            load_audio: qboolean,
        ) -> *mut movie_state_s,
    >,
    pub AVI_GetVideoInfo: ::core::option::Option<
        unsafe extern "C" fn(
            Avi: *mut movie_state_s,
            xres: *mut ::core::ffi::c_int,
            yres: *mut ::core::ffi::c_int,
            duration: *mut f32,
        ) -> qboolean,
    >,
    pub AVI_GetVideoFrameNumber: ::core::option::Option<
        unsafe extern "C" fn(Avi: *mut movie_state_s, time: f32) -> ::core::ffi::c_int,
    >,
    pub AVI_GetVideoFrame: ::core::option::Option<
        unsafe extern "C" fn(Avi: *mut movie_state_s, frame: ::core::ffi::c_int) -> *mut byte,
    >,
    pub AVI_UploadRawFrame: ::core::option::Option<
        unsafe extern "C" fn(
            texture: ::core::ffi::c_int,
            cols: ::core::ffi::c_int,
            rows: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
            data: *const byte,
        ),
    >,
    pub AVI_FreeVideo: ::core::option::Option<unsafe extern "C" fn(Avi: *mut movie_state_s)>,
    pub AVI_IsActive:
        ::core::option::Option<unsafe extern "C" fn(Avi: *mut movie_state_s) -> qboolean>,
    pub AVI_StreamSound: ::core::option::Option<
        unsafe extern "C" fn(
            Avi: *mut movie_state_s,
            entnum: ::core::ffi::c_int,
            fvol: f32,
            attn: f32,
            synctime: f32,
        ),
    >,
    pub AVI_Think:
        ::core::option::Option<unsafe extern "C" fn(Avi: *mut movie_state_s) -> qboolean>,
    pub AVI_SetParm: ::core::option::Option<
        unsafe extern "C" fn(Avi: *mut movie_state_s, parm: movie_parms_e, ...) -> qboolean,
    >,
    pub GL_Bind: ::core::option::Option<
        unsafe extern "C" fn(tmu: ::core::ffi::c_int, texnum: ::core::ffi::c_uint),
    >,
    pub GL_SelectTexture: ::core::option::Option<unsafe extern "C" fn(tmu: ::core::ffi::c_int)>,
    pub GL_LoadTextureMatrix: ::core::option::Option<unsafe extern "C" fn(glmatrix: *const f32)>,
    pub GL_TexMatrixIdentity: ::core::option::Option<unsafe extern "C" fn()>,
    pub GL_CleanUpTextureUnits:
        ::core::option::Option<unsafe extern "C" fn(last: ::core::ffi::c_int)>,
    pub GL_TexGen: ::core::option::Option<
        unsafe extern "C" fn(coord: ::core::ffi::c_uint, mode: ::core::ffi::c_uint),
    >,
    pub GL_TextureTarget: ::core::option::Option<unsafe extern "C" fn(target: ::core::ffi::c_uint)>,
    pub GL_TexCoordArrayMode:
        ::core::option::Option<unsafe extern "C" fn(texmode: ::core::ffi::c_uint)>,
    pub GL_GetProcAddress: ::core::option::Option<
        unsafe extern "C" fn(name: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_void,
    >,
    pub GL_UpdateTexSize: ::core::option::Option<
        unsafe extern "C" fn(
            texnum: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
            depth: ::core::ffi::c_int,
        ),
    >,
    pub GL_Reserved0: ::core::option::Option<unsafe extern "C" fn()>,
    pub GL_Reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub GL_DrawParticles: ::core::option::Option<
        unsafe extern "C" fn(rvp: *const ref_viewpass_s, trans_pass: qboolean, frametime: f32),
    >,
    pub EnvShot: ::core::option::Option<
        unsafe extern "C" fn(
            vieworg: *const f32,
            name: *const ::core::ffi::c_char,
            skyshot: qboolean,
            shotsize: ::core::ffi::c_int,
        ),
    >,
    pub SPR_LoadExt: ::core::option::Option<
        unsafe extern "C" fn(
            szPicName: *const ::core::ffi::c_char,
            texFlags: ::core::ffi::c_uint,
        ) -> ::core::ffi::c_int,
    >,
    pub LightVec: ::core::option::Option<
        unsafe extern "C" fn(
            start: *const f32,
            end: *const f32,
            lightspot: *mut f32,
            lightvec: *mut f32,
        ) -> colorVec,
    >,
    pub StudioGetTexture:
        ::core::option::Option<unsafe extern "C" fn(e: *mut cl_entity_s) -> *mut mstudiotex_s>,
    pub GetOverviewParms: ::core::option::Option<unsafe extern "C" fn() -> *const ref_overview_s>,
    pub GetFileByIndex: ::core::option::Option<
        unsafe extern "C" fn(fileindex: ::core::ffi::c_int) -> *const ::core::ffi::c_char,
    >,
    pub pfnSaveFile: ::core::option::Option<
        unsafe extern "C" fn(
            filename: *const ::core::ffi::c_char,
            data: *const ::core::ffi::c_void,
            len: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub R_Reserved0: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnMemAlloc: ::core::option::Option<
        unsafe extern "C" fn(
            cb: usize,
            filename: *const ::core::ffi::c_char,
            fileline: ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_void,
    >,
    pub pfnMemFree: ::core::option::Option<
        unsafe extern "C" fn(
            mem: *mut ::core::ffi::c_void,
            filename: *const ::core::ffi::c_char,
            fileline: ::core::ffi::c_int,
        ),
    >,
    pub pfnGetFilesList: ::core::option::Option<
        unsafe extern "C" fn(
            pattern: *const ::core::ffi::c_char,
            numFiles: *mut ::core::ffi::c_int,
            gamedironly: ::core::ffi::c_int,
        ) -> *mut *mut ::core::ffi::c_char,
    >,
    pub pfnFileBufferCRC32: ::core::option::Option<
        unsafe extern "C" fn(
            buffer: *const ::core::ffi::c_void,
            length: ::core::ffi::c_int,
        ) -> ::core::ffi::c_uint,
    >,
    pub COM_CompareFileTime: ::core::option::Option<
        unsafe extern "C" fn(
            filename1: *const ::core::ffi::c_char,
            filename2: *const ::core::ffi::c_char,
            iCompare: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub Host_Error:
        ::core::option::Option<unsafe extern "C" fn(error: *const ::core::ffi::c_char, ...)>,
    pub pfnGetModel: ::core::option::Option<
        unsafe extern "C" fn(modelindex: ::core::ffi::c_int) -> *mut ::core::ffi::c_void,
    >,
    pub pfnTime: ::core::option::Option<unsafe extern "C" fn() -> f32>,
    pub Cvar_Set: ::core::option::Option<
        unsafe extern "C" fn(name: *const ::core::ffi::c_char, value: *const ::core::ffi::c_char),
    >,
    pub S_FadeMusicVolume: ::core::option::Option<unsafe extern "C" fn(fadePercent: f32)>,
    pub SetRandomSeed: ::core::option::Option<unsafe extern "C" fn(lSeed: ::core::ffi::c_int)>,
}
pub type render_api_t = render_api_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct render_interface_s {
    pub version: ::core::ffi::c_int,
    pub GL_RenderFrame: ::core::option::Option<
        unsafe extern "C" fn(rvp: *const ref_viewpass_s) -> ::core::ffi::c_int,
    >,
    pub GL_BuildLightmaps: ::core::option::Option<unsafe extern "C" fn()>,
    pub GL_OrthoBounds:
        ::core::option::Option<unsafe extern "C" fn(mins: *const f32, maxs: *const f32)>,
    pub R_CreateStudioDecalList: ::core::option::Option<
        unsafe extern "C" fn(
            pList: *mut decallist_t,
            count: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub R_ClearStudioDecals: ::core::option::Option<unsafe extern "C" fn()>,
    pub R_SpeedsMessage: ::core::option::Option<
        unsafe extern "C" fn(out: *mut ::core::ffi::c_char, size: usize) -> qboolean,
    >,
    pub Mod_ProcessUserData: ::core::option::Option<
        unsafe extern "C" fn(mod_: *mut model_s, create: qboolean, buffer: *const byte),
    >,
    pub R_ProcessEntData: ::core::option::Option<unsafe extern "C" fn(allocate: qboolean)>,
    pub Mod_GetCurrentVis: ::core::option::Option<unsafe extern "C" fn() -> *mut byte>,
    pub R_NewMap: ::core::option::Option<unsafe extern "C" fn()>,
    pub R_ClearScene: ::core::option::Option<unsafe extern "C" fn()>,
    pub CL_UpdateLatchedVars:
        ::core::option::Option<unsafe extern "C" fn(e: *mut cl_entity_s, reset: qboolean)>,
}
pub type render_interface_t = render_interface_s;
