/* automatically generated by rust-bindgen 0.72.0 */

pub const SV_PHYSICS_INTERFACE_VERSION: i32 = 6;
pub const SERVER_DEAD: i32 = 0;
pub const SERVER_LOADING: i32 = 1;
pub const SERVER_ACTIVE: i32 = 2;
pub const LUMP_LOAD_OK: i32 = 0;
pub const LUMP_LOAD_COULDNT_OPEN: i32 = 1;
pub const LUMP_LOAD_BAD_HEADER: i32 = 2;
pub const LUMP_LOAD_BAD_VERSION: i32 = 3;
pub const LUMP_LOAD_NO_EXTRADATA: i32 = 4;
pub const LUMP_LOAD_INVALID_NUM: i32 = 5;
pub const LUMP_LOAD_NOT_EXIST: i32 = 6;
pub const LUMP_LOAD_MEM_FAILED: i32 = 7;
pub const LUMP_LOAD_CORRUPTED: i32 = 8;
pub const LUMP_SAVE_OK: i32 = 0;
pub const LUMP_SAVE_COULDNT_OPEN: i32 = 1;
pub const LUMP_SAVE_BAD_HEADER: i32 = 2;
pub const LUMP_SAVE_BAD_VERSION: i32 = 3;
pub const LUMP_SAVE_NO_EXTRADATA: i32 = 4;
pub const LUMP_SAVE_INVALID_NUM: i32 = 5;
pub const LUMP_SAVE_ALREADY_EXIST: i32 = 6;
pub const LUMP_SAVE_NO_DATA: i32 = 7;
pub const LUMP_SAVE_CORRUPTED: i32 = 8;
#[repr(C)]
pub struct areanode_s {
    pub axis: ::core::ffi::c_int,
    pub dist: f32,
    pub children: [*mut areanode_s; 2usize],
    pub trigger_edicts: link_t,
    pub solid_edicts: link_t,
    pub portal_edicts: link_t,
}
pub type areanode_t = areanode_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct server_physics_api_s {
    pub pfnLinkEdict:
        ::core::option::Option<unsafe extern "C" fn(ent: *mut edict_t, touch_triggers: qboolean)>,
    pub pfnGetServerTime: ::core::option::Option<unsafe extern "C" fn() -> f64>,
    pub pfnGetFrameTime: ::core::option::Option<unsafe extern "C" fn() -> f64>,
    pub pfnGetModel: ::core::option::Option<
        unsafe extern "C" fn(modelindex: ::core::ffi::c_int) -> *mut ::core::ffi::c_void,
    >,
    pub pfnGetHeadnode: ::core::option::Option<unsafe extern "C" fn() -> *mut areanode_t>,
    pub pfnServerState: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnHost_Error:
        ::core::option::Option<unsafe extern "C" fn(error: *const ::core::ffi::c_char, ...)>,
    pub pTriAPI: *mut triangleapi_s,
    pub pfnDrawConsoleString: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            string: *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnDrawSetTextColor: ::core::option::Option<unsafe extern "C" fn(r: f32, g: f32, b: f32)>,
    pub pfnDrawConsoleStringLen: ::core::option::Option<
        unsafe extern "C" fn(
            string: *const ::core::ffi::c_char,
            length: *mut ::core::ffi::c_int,
            height: *mut ::core::ffi::c_int,
        ),
    >,
    pub Con_NPrintf: ::core::option::Option<
        unsafe extern "C" fn(pos: ::core::ffi::c_int, fmt: *const ::core::ffi::c_char, ...),
    >,
    pub Con_NXPrintf: ::core::option::Option<
        unsafe extern "C" fn(info: *mut con_nprint_s, fmt: *const ::core::ffi::c_char, ...),
    >,
    pub pfnGetLightStyle: ::core::option::Option<
        unsafe extern "C" fn(style: ::core::ffi::c_int) -> *const ::core::ffi::c_char,
    >,
    pub pfnUpdateFogSettings:
        ::core::option::Option<unsafe extern "C" fn(packed_fog: ::core::ffi::c_uint)>,
    pub pfnGetFilesList: ::core::option::Option<
        unsafe extern "C" fn(
            pattern: *const ::core::ffi::c_char,
            numFiles: *mut ::core::ffi::c_int,
            gamedironly: ::core::ffi::c_int,
        ) -> *mut *mut ::core::ffi::c_char,
    >,
    pub pfnTraceSurface: ::core::option::Option<
        unsafe extern "C" fn(
            pTextureEntity: *mut edict_t,
            v1: *const f32,
            v2: *const f32,
        ) -> *mut msurface_s,
    >,
    pub pfnGetTextureData:
        ::core::option::Option<unsafe extern "C" fn(texnum: ::core::ffi::c_uint) -> *const byte>,
    pub pfnMemAlloc: ::core::option::Option<
        unsafe extern "C" fn(
            cb: usize,
            filename: *const ::core::ffi::c_char,
            fileline: ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_void,
    >,
    pub pfnMemFree: ::core::option::Option<
        unsafe extern "C" fn(
            mem: *mut ::core::ffi::c_void,
            filename: *const ::core::ffi::c_char,
            fileline: ::core::ffi::c_int,
        ),
    >,
    pub pfnMaskPointContents: ::core::option::Option<
        unsafe extern "C" fn(pos: *const f32, groupmask: ::core::ffi::c_int) -> ::core::ffi::c_int,
    >,
    pub pfnTrace: ::core::option::Option<
        unsafe extern "C" fn(
            p0: *const f32,
            mins: *mut f32,
            maxs: *mut f32,
            p1: *const f32,
            type_: ::core::ffi::c_int,
            e: *mut edict_t,
        ) -> trace_t,
    >,
    pub pfnTraceNoEnts: ::core::option::Option<
        unsafe extern "C" fn(
            p0: *const f32,
            mins: *mut f32,
            maxs: *mut f32,
            p1: *const f32,
            type_: ::core::ffi::c_int,
            e: *mut edict_t,
        ) -> trace_t,
    >,
    pub pfnBoxInPVS: ::core::option::Option<
        unsafe extern "C" fn(
            org: *const f32,
            boxmins: *const f32,
            boxmaxs: *const f32,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnWriteBytes:
        ::core::option::Option<unsafe extern "C" fn(bytes: *const byte, count: ::core::ffi::c_int)>,
    pub pfnCheckLump: ::core::option::Option<
        unsafe extern "C" fn(
            filename: *const ::core::ffi::c_char,
            lump: ::core::ffi::c_int,
            lumpsize: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnReadLump: ::core::option::Option<
        unsafe extern "C" fn(
            filename: *const ::core::ffi::c_char,
            lump: ::core::ffi::c_int,
            lumpdata: *mut *mut ::core::ffi::c_void,
            lumpsize: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnSaveLump: ::core::option::Option<
        unsafe extern "C" fn(
            filename: *const ::core::ffi::c_char,
            lump: ::core::ffi::c_int,
            lumpdata: *mut ::core::ffi::c_void,
            lumpsize: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnSaveFile: ::core::option::Option<
        unsafe extern "C" fn(
            filename: *const ::core::ffi::c_char,
            data: *const ::core::ffi::c_void,
            len: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnLoadImagePixels: ::core::option::Option<
        unsafe extern "C" fn(
            filename: *const ::core::ffi::c_char,
            width: *mut ::core::ffi::c_int,
            height: *mut ::core::ffi::c_int,
        ) -> *const byte,
    >,
    pub pfnGetModelName: ::core::option::Option<
        unsafe extern "C" fn(modelindex: ::core::ffi::c_int) -> *const ::core::ffi::c_char,
    >,
    pub pfnGetNativeObject: ::core::option::Option<
        unsafe extern "C" fn(object: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_void,
    >,
}
pub type server_physics_api_t = server_physics_api_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physics_interface_s {
    pub version: ::core::ffi::c_int,
    pub SV_CreateEntity: ::core::option::Option<
        unsafe extern "C" fn(
            pent: *mut edict_t,
            szName: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int,
    >,
    pub SV_PhysicsEntity:
        ::core::option::Option<unsafe extern "C" fn(pEntity: *mut edict_t) -> ::core::ffi::c_int>,
    pub SV_LoadEntities: ::core::option::Option<
        unsafe extern "C" fn(
            mapname: *const ::core::ffi::c_char,
            entities: *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int,
    >,
    pub SV_UpdatePlayerBaseVelocity:
        ::core::option::Option<unsafe extern "C" fn(ent: *mut edict_t)>,
    pub SV_AllowSaveGame: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub SV_TriggerTouch: ::core::option::Option<
        unsafe extern "C" fn(pent: *mut edict_t, trigger: *mut edict_t) -> ::core::ffi::c_int,
    >,
    pub SV_CheckFeatures: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_uint>,
    pub DrawDebugTriangles: ::core::option::Option<unsafe extern "C" fn()>,
    pub DrawNormalTriangles: ::core::option::Option<unsafe extern "C" fn()>,
    pub DrawOrthoTriangles: ::core::option::Option<unsafe extern "C" fn()>,
    pub ClipMoveToEntity: ::core::option::Option<
        unsafe extern "C" fn(
            ent: *mut edict_t,
            start: *const f32,
            mins: *mut f32,
            maxs: *mut f32,
            end: *const f32,
            trace: *mut trace_t,
        ),
    >,
    pub ClipPMoveToEntity: ::core::option::Option<
        unsafe extern "C" fn(
            pe: *mut physent_s,
            start: *const f32,
            mins: *mut f32,
            maxs: *mut f32,
            end: *const f32,
            tr: *mut pmtrace_s,
        ),
    >,
    pub SV_EndFrame: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnPrepWorldFrame: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnCreateEntitiesInRestoreList: ::core::option::Option<
        unsafe extern "C" fn(
            pSaveData: *mut SAVERESTOREDATA,
            levelMask: ::core::ffi::c_int,
            create_world: qboolean,
        ),
    >,
    pub pfnAllocString: ::core::option::Option<
        unsafe extern "C" fn(szValue: *const ::core::ffi::c_char) -> string_t,
    >,
    pub pfnMakeString: ::core::option::Option<
        unsafe extern "C" fn(szValue: *const ::core::ffi::c_char) -> string_t,
    >,
    pub pfnGetString: ::core::option::Option<
        unsafe extern "C" fn(iString: string_t) -> *const ::core::ffi::c_char,
    >,
    pub pfnRestoreDecal: ::core::option::Option<
        unsafe extern "C" fn(
            entry: *mut decallist_s,
            pEdict: *mut edict_t,
            adjacent: qboolean,
        ) -> ::core::ffi::c_int,
    >,
    pub PM_PlayerTouch: ::core::option::Option<
        unsafe extern "C" fn(ppmove: *mut playermove_s, client: *mut edict_t),
    >,
    pub Mod_ProcessUserData: ::core::option::Option<
        unsafe extern "C" fn(mod_: *mut model_s, create: qboolean, buffer: *const byte),
    >,
    pub SV_HullForBsp: ::core::option::Option<
        unsafe extern "C" fn(
            ent: *mut edict_t,
            mins: *const f32,
            maxs: *const f32,
            offset: *mut f32,
        ) -> *mut ::core::ffi::c_void,
    >,
    pub SV_PlayerThink: ::core::option::Option<
        unsafe extern "C" fn(ent: *mut edict_t, frametime: f32, time: f64) -> ::core::ffi::c_int,
    >,
}
pub type physics_interface_t = physics_interface_s;
