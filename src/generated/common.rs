/* automatically generated by rust-bindgen 0.72.0 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::core::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::core::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::core::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::core::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::core::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const MAX_STRING: i32 = 256;
pub const MAX_VA_STRING: i32 = 1024;
pub const MAX_SYSPATH: i32 = 1024;
pub const MAX_MODS: i32 = 512;
pub const MAX_QPATH: i32 = 64;
pub const MAX_OSPATH: i32 = 260;
pub const CS_SIZE: i32 = 64;
pub const CS_TIME: i32 = 16;
pub const PITCH: i32 = 0;
pub const YAW: i32 = 1;
pub const ROLL: i32 = 2;
pub const NUMVERTEXNORMALS: i32 = 162;
pub const SIDE_FRONT: i32 = 0;
pub const SIDE_BACK: i32 = 1;
pub const SIDE_ON: i32 = 2;
pub const SIDE_CROSS: i32 = -2;
pub const PLANE_X: i32 = 0;
pub const PLANE_Y: i32 = 1;
pub const PLANE_Z: i32 = 2;
pub const PLANE_NONAXIAL: i32 = 3;
pub const EQUAL_EPSILON: f64 = 0.001;
pub const STOP_EPSILON: f64 = 0.1;
pub const ON_EPSILON: f64 = 0.1;
pub const RAD_TO_STUDIO: f64 = 10430.378350470453;
pub const STUDIO_TO_RAD: f64 = 0.00009587379924285257;
pub const INV127F: f64 = 0.007874015748031496;
pub const INV255F: f64 = 0.00392156862745098;
pub const FL_FLY: i32 = 1;
pub const FL_SWIM: i32 = 2;
pub const FL_CONVEYOR: i32 = 4;
pub const FL_CLIENT: i32 = 8;
pub const FL_INWATER: i32 = 16;
pub const FL_MONSTER: i32 = 32;
pub const FL_GODMODE: i32 = 64;
pub const FL_NOTARGET: i32 = 128;
pub const FL_SKIPLOCALHOST: i32 = 256;
pub const FL_ONGROUND: i32 = 512;
pub const FL_PARTIALGROUND: i32 = 1024;
pub const FL_WATERJUMP: i32 = 2048;
pub const FL_FROZEN: i32 = 4096;
pub const FL_FAKECLIENT: i32 = 8192;
pub const FL_DUCKING: i32 = 16384;
pub const FL_FLOAT: i32 = 32768;
pub const FL_GRAPHED: i32 = 65536;
pub const FL_IMMUNE_WATER: i32 = 131072;
pub const FL_IMMUNE_SLIME: i32 = 262144;
pub const FL_IMMUNE_LAVA: i32 = 524288;
pub const FL_PROXY: i32 = 1048576;
pub const FL_ALWAYSTHINK: i32 = 2097152;
pub const FL_BASEVELOCITY: i32 = 4194304;
pub const FL_MONSTERCLIP: i32 = 8388608;
pub const FL_ONTRAIN: i32 = 16777216;
pub const FL_WORLDBRUSH: i32 = 33554432;
pub const FL_SPECTATOR: i32 = 67108864;
pub const FL_LASERDOT: i32 = 134217728;
pub const FL_CUSTOMENTITY: i32 = 536870912;
pub const FL_KILLME: i32 = 1073741824;
pub const FL_DORMANT: i64 = 2147483648;
pub const FTRACE_SIMPLEBOX: i32 = 1;
pub const FTRACE_IGNORE_GLASS: i32 = 2;
pub const WALKMOVE_NORMAL: i32 = 0;
pub const WALKMOVE_WORLDONLY: i32 = 1;
pub const WALKMOVE_CHECKONLY: i32 = 2;
pub const MOVETYPE_NONE: i32 = 0;
pub const MOVETYPE_WALK: i32 = 3;
pub const MOVETYPE_STEP: i32 = 4;
pub const MOVETYPE_FLY: i32 = 5;
pub const MOVETYPE_TOSS: i32 = 6;
pub const MOVETYPE_PUSH: i32 = 7;
pub const MOVETYPE_NOCLIP: i32 = 8;
pub const MOVETYPE_FLYMISSILE: i32 = 9;
pub const MOVETYPE_BOUNCE: i32 = 10;
pub const MOVETYPE_BOUNCEMISSILE: i32 = 11;
pub const MOVETYPE_FOLLOW: i32 = 12;
pub const MOVETYPE_PUSHSTEP: i32 = 13;
pub const MOVETYPE_COMPOUND: i32 = 14;
pub const SOLID_NOT: i32 = 0;
pub const SOLID_TRIGGER: i32 = 1;
pub const SOLID_BBOX: i32 = 2;
pub const SOLID_SLIDEBOX: i32 = 3;
pub const SOLID_BSP: i32 = 4;
pub const SOLID_CUSTOM: i32 = 5;
pub const SOLID_PORTAL: i32 = 6;
pub const DEAD_NO: i32 = 0;
pub const DEAD_DYING: i32 = 1;
pub const DEAD_DEAD: i32 = 2;
pub const DEAD_RESPAWNABLE: i32 = 3;
pub const DEAD_DISCARDBODY: i32 = 4;
pub const DAMAGE_NO: i32 = 0;
pub const DAMAGE_YES: i32 = 1;
pub const DAMAGE_AIM: i32 = 2;
pub const EF_BRIGHTFIELD: i32 = 1;
pub const EF_MUZZLEFLASH: i32 = 2;
pub const EF_BRIGHTLIGHT: i32 = 4;
pub const EF_DIMLIGHT: i32 = 8;
pub const EF_INVLIGHT: i32 = 16;
pub const EF_NOINTERP: i32 = 32;
pub const EF_LIGHT: i32 = 64;
pub const EF_NODRAW: i32 = 128;
pub const EF_WATERSIDES: i32 = 67108864;
pub const EF_FULLBRIGHT: i32 = 134217728;
pub const EF_NOSHADOW: i32 = 268435456;
pub const EF_MERGE_VISIBILITY: i32 = 536870912;
pub const EF_REQUEST_PHS: i32 = 1073741824;
pub const EFLAG_SLERP: i32 = 1;
pub const TE_BEAMPOINTS: i32 = 0;
pub const TE_BEAMENTPOINT: i32 = 1;
pub const TE_GUNSHOT: i32 = 2;
pub const TE_EXPLOSION: i32 = 3;
pub const TE_EXPLFLAG_NONE: i32 = 0;
pub const TE_EXPLFLAG_NOADDITIVE: i32 = 1;
pub const TE_EXPLFLAG_NODLIGHTS: i32 = 2;
pub const TE_EXPLFLAG_NOSOUND: i32 = 4;
pub const TE_EXPLFLAG_NOPARTICLES: i32 = 8;
pub const TE_EXPLFLAG_DRAWALPHA: i32 = 16;
pub const TE_EXPLFLAG_ROTATE: i32 = 32;
pub const TE_TAREXPLOSION: i32 = 4;
pub const TE_SMOKE: i32 = 5;
pub const TE_TRACER: i32 = 6;
pub const TE_LIGHTNING: i32 = 7;
pub const TE_BEAMENTS: i32 = 8;
pub const TE_SPARKS: i32 = 9;
pub const TE_LAVASPLASH: i32 = 10;
pub const TE_TELEPORT: i32 = 11;
pub const TE_EXPLOSION2: i32 = 12;
pub const TE_BSPDECAL: i32 = 13;
pub const TE_IMPLOSION: i32 = 14;
pub const TE_SPRITETRAIL: i32 = 15;
pub const TE_BEAM: i32 = 16;
pub const TE_SPRITE: i32 = 17;
pub const TE_BEAMSPRITE: i32 = 18;
pub const TE_BEAMTORUS: i32 = 19;
pub const TE_BEAMDISK: i32 = 20;
pub const TE_BEAMCYLINDER: i32 = 21;
pub const TE_BEAMFOLLOW: i32 = 22;
pub const TE_GLOWSPRITE: i32 = 23;
pub const TE_BEAMRING: i32 = 24;
pub const TE_STREAK_SPLASH: i32 = 25;
pub const TE_BEAMHOSE: i32 = 26;
pub const TE_DLIGHT: i32 = 27;
pub const TE_ELIGHT: i32 = 28;
pub const TE_TEXTMESSAGE: i32 = 29;
pub const TE_LINE: i32 = 30;
pub const TE_BOX: i32 = 31;
pub const TE_KILLBEAM: i32 = 99;
pub const TE_LARGEFUNNEL: i32 = 100;
pub const TE_BLOODSTREAM: i32 = 101;
pub const TE_SHOWLINE: i32 = 102;
pub const TE_BLOOD: i32 = 103;
pub const TE_DECAL: i32 = 104;
pub const TE_FIZZ: i32 = 105;
pub const TE_MODEL: i32 = 106;
pub const TE_EXPLODEMODEL: i32 = 107;
pub const TE_BREAKMODEL: i32 = 108;
pub const TE_GUNSHOTDECAL: i32 = 109;
pub const TE_SPRITE_SPRAY: i32 = 110;
pub const TE_ARMOR_RICOCHET: i32 = 111;
pub const TE_PLAYERDECAL: i32 = 112;
pub const TE_BUBBLES: i32 = 113;
pub const TE_BUBBLETRAIL: i32 = 114;
pub const TE_BLOODSPRITE: i32 = 115;
pub const TE_WORLDDECAL: i32 = 116;
pub const TE_WORLDDECALHIGH: i32 = 117;
pub const TE_DECALHIGH: i32 = 118;
pub const TE_PROJECTILE: i32 = 119;
pub const TE_SPRAY: i32 = 120;
pub const TE_PLAYERSPRITES: i32 = 121;
pub const TE_PARTICLEBURST: i32 = 122;
pub const TE_FIREFIELD: i32 = 123;
pub const TEFIRE_FLAG_ALLFLOAT: i32 = 1;
pub const TEFIRE_FLAG_SOMEFLOAT: i32 = 2;
pub const TEFIRE_FLAG_LOOP: i32 = 4;
pub const TEFIRE_FLAG_ALPHA: i32 = 8;
pub const TEFIRE_FLAG_PLANAR: i32 = 16;
pub const TEFIRE_FLAG_ADDITIVE: i32 = 32;
pub const TE_PLAYERATTACHMENT: i32 = 124;
pub const TE_KILLPLAYERATTACHMENTS: i32 = 125;
pub const TE_MULTIGUNSHOT: i32 = 126;
pub const TE_USERTRACER: i32 = 127;
pub const MSG_BROADCAST: i32 = 0;
pub const MSG_ONE: i32 = 1;
pub const MSG_ALL: i32 = 2;
pub const MSG_INIT: i32 = 3;
pub const MSG_PVS: i32 = 4;
pub const MSG_PAS: i32 = 5;
pub const MSG_PVS_R: i32 = 6;
pub const MSG_PAS_R: i32 = 7;
pub const MSG_ONE_UNRELIABLE: i32 = 8;
pub const MSG_SPEC: i32 = 9;
pub const CONTENTS_EMPTY: i32 = -1;
pub const CONTENTS_SOLID: i32 = -2;
pub const CONTENTS_WATER: i32 = -3;
pub const CONTENTS_SLIME: i32 = -4;
pub const CONTENTS_LAVA: i32 = -5;
pub const CONTENTS_SKY: i32 = -6;
pub const CONTENTS_ORIGIN: i32 = -7;
pub const CONTENTS_CLIP: i32 = -8;
pub const CONTENTS_CURRENT_0: i32 = -9;
pub const CONTENTS_CURRENT_90: i32 = -10;
pub const CONTENTS_CURRENT_180: i32 = -11;
pub const CONTENTS_CURRENT_270: i32 = -12;
pub const CONTENTS_CURRENT_UP: i32 = -13;
pub const CONTENTS_CURRENT_DOWN: i32 = -14;
pub const CONTENTS_TRANSLUCENT: i32 = -15;
pub const CONTENTS_LADDER: i32 = -16;
pub const CONTENT_FLYFIELD: i32 = -17;
pub const CONTENT_GRAVITY_FLYFIELD: i32 = -18;
pub const CONTENT_FOG: i32 = -19;
pub const CHAN_AUTO: i32 = 0;
pub const CHAN_WEAPON: i32 = 1;
pub const CHAN_VOICE: i32 = 2;
pub const CHAN_ITEM: i32 = 3;
pub const CHAN_BODY: i32 = 4;
pub const CHAN_STREAM: i32 = 5;
pub const CHAN_STATIC: i32 = 6;
pub const CHAN_NETWORKVOICE_BASE: i32 = 7;
pub const CHAN_NETWORKVOICE_END: i32 = 500;
pub const PITCH_NORM: i32 = 100;
pub const PITCH_LOW: i32 = 95;
pub const PITCH_HIGH: i32 = 120;
pub const VOL_NORM: f64 = 1.0;
pub const PLAT_LOW_TRIGGER: i32 = 1;
pub const SF_TRAIN_WAIT_RETRIGGER: i32 = 1;
pub const SF_TRAIN_START_ON: i32 = 4;
pub const SF_TRAIN_PASSABLE: i32 = 8;
pub const IN_ATTACK: i32 = 1;
pub const IN_JUMP: i32 = 2;
pub const IN_DUCK: i32 = 4;
pub const IN_FORWARD: i32 = 8;
pub const IN_BACK: i32 = 16;
pub const IN_USE: i32 = 32;
pub const IN_CANCEL: i32 = 64;
pub const IN_LEFT: i32 = 128;
pub const IN_RIGHT: i32 = 256;
pub const IN_MOVELEFT: i32 = 512;
pub const IN_MOVERIGHT: i32 = 1024;
pub const IN_ATTACK2: i32 = 2048;
pub const IN_RUN: i32 = 4096;
pub const IN_RELOAD: i32 = 8192;
pub const IN_ALT1: i32 = 16384;
pub const IN_SCORE: i32 = 32768;
pub const BREAK_TYPEMASK: i32 = 79;
pub const BREAK_GLASS: i32 = 1;
pub const BREAK_METAL: i32 = 2;
pub const BREAK_FLESH: i32 = 4;
pub const BREAK_WOOD: i32 = 8;
pub const BREAK_SMOKE: i32 = 16;
pub const BREAK_TRANS: i32 = 32;
pub const BREAK_CONCRETE: i32 = 64;
pub const BREAK_2: i32 = 128;
pub const BOUNCE_GLASS: i32 = 1;
pub const BOUNCE_METAL: i32 = 2;
pub const BOUNCE_FLESH: i32 = 4;
pub const BOUNCE_WOOD: i32 = 8;
pub const BOUNCE_SHRAP: i32 = 16;
pub const BOUNCE_SHELL: i32 = 32;
pub const BOUNCE_CONCRETE: i32 = 64;
pub const BOUNCE_SHOTSHELL: i32 = 128;
pub const TE_BOUNCE_NULL: i32 = 0;
pub const TE_BOUNCE_SHELL: i32 = 1;
pub const TE_BOUNCE_SHOTSHELL: i32 = 2;
pub const ET_NORMAL: i32 = 0;
pub const ET_PLAYER: i32 = 1;
pub const ET_TEMPENTITY: i32 = 2;
pub const ET_BEAM: i32 = 3;
pub const ET_FRAGMENTED: i32 = 4;
pub const HISTORY_MAX: i32 = 64;
pub const HISTORY_MASK: i32 = 63;
pub const ENTITY_NORMAL: i32 = 1;
pub const ENTITY_BEAM: i32 = 2;
pub const MAX_PHYSINFO_STRING: i32 = 256;
pub const MAX_LOCAL_WEAPONS: i32 = 64;
pub const FEVENT_ORIGIN: i32 = 1;
pub const FEVENT_ANGLES: i32 = 2;
pub const Q1BSP_VERSION: i32 = 29;
pub const HLBSP_VERSION: i32 = 30;
pub const EXTRA_VERSION: i32 = 4;
pub const DELUXEMAP_VERSION: i32 = 1;
pub const ANGLE_UP: i32 = -1;
pub const ANGLE_DOWN: i32 = -2;
pub const MAX_MAP_HULLS: i32 = 4;
pub const LM_STYLES: i32 = 4;
pub const LS_NORMAL: i32 = 0;
pub const LS_UNUSED: i32 = 254;
pub const LS_NONE: i32 = 255;
pub const MAX_MAP_CLIPNODES_HLBSP: i32 = 32767;
pub const MAX_MAP_CLIPNODES_BSP2: i32 = 524288;
pub const MAX_MAP_MODELS: i32 = 2048;
pub const MAX_MAP_ENTSTRING: i32 = 2097152;
pub const MAX_MAP_PLANES: i32 = 131072;
pub const MAX_MAP_NODES: i32 = 262144;
pub const MAX_MAP_CLIPNODES: i32 = 524288;
pub const MAX_MAP_LEAFS: i32 = 131072;
pub const MAX_MAP_VERTS: i32 = 524288;
pub const MAX_MAP_FACES: i32 = 262144;
pub const MAX_MAP_MARKSURFACES: i32 = 524288;
pub const MAX_MAP_ENTITIES: i32 = 8192;
pub const MAX_MAP_TEXINFO: i32 = 262144;
pub const MAX_MAP_EDGES: i32 = 1048576;
pub const MAX_MAP_SURFEDGES: i32 = 2097152;
pub const MAX_MAP_TEXTURES: i32 = 2048;
pub const MAX_MAP_MIPTEX: i32 = 33554432;
pub const MAX_MAP_LIGHTING: i32 = 33554432;
pub const MAX_MAP_VISIBILITY: i32 = 16777216;
pub const MAX_MAP_FACEINFO: i32 = 8192;
pub const LUMP_ENTITIES: i32 = 0;
pub const LUMP_PLANES: i32 = 1;
pub const LUMP_TEXTURES: i32 = 2;
pub const LUMP_VERTEXES: i32 = 3;
pub const LUMP_VISIBILITY: i32 = 4;
pub const LUMP_NODES: i32 = 5;
pub const LUMP_TEXINFO: i32 = 6;
pub const LUMP_FACES: i32 = 7;
pub const LUMP_LIGHTING: i32 = 8;
pub const LUMP_CLIPNODES: i32 = 9;
pub const LUMP_LEAFS: i32 = 10;
pub const LUMP_MARKSURFACES: i32 = 11;
pub const LUMP_EDGES: i32 = 12;
pub const LUMP_SURFEDGES: i32 = 13;
pub const LUMP_MODELS: i32 = 14;
pub const HEADER_LUMPS: i32 = 15;
pub const LUMP_LIGHTVECS: i32 = 0;
pub const LUMP_FACEINFO: i32 = 1;
pub const LUMP_CUBEMAPS: i32 = 2;
pub const LUMP_VERTNORMALS: i32 = 3;
pub const LUMP_LEAF_LIGHTING: i32 = 4;
pub const LUMP_WORLDLIGHTS: i32 = 5;
pub const LUMP_COLLISION: i32 = 6;
pub const LUMP_AINODEGRAPH: i32 = 7;
pub const LUMP_SHADOWMAP: i32 = 8;
pub const LUMP_VERTEX_LIGHT: i32 = 9;
pub const LUMP_UNUSED0: i32 = 10;
pub const LUMP_UNUSED1: i32 = 11;
pub const EXTRA_LUMPS: i32 = 12;
pub const STUDIO_RENDER: i32 = 1;
pub const STUDIO_EVENTS: i32 = 2;
pub const MIPLEVELS: i32 = 4;
pub const VERTEXSIZE: i32 = 7;
pub const MAXLIGHTMAPS: i32 = 4;
pub const MAXDYNLIGHTS: i32 = 8;
pub const MAX_SCOREBOARDNAME: i32 = 32;
pub const MAX_INFO_STRING: i32 = 256;
pub const RES_FATALIFMISSING: i32 = 1;
pub const RES_WASMISSING: i32 = 2;
pub const RES_CUSTOM: i32 = 4;
pub const RES_REQUESTED: i32 = 8;
pub const RES_PRECACHED: i32 = 16;
pub const RES_ALWAYS: i32 = 32;
pub const RES_CHECKFILE: i32 = 128;
pub const FCUST_FROMHPAK: i32 = 1;
pub const FCUST_WIPEDATA: i32 = 2;
pub const FCUST_IGNOREINIT: i32 = 4;
pub const MAXALIASVERTS: i32 = 2048;
pub const MAXALIASFRAMES: i32 = 256;
pub const MAXALIASTRIS: i32 = 4096;
pub const MAX_SKINS: i32 = 32;
pub const SUIT_HUE_START: i32 = 192;
pub const SUIT_HUE_END: i32 = 223;
pub const PLATE_HUE_START: i32 = 160;
pub const PLATE_HUE_END: i32 = 191;
pub const SHIRT_HUE_START: i32 = 16;
pub const SHIRT_HUE_END: i32 = 32;
pub const PANTS_HUE_START: i32 = 96;
pub const PANTS_HUE_END: i32 = 112;
pub const DIST_EPSILON: f64 = 0.03125;
pub const FRAC_EPSILON: f64 = 0.0009765625;
pub const BACKFACE_EPSILON: f64 = 0.01;
pub const MAX_BOX_LEAFS: i32 = 256;
pub const ANIM_CYCLE: i32 = 2;
pub const MOD_FRAMES: i32 = 20;
pub const MAX_DEMOS: i32 = 32;
pub const MAX_MOVIES: i32 = 8;
pub const MAX_CDTRACKS: i32 = 32;
pub const MAX_CLIENT_SPRITES: i32 = 512;
pub const MAX_REQUESTS: i32 = 64;
pub const RF_DRAW_WORLD: i32 = 1;
pub const RF_DRAW_CUBEMAP: i32 = 2;
pub const RF_DRAW_OVERVIEW: i32 = 4;
pub const RF_ONLY_CLIENTDRAW: i32 = 8;
pub const FBEAM_STARTENTITY: i32 = 1;
pub const FBEAM_ENDENTITY: i32 = 2;
pub const FBEAM_FADEIN: i32 = 4;
pub const FBEAM_FADEOUT: i32 = 8;
pub const FBEAM_SINENOISE: i32 = 16;
pub const FBEAM_SOLID: i32 = 32;
pub const FBEAM_SHADEIN: i32 = 64;
pub const FBEAM_SHADEOUT: i32 = 128;
pub const FBEAM_STARTVISIBLE: i32 = 268435456;
pub const FBEAM_ENDVISIBLE: i32 = 536870912;
pub const FBEAM_ISACTIVE: i32 = 1073741824;
pub const FBEAM_FOREVER: i64 = 2147483648;
pub const PORT_ANY: i32 = -1;
pub type byte = u8;
pub type vec_t = f32;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct vec2_t(pub [vec_t; 2usize]);
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct vec3_t(pub [vec_t; 3usize]);
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct vec4_t(pub [vec_t; 4usize]);
pub type quat_t = [vec_t; 4usize];
pub type rgba_t = [byte; 4usize];
pub type rgb_t = [byte; 3usize];
pub type matrix3x4 = [[vec_t; 4usize]; 3usize];
pub type matrix4x4 = [[vec_t; 4usize]; 4usize];
pub type poolhandle_t = u32;
pub const false_: _bindgen_ty_2 = 0;
pub const true_: _bindgen_ty_2 = 1;
pub type _bindgen_ty_2 = ::core::ffi::c_uint;
pub type qboolean = ::core::ffi::c_int;
pub type dword = ::core::ffi::c_uint;
pub type string = [::core::ffi::c_char; 256usize];
pub type fs_offset_t = off_t;
pub type fs_size_t = isize;
pub type pfnCreateInterface_t = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::core::ffi::c_char,
        arg2: *mut ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_void,
>;
pub type mplane_t = mplane_s;
pub const kRenderNormal: _bindgen_ty_3 = 0;
pub const kRenderTransColor: _bindgen_ty_3 = 1;
pub const kRenderTransTexture: _bindgen_ty_3 = 2;
pub const kRenderGlow: _bindgen_ty_3 = 3;
pub const kRenderTransAlpha: _bindgen_ty_3 = 4;
pub const kRenderTransAdd: _bindgen_ty_3 = 5;
pub type _bindgen_ty_3 = ::core::ffi::c_uint;
pub const kRenderFxNone: _bindgen_ty_4 = 0;
pub const kRenderFxPulseSlow: _bindgen_ty_4 = 1;
pub const kRenderFxPulseFast: _bindgen_ty_4 = 2;
pub const kRenderFxPulseSlowWide: _bindgen_ty_4 = 3;
pub const kRenderFxPulseFastWide: _bindgen_ty_4 = 4;
pub const kRenderFxFadeSlow: _bindgen_ty_4 = 5;
pub const kRenderFxFadeFast: _bindgen_ty_4 = 6;
pub const kRenderFxSolidSlow: _bindgen_ty_4 = 7;
pub const kRenderFxSolidFast: _bindgen_ty_4 = 8;
pub const kRenderFxStrobeSlow: _bindgen_ty_4 = 9;
pub const kRenderFxStrobeFast: _bindgen_ty_4 = 10;
pub const kRenderFxStrobeFaster: _bindgen_ty_4 = 11;
pub const kRenderFxFlickerSlow: _bindgen_ty_4 = 12;
pub const kRenderFxFlickerFast: _bindgen_ty_4 = 13;
pub const kRenderFxNoDissipation: _bindgen_ty_4 = 14;
pub const kRenderFxDistort: _bindgen_ty_4 = 15;
pub const kRenderFxHologram: _bindgen_ty_4 = 16;
pub const kRenderFxDeadPlayer: _bindgen_ty_4 = 17;
pub const kRenderFxExplode: _bindgen_ty_4 = 18;
pub const kRenderFxGlowShell: _bindgen_ty_4 = 19;
pub const kRenderFxClampMinScale: _bindgen_ty_4 = 20;
pub const kRenderFxLightMultiplier: _bindgen_ty_4 = 21;
pub type _bindgen_ty_4 = ::core::ffi::c_uint;
pub type func_t = ::core::ffi::c_int;
pub type string_t = ::core::ffi::c_int;
pub type word = ::core::ffi::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct color24 {
    pub r: byte,
    pub g: byte,
    pub b: byte,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct colorVec {
    pub r: ::core::ffi::c_uint,
    pub g: ::core::ffi::c_uint,
    pub b: ::core::ffi::c_uint,
    pub a: ::core::ffi::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct link_s {
    pub prev: *mut link_s,
    pub next: *mut link_s,
}
pub type link_t = link_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct edict_s {
    _unused: [u8; 0],
}
pub type edict_t = edict_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct plane_t {
    pub normal: vec3_t,
    pub dist: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct trace_t {
    pub allsolid: qboolean,
    pub startsolid: qboolean,
    pub inopen: qboolean,
    pub inwater: qboolean,
    pub fraction: f32,
    pub endpos: vec3_t,
    pub plane: plane_t,
    pub ent: *mut edict_t,
    pub hitgroup: ::core::ffi::c_int,
}
pub const FCVAR_ARCHIVE: _bindgen_ty_5 = 1;
pub const FCVAR_USERINFO: _bindgen_ty_5 = 2;
pub const FCVAR_SERVER: _bindgen_ty_5 = 4;
pub const FCVAR_EXTDLL: _bindgen_ty_5 = 8;
pub const FCVAR_CLIENTDLL: _bindgen_ty_5 = 16;
pub const FCVAR_PROTECTED: _bindgen_ty_5 = 32;
pub const FCVAR_SPONLY: _bindgen_ty_5 = 64;
pub const FCVAR_PRINTABLEONLY: _bindgen_ty_5 = 128;
pub const FCVAR_UNLOGGED: _bindgen_ty_5 = 256;
pub const FCVAR_NOEXTRAWHITESPACE: _bindgen_ty_5 = 512;
pub const FCVAR_PRIVILEGED: _bindgen_ty_5 = 1024;
pub const FCVAR_FILTERABLE: _bindgen_ty_5 = 2048;
pub const FCVAR_GLCONFIG: _bindgen_ty_5 = 4096;
pub const FCVAR_CHANGED: _bindgen_ty_5 = 8192;
pub const FCVAR_GAMEUIDLL: _bindgen_ty_5 = 16384;
pub const FCVAR_CHEAT: _bindgen_ty_5 = 32768;
pub const FCVAR_LATCH: _bindgen_ty_5 = 1073741824;
pub type _bindgen_ty_5 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cvar_s {
    pub name: *mut ::core::ffi::c_char,
    pub string: *mut ::core::ffi::c_char,
    pub flags: u32,
    pub value: f32,
    pub next: *mut cvar_s,
}
pub type cvar_t = cvar_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct con_nprint_s {
    pub index: ::core::ffi::c_int,
    pub time_to_live: f32,
    pub color: [f32; 3usize],
}
pub type con_nprint_t = con_nprint_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct usercmd_s {
    pub lerp_msec: ::core::ffi::c_short,
    pub msec: byte,
    pub viewangles: vec3_t,
    pub forwardmove: f32,
    pub sidemove: f32,
    pub upmove: f32,
    pub lightlevel: byte,
    pub buttons: ::core::ffi::c_ushort,
    pub impulse: byte,
    pub weaponselect: byte,
    pub impact_index: ::core::ffi::c_int,
    pub impact_position: vec3_t,
}
pub type usercmd_t = usercmd_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct efrag_s {
    pub leaf: *mut mleaf_s,
    pub leafnext: *mut efrag_s,
    pub entity: *mut cl_entity_s,
    pub entnext: *mut efrag_s,
}
pub type efrag_t = efrag_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mouth_t {
    pub mouthopen: byte,
    pub sndcount: byte,
    pub sndavg: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct latchedvars_t {
    pub prevanimtime: f32,
    pub sequencetime: f32,
    pub prevseqblending: [byte; 2usize],
    pub prevorigin: vec3_t,
    pub prevangles: vec3_t,
    pub prevsequence: ::core::ffi::c_int,
    pub prevframe: f32,
    pub prevcontroller: [byte; 4usize],
    pub prevblending: [byte; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct position_history_t {
    pub animtime: f32,
    pub origin: vec3_t,
    pub angles: vec3_t,
}
pub type cl_entity_t = cl_entity_s;
pub type entity_state_t = entity_state_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct entity_state_s {
    pub entityType: ::core::ffi::c_int,
    pub number: ::core::ffi::c_int,
    pub msg_time: f32,
    pub messagenum: ::core::ffi::c_int,
    pub origin: vec3_t,
    pub angles: vec3_t,
    pub modelindex: ::core::ffi::c_int,
    pub sequence: ::core::ffi::c_int,
    pub frame: f32,
    pub colormap: ::core::ffi::c_int,
    pub skin: ::core::ffi::c_short,
    pub solid: ::core::ffi::c_short,
    pub effects: ::core::ffi::c_int,
    pub scale: f32,
    pub eflags: byte,
    pub rendermode: ::core::ffi::c_int,
    pub renderamt: ::core::ffi::c_int,
    pub rendercolor: color24,
    pub renderfx: ::core::ffi::c_int,
    pub movetype: ::core::ffi::c_int,
    pub animtime: f32,
    pub framerate: f32,
    pub body: ::core::ffi::c_int,
    pub controller: [byte; 4usize],
    pub blending: [byte; 4usize],
    pub velocity: vec3_t,
    pub mins: vec3_t,
    pub maxs: vec3_t,
    pub aiment: ::core::ffi::c_int,
    pub owner: ::core::ffi::c_int,
    pub friction: f32,
    pub gravity: f32,
    pub team: ::core::ffi::c_int,
    pub playerclass: ::core::ffi::c_int,
    pub health: ::core::ffi::c_int,
    pub spectator: qboolean,
    pub weaponmodel: ::core::ffi::c_int,
    pub gaitsequence: ::core::ffi::c_int,
    pub basevelocity: vec3_t,
    pub usehull: ::core::ffi::c_int,
    pub oldbuttons: ::core::ffi::c_int,
    pub onground: ::core::ffi::c_int,
    pub iStepLeft: ::core::ffi::c_int,
    pub flFallVelocity: f32,
    pub fov: f32,
    pub weaponanim: ::core::ffi::c_int,
    pub startpos: vec3_t,
    pub endpos: vec3_t,
    pub impacttime: f32,
    pub starttime: f32,
    pub iuser1: ::core::ffi::c_int,
    pub iuser2: ::core::ffi::c_int,
    pub iuser3: ::core::ffi::c_int,
    pub iuser4: ::core::ffi::c_int,
    pub fuser1: f32,
    pub fuser2: f32,
    pub fuser3: f32,
    pub fuser4: f32,
    pub vuser1: vec3_t,
    pub vuser2: vec3_t,
    pub vuser3: vec3_t,
    pub vuser4: vec3_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clientdata_s {
    pub origin: vec3_t,
    pub velocity: vec3_t,
    pub viewmodel: ::core::ffi::c_int,
    pub punchangle: vec3_t,
    pub flags: ::core::ffi::c_int,
    pub waterlevel: ::core::ffi::c_int,
    pub watertype: ::core::ffi::c_int,
    pub view_ofs: vec3_t,
    pub health: f32,
    pub bInDuck: ::core::ffi::c_int,
    pub weapons: ::core::ffi::c_int,
    pub flTimeStepSound: ::core::ffi::c_int,
    pub flDuckTime: ::core::ffi::c_int,
    pub flSwimTime: ::core::ffi::c_int,
    pub waterjumptime: ::core::ffi::c_int,
    pub maxspeed: f32,
    pub fov: f32,
    pub weaponanim: ::core::ffi::c_int,
    pub m_iId: ::core::ffi::c_int,
    pub ammo_shells: ::core::ffi::c_int,
    pub ammo_nails: ::core::ffi::c_int,
    pub ammo_cells: ::core::ffi::c_int,
    pub ammo_rockets: ::core::ffi::c_int,
    pub m_flNextAttack: f32,
    pub tfstate: ::core::ffi::c_int,
    pub pushmsec: ::core::ffi::c_int,
    pub deadflag: ::core::ffi::c_int,
    pub physinfo: [::core::ffi::c_char; 256usize],
    pub iuser1: ::core::ffi::c_int,
    pub iuser2: ::core::ffi::c_int,
    pub iuser3: ::core::ffi::c_int,
    pub iuser4: ::core::ffi::c_int,
    pub fuser1: f32,
    pub fuser2: f32,
    pub fuser3: f32,
    pub fuser4: f32,
    pub vuser1: vec3_t,
    pub vuser2: vec3_t,
    pub vuser3: vec3_t,
    pub vuser4: vec3_t,
}
pub type clientdata_t = clientdata_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct weapon_data_s {
    pub m_iId: ::core::ffi::c_int,
    pub m_iClip: ::core::ffi::c_int,
    pub m_flNextPrimaryAttack: f32,
    pub m_flNextSecondaryAttack: f32,
    pub m_flTimeWeaponIdle: f32,
    pub m_fInReload: ::core::ffi::c_int,
    pub m_fInSpecialReload: ::core::ffi::c_int,
    pub m_flNextReload: f32,
    pub m_flPumpTime: f32,
    pub m_fReloadTime: f32,
    pub m_fAimedDamage: f32,
    pub m_fNextAimBonus: f32,
    pub m_fInZoom: ::core::ffi::c_int,
    pub m_iWeaponState: ::core::ffi::c_int,
    pub iuser1: ::core::ffi::c_int,
    pub iuser2: ::core::ffi::c_int,
    pub iuser3: ::core::ffi::c_int,
    pub iuser4: ::core::ffi::c_int,
    pub fuser1: f32,
    pub fuser2: f32,
    pub fuser3: f32,
    pub fuser4: f32,
}
pub type weapon_data_t = weapon_data_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct local_state_s {
    pub playerstate: entity_state_t,
    pub client: clientdata_t,
    pub weapondata: [weapon_data_t; 64usize],
}
pub type local_state_t = local_state_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct event_args_s {
    pub flags: ::core::ffi::c_int,
    pub entindex: ::core::ffi::c_int,
    pub origin: [f32; 3usize],
    pub angles: [f32; 3usize],
    pub velocity: [f32; 3usize],
    pub ducking: ::core::ffi::c_int,
    pub fparam1: f32,
    pub fparam2: f32,
    pub iparam1: ::core::ffi::c_int,
    pub iparam2: ::core::ffi::c_int,
    pub bparam1: ::core::ffi::c_int,
    pub bparam2: ::core::ffi::c_int,
}
pub type event_args_t = event_args_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_entity_s {
    pub index: ::core::ffi::c_int,
    pub player: qboolean,
    pub baseline: entity_state_t,
    pub prevstate: entity_state_t,
    pub curstate: entity_state_t,
    pub current_position: ::core::ffi::c_int,
    pub ph: [position_history_t; 64usize],
    pub mouth: mouth_t,
    pub latched: latchedvars_t,
    pub lastmove: f32,
    pub origin: vec3_t,
    pub angles: vec3_t,
    pub attachment: [vec3_t; 4usize],
    pub trivial_accept: ::core::ffi::c_int,
    pub model: *mut model_s,
    pub efrag: *mut efrag_s,
    pub topnode: *mut mnode_s,
    pub syncbase: f32,
    pub visframe: ::core::ffi::c_int,
    pub cvFloorColor: colorVec,
}
pub const AMBIENT_WATER: _bindgen_ty_6 = 0;
pub const AMBIENT_SKY: _bindgen_ty_6 = 1;
pub const AMBIENT_SLIME: _bindgen_ty_6 = 2;
pub const AMBIENT_LAVA: _bindgen_ty_6 = 3;
pub const NUM_AMBIENTS: _bindgen_ty_6 = 4;
pub type _bindgen_ty_6 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dlump_t {
    pub fileofs: ::core::ffi::c_int,
    pub filelen: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dheader_t {
    pub version: ::core::ffi::c_int,
    pub lumps: [dlump_t; 15usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dextrahdr_t {
    pub id: ::core::ffi::c_int,
    pub version: ::core::ffi::c_int,
    pub lumps: [dlump_t; 12usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dmodel_t {
    pub mins: vec3_t,
    pub maxs: vec3_t,
    pub origin: vec3_t,
    pub headnode: [::core::ffi::c_int; 4usize],
    pub visleafs: ::core::ffi::c_int,
    pub firstface: ::core::ffi::c_int,
    pub numfaces: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dmiptexlump_t {
    pub nummiptex: ::core::ffi::c_int,
    pub dataofs: [::core::ffi::c_int; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dvertex_t {
    pub point: vec3_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dplane_t {
    pub normal: vec3_t,
    pub dist: f32,
    pub type_: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dnode_t {
    pub planenum: ::core::ffi::c_int,
    pub children: [::core::ffi::c_short; 2usize],
    pub mins: [::core::ffi::c_short; 3usize],
    pub maxs: [::core::ffi::c_short; 3usize],
    pub firstface: word,
    pub numfaces: word,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dnode32_t {
    pub planenum: ::core::ffi::c_int,
    pub children: [::core::ffi::c_int; 2usize],
    pub mins: [f32; 3usize],
    pub maxs: [f32; 3usize],
    pub firstface: ::core::ffi::c_int,
    pub numfaces: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dleaf_t {
    pub contents: ::core::ffi::c_int,
    pub visofs: ::core::ffi::c_int,
    pub mins: [::core::ffi::c_short; 3usize],
    pub maxs: [::core::ffi::c_short; 3usize],
    pub firstmarksurface: word,
    pub nummarksurfaces: word,
    pub ambient_level: [byte; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dleaf32_t {
    pub contents: ::core::ffi::c_int,
    pub visofs: ::core::ffi::c_int,
    pub mins: [f32; 3usize],
    pub maxs: [f32; 3usize],
    pub firstmarksurface: ::core::ffi::c_int,
    pub nummarksurfaces: ::core::ffi::c_int,
    pub ambient_level: [byte; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dclipnode_t {
    pub planenum: ::core::ffi::c_int,
    pub children: [::core::ffi::c_short; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dclipnode32_t {
    pub planenum: ::core::ffi::c_int,
    pub children: [::core::ffi::c_int; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtexinfo_t {
    pub vecs: [[f32; 4usize]; 2usize],
    pub miptex: ::core::ffi::c_int,
    pub flags: ::core::ffi::c_short,
    pub faceinfo: ::core::ffi::c_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dfaceinfo_t {
    pub landname: [::core::ffi::c_char; 16usize],
    pub texture_step: ::core::ffi::c_ushort,
    pub max_extent: ::core::ffi::c_ushort,
    pub groupid: ::core::ffi::c_short,
}
pub type dmarkface_t = word;
pub type dmarkface32_t = ::core::ffi::c_int;
pub type dsurfedge_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dedge_t {
    pub v: [word; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dedge32_t {
    pub v: [::core::ffi::c_int; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dface_t {
    pub planenum: word,
    pub side: ::core::ffi::c_short,
    pub firstedge: ::core::ffi::c_int,
    pub numedges: ::core::ffi::c_short,
    pub texinfo: ::core::ffi::c_short,
    pub styles: [byte; 4usize],
    pub lightofs: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dface32_t {
    pub planenum: ::core::ffi::c_int,
    pub side: ::core::ffi::c_int,
    pub firstedge: ::core::ffi::c_int,
    pub numedges: ::core::ffi::c_int,
    pub texinfo: ::core::ffi::c_int,
    pub styles: [byte; 4usize],
    pub lightofs: ::core::ffi::c_int,
}
pub const modtype_t_mod_bad: modtype_t = -1;
pub const modtype_t_mod_brush: modtype_t = 0;
pub const modtype_t_mod_sprite: modtype_t = 1;
pub const modtype_t_mod_alias: modtype_t = 2;
pub const modtype_t_mod_studio: modtype_t = 3;
pub type modtype_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mplane_s {
    pub normal: vec3_t,
    pub dist: f32,
    pub type_: byte,
    pub signbits: byte,
    pub pad: [byte; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mvertex_t {
    pub position: vec3_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mclipnode32_s {
    pub planenum: ::core::ffi::c_int,
    pub children: [::core::ffi::c_int; 2usize],
}
pub type mclipnode32_t = mclipnode32_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mclipnode16_s {
    pub planenum: ::core::ffi::c_int,
    pub children: [::core::ffi::c_short; 2usize],
}
pub type mclipnode16_t = mclipnode16_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct medge32_s {
    pub v: [::core::ffi::c_uint; 2usize],
}
pub type medge32_t = medge32_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct medge16_s {
    pub v: [::core::ffi::c_ushort; 2usize],
    pub cachededgeoffset: ::core::ffi::c_uint,
}
pub type medge16_t = medge16_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct texture_s {
    pub name: [::core::ffi::c_char; 16usize],
    pub width: ::core::ffi::c_uint,
    pub height: ::core::ffi::c_uint,
    pub gl_texturenum: ::core::ffi::c_int,
    pub texturechain: *mut msurface_s,
    pub anim_total: ::core::ffi::c_int,
    pub anim_min: ::core::ffi::c_int,
    pub anim_max: ::core::ffi::c_int,
    pub anim_next: *mut texture_s,
    pub alternate_anims: *mut texture_s,
    pub fb_texturenum: ::core::ffi::c_ushort,
    pub dt_texturenum: ::core::ffi::c_ushort,
    pub unused: [::core::ffi::c_uint; 3usize],
}
pub type texture_t = texture_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mfaceinfo_t {
    pub landname: [::core::ffi::c_char; 16usize],
    pub texture_step: ::core::ffi::c_ushort,
    pub max_extent: ::core::ffi::c_ushort,
    pub groupid: ::core::ffi::c_short,
    pub mins: vec3_t,
    pub maxs: vec3_t,
    pub reserved: [isize; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mfacebevel_t {
    pub edges: *mut mplane_t,
    pub numedges: ::core::ffi::c_int,
    pub origin: vec3_t,
    pub radius: vec_t,
    pub contents: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mtexinfo_t {
    pub vecs: [[f32; 4usize]; 2usize],
    pub faceinfo: *mut mfaceinfo_t,
    pub texture: *mut texture_t,
    pub flags: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug)]
pub struct glpoly2_s {
    pub next: *mut glpoly2_s,
    pub chain: *mut glpoly2_s,
    pub numverts: ::core::ffi::c_int,
    pub flags: ::core::ffi::c_int,
    pub verts: __IncompleteArrayField<[f32; 7usize]>,
}
pub type glpoly2_t = glpoly2_s;
pub type mnode_t = mnode_s;
pub type msurface_t = msurface_s;
pub type decal_t = decal_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct decal_s {
    pub pnext: *mut decal_t,
    pub psurface: *mut msurface_t,
    pub dx: f32,
    pub dy: f32,
    pub scale: f32,
    pub texture: ::core::ffi::c_short,
    pub flags: ::core::ffi::c_short,
    pub entityIndex: ::core::ffi::c_short,
    pub position: vec3_t,
    pub polys: *mut glpoly2_t,
    pub reserved: [isize; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mleaf_s {
    pub contents: ::core::ffi::c_int,
    pub visframe: ::core::ffi::c_int,
    pub minmaxs: [f32; 6usize],
    pub parent: *mut mnode_s,
    pub compressed_vis: *mut byte,
    pub efrags: *mut efrag_s,
    pub firstmarksurface: *mut *mut msurface_t,
    pub nummarksurfaces: ::core::ffi::c_int,
    pub cluster: ::core::ffi::c_int,
    pub ambient_sound_level: [byte; 4usize],
}
pub type mleaf_t = mleaf_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mextrasurf_s {
    pub mins: vec3_t,
    pub maxs: vec3_t,
    pub origin: vec3_t,
    pub surf: *mut msurface_s,
    pub dlight_s: ::core::ffi::c_int,
    pub dlight_t: ::core::ffi::c_int,
    pub lightmapmins: [::core::ffi::c_short; 2usize],
    pub lightextents: [::core::ffi::c_short; 2usize],
    pub lmvecs: [[f32; 4usize]; 2usize],
    pub deluxemap: *mut color24,
    pub shadowmap: *mut byte,
    pub lightmapchain: *mut msurface_s,
    pub detailchain: *mut mextrasurf_s,
    pub bevel: *mut mfacebevel_t,
    pub lumachain: *mut mextrasurf_s,
    pub parent: *mut cl_entity_s,
    pub mirrortexturenum: ::core::ffi::c_int,
    pub mirrormatrix: [[f32; 4usize]; 4usize],
    pub grass: *mut grasshdr_s,
    pub grasscount: ::core::ffi::c_ushort,
    pub numverts: ::core::ffi::c_ushort,
    pub firstvertex: ::core::ffi::c_int,
    pub reserved: [isize; 32usize],
}
pub type mextrasurf_t = mextrasurf_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msurface_s {
    pub visframe: ::core::ffi::c_int,
    pub plane: *mut mplane_t,
    pub flags: ::core::ffi::c_int,
    pub firstedge: ::core::ffi::c_int,
    pub numedges: ::core::ffi::c_int,
    pub texturemins: [::core::ffi::c_short; 2usize],
    pub extents: [::core::ffi::c_short; 2usize],
    pub light_s: ::core::ffi::c_int,
    pub light_t: ::core::ffi::c_int,
    pub polys: *mut glpoly2_t,
    pub texturechain: *mut msurface_s,
    pub texinfo: *mut mtexinfo_t,
    pub dlightframe: ::core::ffi::c_int,
    pub dlightbits: ::core::ffi::c_int,
    pub lightmaptexturenum: ::core::ffi::c_int,
    pub styles: [byte; 4usize],
    pub cached_light: [::core::ffi::c_int; 4usize],
    pub info: *mut mextrasurf_t,
    pub samples: *mut color24,
    pub pdecals: *mut decal_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hull_s {
    pub __bindgen_anon_1: hull_s__bindgen_ty_1,
    pub planes: *mut mplane_t,
    pub firstclipnode: ::core::ffi::c_int,
    pub lastclipnode: ::core::ffi::c_int,
    pub clip_mins: vec3_t,
    pub clip_maxs: vec3_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union hull_s__bindgen_ty_1 {
    pub clipnodes16: *mut mclipnode16_t,
    pub clipnodes32: *mut mclipnode32_t,
}
pub type hull_t = hull_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cache_user_s {
    pub data: *mut ::core::ffi::c_void,
}
pub type cache_user_t = cache_user_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct model_s {
    pub name: [::core::ffi::c_char; 64usize],
    pub needload: qboolean,
    pub type_: modtype_t,
    pub numframes: ::core::ffi::c_int,
    pub mempool: poolhandle_t,
    pub flags: ::core::ffi::c_int,
    pub mins: vec3_t,
    pub maxs: vec3_t,
    pub radius: f32,
    pub firstmodelsurface: ::core::ffi::c_int,
    pub nummodelsurfaces: ::core::ffi::c_int,
    pub numsubmodels: ::core::ffi::c_int,
    pub submodels: *mut dmodel_t,
    pub numplanes: ::core::ffi::c_int,
    pub planes: *mut mplane_t,
    pub numleafs: ::core::ffi::c_int,
    pub leafs: *mut mleaf_t,
    pub numvertexes: ::core::ffi::c_int,
    pub vertexes: *mut mvertex_t,
    pub numedges: ::core::ffi::c_int,
    pub __bindgen_anon_1: model_s__bindgen_ty_1,
    pub numnodes: ::core::ffi::c_int,
    pub nodes: *mut mnode_t,
    pub numtexinfo: ::core::ffi::c_int,
    pub texinfo: *mut mtexinfo_t,
    pub numsurfaces: ::core::ffi::c_int,
    pub surfaces: *mut msurface_t,
    pub numsurfedges: ::core::ffi::c_int,
    pub surfedges: *mut ::core::ffi::c_int,
    pub numclipnodes: ::core::ffi::c_int,
    pub __bindgen_anon_2: model_s__bindgen_ty_2,
    pub nummarksurfaces: ::core::ffi::c_int,
    pub marksurfaces: *mut *mut msurface_t,
    pub hulls: [hull_t; 4usize],
    pub numtextures: ::core::ffi::c_int,
    pub textures: *mut *mut texture_t,
    pub visdata: *mut byte,
    pub lightdata: *mut color24,
    pub entities: *mut ::core::ffi::c_char,
    pub cache: cache_user_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union model_s__bindgen_ty_1 {
    pub edges16: *mut medge16_t,
    pub edges32: *mut medge32_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union model_s__bindgen_ty_2 {
    pub clipnodes16: *mut mclipnode16_t,
    pub clipnodes32: *mut mclipnode32_t,
}
pub type model_t = model_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct alight_s {
    pub ambientlight: ::core::ffi::c_int,
    pub shadelight: ::core::ffi::c_int,
    pub color: vec3_t,
    pub plightvec: *mut f32,
}
pub type alight_t = alight_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct auxvert_s {
    pub fv: [f32; 3usize],
}
pub type auxvert_t = auxvert_s;
pub const resourcetype_t_t_sound: resourcetype_t = 0;
pub const resourcetype_t_t_skin: resourcetype_t = 1;
pub const resourcetype_t_t_model: resourcetype_t = 2;
pub const resourcetype_t_t_decal: resourcetype_t = 3;
pub const resourcetype_t_t_generic: resourcetype_t = 4;
pub const resourcetype_t_t_eventscript: resourcetype_t = 5;
pub const resourcetype_t_t_world: resourcetype_t = 6;
pub type resourcetype_t = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _resourceinfo_t {
    pub size: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct resourceinfo_s {
    pub info: [_resourceinfo_t; 8usize],
}
pub type resourceinfo_t = resourceinfo_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct resource_s {
    pub szFileName: [::core::ffi::c_char; 64usize],
    pub type_: resourcetype_t,
    pub nIndex: ::core::ffi::c_int,
    pub nDownloadSize: ::core::ffi::c_int,
    pub ucFlags: ::core::ffi::c_uchar,
    pub rgucMD5_hash: [::core::ffi::c_uchar; 16usize],
    pub playernum: ::core::ffi::c_uchar,
    pub rguc_reserved: [::core::ffi::c_uchar; 32usize],
    pub ucExtraFlags: ::core::ffi::c_ushort,
    pub pNext: *mut resource_s,
    pub pPrev: *mut resource_s,
}
pub type resource_t = resource_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct customization_s {
    pub bInUse: qboolean,
    pub resource: resource_t,
    pub bTranslated: qboolean,
    pub nUserData1: ::core::ffi::c_int,
    pub nUserData2: ::core::ffi::c_int,
    pub pInfo: *mut ::core::ffi::c_void,
    pub pBuffer: *mut ::core::ffi::c_void,
    pub pNext: *mut customization_s,
}
pub type customization_t = customization_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct player_info_s {
    pub userid: ::core::ffi::c_int,
    pub userinfo: [::core::ffi::c_char; 256usize],
    pub name: [::core::ffi::c_char; 32usize],
    pub spectator: ::core::ffi::c_int,
    pub ping: ::core::ffi::c_int,
    pub packet_loss: ::core::ffi::c_int,
    pub model: [::core::ffi::c_char; 64usize],
    pub topcolor: ::core::ffi::c_int,
    pub bottomcolor: ::core::ffi::c_int,
    pub renderframe: ::core::ffi::c_int,
    pub gaitsequence: ::core::ffi::c_int,
    pub gaitframe: f32,
    pub gaityaw: f32,
    pub prevgaitorigin: vec3_t,
    pub customdata: customization_t,
    pub hashedcdkey: [::core::ffi::c_char; 16usize],
}
pub type player_info_t = player_info_s;
pub const spriteframetype_t_SPR_SINGLE: spriteframetype_t = 0;
pub const spriteframetype_t_SPR_GROUP: spriteframetype_t = 1;
pub const spriteframetype_t_SPR_ANGLED: spriteframetype_t = 2;
pub type spriteframetype_t = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mspriteframe_s {
    pub width: ::core::ffi::c_int,
    pub height: ::core::ffi::c_int,
    pub up: f32,
    pub down: f32,
    pub left: f32,
    pub right: f32,
    pub gl_texturenum: ::core::ffi::c_int,
}
pub type mspriteframe_t = mspriteframe_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mspritegroup_t {
    pub numframes: ::core::ffi::c_int,
    pub intervals: *mut f32,
    pub frames: [*mut mspriteframe_t; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mspriteframedesc_t {
    pub type_: spriteframetype_t,
    pub frameptr: *mut mspriteframe_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msprite_t {
    pub type_: ::core::ffi::c_short,
    pub texFormat: ::core::ffi::c_short,
    pub maxwidth: ::core::ffi::c_int,
    pub maxheight: ::core::ffi::c_int,
    pub numframes: ::core::ffi::c_int,
    pub radius: ::core::ffi::c_int,
    pub facecull: ::core::ffi::c_int,
    pub synctype: ::core::ffi::c_int,
    pub frames: [mspriteframedesc_t; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct trivertex_t {
    pub v: [byte; 3usize],
    pub lightnormalindex: byte,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct maliasframedesc_t {
    pub firstpose: ::core::ffi::c_int,
    pub numposes: ::core::ffi::c_int,
    pub bboxmin: trivertex_t,
    pub bboxmax: trivertex_t,
    pub interval: f32,
    pub name: [::core::ffi::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct aliashdr_t {
    pub ident: ::core::ffi::c_int,
    pub version: ::core::ffi::c_int,
    pub scale: vec3_t,
    pub scale_origin: vec3_t,
    pub boundingradius: f32,
    pub eyeposition: vec3_t,
    pub numskins: ::core::ffi::c_int,
    pub skinwidth: ::core::ffi::c_int,
    pub skinheight: ::core::ffi::c_int,
    pub numverts: ::core::ffi::c_int,
    pub numtris: ::core::ffi::c_int,
    pub numframes: ::core::ffi::c_int,
    pub synctype: ::core::ffi::c_int,
    pub flags: ::core::ffi::c_int,
    pub size: f32,
    pub pposeverts: *mut *const trivertex_t,
    pub reserved: [isize; 7usize],
    pub numposes: ::core::ffi::c_int,
    pub poseverts: ::core::ffi::c_int,
    pub posedata: *mut trivertex_t,
    pub commands: *mut ::core::ffi::c_int,
    pub gl_texturenum: [[::core::ffi::c_ushort; 4usize]; 32usize],
    pub fb_texturenum: [[::core::ffi::c_ushort; 4usize]; 32usize],
    pub gl_reserved0: [[::core::ffi::c_ushort; 4usize]; 32usize],
    pub gl_reserved1: [[::core::ffi::c_ushort; 4usize]; 32usize],
    pub gl_reserved2: [[::core::ffi::c_ushort; 4usize]; 32usize],
    pub frames: [maliasframedesc_t; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kbutton_t {
    pub down: [::core::ffi::c_int; 2usize],
    pub state: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct screenfade_s {
    pub fadeSpeed: f32,
    pub fadeEnd: f32,
    pub fadeTotalEnd: f32,
    pub fadeReset: f32,
    pub fader: byte,
    pub fadeg: byte,
    pub fadeb: byte,
    pub fadealpha: byte,
    pub fadeFlags: ::core::ffi::c_int,
}
pub type screenfade_t = screenfade_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pmplane_t {
    pub normal: vec3_t,
    pub dist: f32,
}
pub type pmtrace_t = pmtrace_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pmtrace_s {
    pub allsolid: qboolean,
    pub startsolid: qboolean,
    pub inopen: qboolean,
    pub inwater: qboolean,
    pub fraction: f32,
    pub endpos: vec3_t,
    pub plane: pmplane_t,
    pub ent: ::core::ffi::c_int,
    pub deltavelocity: vec3_t,
    pub hitgroup: ::core::ffi::c_int,
}
pub type movevars_t = movevars_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct movevars_s {
    pub gravity: f32,
    pub stopspeed: f32,
    pub maxspeed: f32,
    pub spectatormaxspeed: f32,
    pub accelerate: f32,
    pub airaccelerate: f32,
    pub wateraccelerate: f32,
    pub friction: f32,
    pub edgefriction: f32,
    pub waterfriction: f32,
    pub entgravity: f32,
    pub bounce: f32,
    pub stepsize: f32,
    pub maxvelocity: f32,
    pub zmax: f32,
    pub waveHeight: f32,
    pub footsteps: qboolean,
    pub skyName: [::core::ffi::c_char; 32usize],
    pub rollangle: f32,
    pub rollspeed: f32,
    pub skycolor_r: f32,
    pub skycolor_g: f32,
    pub skycolor_b: f32,
    pub skyvec_x: f32,
    pub skyvec_y: f32,
    pub skyvec_z: f32,
    pub features: ::core::ffi::c_int,
    pub fog_settings: ::core::ffi::c_int,
    pub wateralpha: f32,
    pub skydir_x: f32,
    pub skydir_y: f32,
    pub skydir_z: f32,
    pub skyangle: f32,
}
extern "C" {
    pub static mut movevars: movevars_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ref_params_s {
    pub vieworg: vec3_t,
    pub viewangles: vec3_t,
    pub forward: vec3_t,
    pub right: vec3_t,
    pub up: vec3_t,
    pub frametime: f32,
    pub time: f32,
    pub intermission: ::core::ffi::c_int,
    pub paused: ::core::ffi::c_int,
    pub spectator: ::core::ffi::c_int,
    pub onground: ::core::ffi::c_int,
    pub waterlevel: ::core::ffi::c_int,
    pub simvel: vec3_t,
    pub simorg: vec3_t,
    pub viewheight: vec3_t,
    pub idealpitch: f32,
    pub cl_viewangles: vec3_t,
    pub health: ::core::ffi::c_int,
    pub crosshairangle: vec3_t,
    pub viewsize: f32,
    pub punchangle: vec3_t,
    pub maxclients: ::core::ffi::c_int,
    pub viewentity: ::core::ffi::c_int,
    pub playernum: ::core::ffi::c_int,
    pub max_entities: ::core::ffi::c_int,
    pub demoplayback: ::core::ffi::c_int,
    pub hardware: ::core::ffi::c_int,
    pub smoothing: ::core::ffi::c_int,
    pub cmd: *mut usercmd_s,
    pub movevars: *mut movevars_s,
    pub viewport: [::core::ffi::c_int; 4usize],
    pub nextView: ::core::ffi::c_int,
    pub onlyClientDraw: ::core::ffi::c_int,
}
pub type ref_params_t = ref_params_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ref_overview_s {
    pub origin: vec3_t,
    pub rotated: qboolean,
    pub xLeft: f32,
    pub xRight: f32,
    pub yTop: f32,
    pub yBottom: f32,
    pub zFar: f32,
    pub zNear: f32,
    pub flZoom: f32,
}
pub type ref_overview_t = ref_overview_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ref_viewpass_s {
    pub viewport: [::core::ffi::c_int; 4usize],
    pub vieworigin: vec3_t,
    pub viewangles: vec3_t,
    pub viewentity: ::core::ffi::c_int,
    pub fov_x: f32,
    pub fov_y: f32,
    pub flags: ::core::ffi::c_int,
}
pub type ref_viewpass_t = ref_viewpass_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wrect_s {
    pub left: ::core::ffi::c_int,
    pub right: ::core::ffi::c_int,
    pub top: ::core::ffi::c_int,
    pub bottom: ::core::ffi::c_int,
}
pub type wrect_t = wrect_s;
pub const ptype_t_pt_static: ptype_t = 0;
pub const ptype_t_pt_grav: ptype_t = 1;
pub const ptype_t_pt_slowgrav: ptype_t = 2;
pub const ptype_t_pt_fire: ptype_t = 3;
pub const ptype_t_pt_explode: ptype_t = 4;
pub const ptype_t_pt_explode2: ptype_t = 5;
pub const ptype_t_pt_blob: ptype_t = 6;
pub const ptype_t_pt_blob2: ptype_t = 7;
pub const ptype_t_pt_vox_slowgrav: ptype_t = 8;
pub const ptype_t_pt_vox_grav: ptype_t = 9;
pub const ptype_t_pt_clientcustom: ptype_t = 10;
pub type ptype_t = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct particle_s {
    pub org: vec3_t,
    pub color: ::core::ffi::c_short,
    pub packedColor: ::core::ffi::c_short,
    pub next: *mut particle_s,
    pub vel: vec3_t,
    pub ramp: f32,
    pub die: f32,
    pub type_: ptype_t,
    pub deathfunc: ::core::option::Option<unsafe extern "C" fn(particle: *mut particle_s)>,
    pub callback:
        ::core::option::Option<unsafe extern "C" fn(particle: *mut particle_s, frametime: f32)>,
    pub context: ::core::ffi::c_uchar,
}
pub type particle_t = particle_s;
pub type BEAM = beam_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct beam_s {
    pub next: *mut BEAM,
    pub type_: ::core::ffi::c_int,
    pub flags: ::core::ffi::c_int,
    pub source: vec3_t,
    pub target: vec3_t,
    pub delta: vec3_t,
    pub t: f32,
    pub freq: f32,
    pub die: f32,
    pub width: f32,
    pub amplitude: f32,
    pub r: f32,
    pub g: f32,
    pub b: f32,
    pub brightness: f32,
    pub speed: f32,
    pub frameRate: f32,
    pub frame: f32,
    pub segments: ::core::ffi::c_int,
    pub startEntity: ::core::ffi::c_int,
    pub endEntity: ::core::ffi::c_int,
    pub modelIndex: ::core::ffi::c_int,
    pub frameCount: ::core::ffi::c_int,
    pub pFollowModel: *mut model_s,
    pub particles: *mut particle_s,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dlight_s {
    pub origin: vec3_t,
    pub radius: f32,
    pub color: color24,
    pub die: f32,
    pub decay: f32,
    pub minlight: f32,
    pub key: ::core::ffi::c_int,
    pub dark: qboolean,
}
pub type dlight_t = dlight_s;
pub const netadrtype_e_NA_UNDEFINED: netadrtype_e = 0;
pub const netadrtype_e_NA_LOOPBACK: netadrtype_e = 1;
pub const netadrtype_e_NA_BROADCAST: netadrtype_e = 2;
pub const netadrtype_e_NA_IP: netadrtype_e = 3;
pub const netadrtype_e_NA_IPX: netadrtype_e = 4;
pub const netadrtype_e_NA_BROADCAST_IPX: netadrtype_e = 5;
pub const netadrtype_e_NA_IP6: netadrtype_e = 6;
pub const netadrtype_e_NA_MULTICAST_IP6: netadrtype_e = 7;
pub type netadrtype_e = ::core::ffi::c_uint;
pub use self::netadrtype_e as netadrtype_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union netadr_s__bindgen_ty_1 {
    pub ip6_1: [u8; 14usize],
    pub __bindgen_anon_1: netadr_s__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct netadr_s__bindgen_ty_1__bindgen_ty_1 {
    pub __bindgen_anon_1: netadr_s__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub ipx: [u8; 10usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union netadr_s__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub ip: [u8; 4usize],
    pub ip4: u32,
}
pub type netadr_t = netadr_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grasshdr_s {
    pub _address: u8,
}
