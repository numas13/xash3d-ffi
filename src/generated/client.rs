/* automatically generated by rust-bindgen 0.72.0 */

pub const MAX_ALIAS_NAME: u32 = 32;
pub const SCRINFO_SCREENFLASH: u32 = 1;
pub const SCRINFO_STRETCHED: u32 = 2;
pub const CLDLL_INTERFACE_VERSION: u32 = 7;
pub const VoiceTweakControl_MicrophoneVolume: VoiceTweakControl = 0;
pub const VoiceTweakControl_OtherSpeakerScale: VoiceTweakControl = 1;
pub type VoiceTweakControl = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IVoiceTweak_s {
    pub StartVoiceTweakMode: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub EndVoiceTweakMode: ::core::option::Option<unsafe extern "C" fn()>,
    pub SetControlFloat:
        ::core::option::Option<unsafe extern "C" fn(iControl: VoiceTweakControl, value: f32)>,
    pub GetControlFloat:
        ::core::option::Option<unsafe extern "C" fn(iControl: VoiceTweakControl) -> f32>,
}
pub type IVoiceTweak = IVoiceTweak_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct demo_api_s {
    pub IsRecording: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub IsPlayingback: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub IsTimeDemo: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub WriteBuffer: ::core::option::Option<
        unsafe extern "C" fn(size: ::core::ffi::c_int, buffer: *mut ::core::ffi::c_uchar),
    >,
}
pub type demo_api_t = demo_api_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmdalias_s {
    pub next: *mut cmdalias_s,
    pub name: [::core::ffi::c_char; 32usize],
    pub value: *mut ::core::ffi::c_char,
}
pub type cmdalias_t = cmdalias_s;
pub type HSPRITE = ::core::ffi::c_int;
pub type pfnUserMsgHook = ::core::option::Option<
    unsafe extern "C" fn(
        pszName: *const ::core::ffi::c_char,
        iSize: ::core::ffi::c_int,
        pbuf: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCREENINFO_s {
    pub iSize: ::core::ffi::c_int,
    pub iWidth: ::core::ffi::c_int,
    pub iHeight: ::core::ffi::c_int,
    pub iFlags: ::core::ffi::c_int,
    pub iCharHeight: ::core::ffi::c_int,
    pub charWidths: [::core::ffi::c_short; 256usize],
}
pub type SCREENINFO = SCREENINFO_s;
#[repr(C)]
pub struct client_data_s {
    pub origin: vec3_t,
    pub viewangles: vec3_t,
    pub iWeaponBits: ::core::ffi::c_int,
    pub fov: f32,
}
pub type client_data_t = client_data_s;
#[repr(C)]
pub struct client_sprite_s {
    pub szName: [::core::ffi::c_char; 64usize],
    pub szSprite: [::core::ffi::c_char; 64usize],
    pub hspr: ::core::ffi::c_int,
    pub iRes: ::core::ffi::c_int,
    pub rc: wrect_t,
}
pub type client_sprite_t = client_sprite_s;
#[repr(C)]
pub struct client_textmessage_s {
    pub effect: ::core::ffi::c_int,
    pub r1: byte,
    pub g1: byte,
    pub b1: byte,
    pub a1: byte,
    pub r2: byte,
    pub g2: byte,
    pub b2: byte,
    pub a2: byte,
    pub x: f32,
    pub y: f32,
    pub fadein: f32,
    pub fadeout: f32,
    pub holdtime: f32,
    pub fxtime: f32,
    pub pName: *const ::core::ffi::c_char,
    pub pMessage: *const ::core::ffi::c_char,
}
pub type client_textmessage_t = client_textmessage_s;
#[repr(C)]
pub struct hud_player_info_s {
    pub name: *mut ::core::ffi::c_char,
    pub ping: ::core::ffi::c_short,
    pub thisplayer: byte,
    pub spectator: byte,
    pub packetloss: byte,
    pub model: *mut ::core::ffi::c_char,
    pub topcolor: ::core::ffi::c_short,
    pub bottomcolor: ::core::ffi::c_short,
    pub m_nSteamID: u64,
}
pub type hud_player_info_t = hud_player_info_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagPOINT {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_enginefuncs_s {
    pub pfnSPR_Load: ::core::option::Option<
        unsafe extern "C" fn(szPicName: *const ::core::ffi::c_char) -> HSPRITE,
    >,
    pub pfnSPR_Frames:
        ::core::option::Option<unsafe extern "C" fn(hPic: HSPRITE) -> ::core::ffi::c_int>,
    pub pfnSPR_Height: ::core::option::Option<
        unsafe extern "C" fn(hPic: HSPRITE, frame: ::core::ffi::c_int) -> ::core::ffi::c_int,
    >,
    pub pfnSPR_Width: ::core::option::Option<
        unsafe extern "C" fn(hPic: HSPRITE, frame: ::core::ffi::c_int) -> ::core::ffi::c_int,
    >,
    pub pfnSPR_Set: ::core::option::Option<
        unsafe extern "C" fn(
            hPic: HSPRITE,
            r: ::core::ffi::c_int,
            g: ::core::ffi::c_int,
            b: ::core::ffi::c_int,
        ),
    >,
    pub pfnSPR_Draw: ::core::option::Option<
        unsafe extern "C" fn(
            frame: ::core::ffi::c_int,
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            prc: *const wrect_t,
        ),
    >,
    pub pfnSPR_DrawHoles: ::core::option::Option<
        unsafe extern "C" fn(
            frame: ::core::ffi::c_int,
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            prc: *const wrect_t,
        ),
    >,
    pub pfnSPR_DrawAdditive: ::core::option::Option<
        unsafe extern "C" fn(
            frame: ::core::ffi::c_int,
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            prc: *const wrect_t,
        ),
    >,
    pub pfnSPR_EnableScissor: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
        ),
    >,
    pub pfnSPR_DisableScissor: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnSPR_GetList: ::core::option::Option<
        unsafe extern "C" fn(
            psz: *mut ::core::ffi::c_char,
            piCount: *mut ::core::ffi::c_int,
        ) -> *mut client_sprite_t,
    >,
    pub pfnFillRGBA: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
            r: ::core::ffi::c_int,
            g: ::core::ffi::c_int,
            b: ::core::ffi::c_int,
            a: ::core::ffi::c_int,
        ),
    >,
    pub pfnGetScreenInfo: ::core::option::Option<
        unsafe extern "C" fn(pscrinfo: *mut SCREENINFO) -> ::core::ffi::c_int,
    >,
    pub pfnSetCrosshair: ::core::option::Option<
        unsafe extern "C" fn(
            hspr: HSPRITE,
            rc: wrect_t,
            r: ::core::ffi::c_int,
            g: ::core::ffi::c_int,
            b: ::core::ffi::c_int,
        ),
    >,
    pub pfnRegisterVariable: ::core::option::Option<
        unsafe extern "C" fn(
            szName: *const ::core::ffi::c_char,
            szValue: *const ::core::ffi::c_char,
            flags: ::core::ffi::c_int,
        ) -> *mut cvar_s,
    >,
    pub pfnGetCvarFloat:
        ::core::option::Option<unsafe extern "C" fn(szName: *const ::core::ffi::c_char) -> f32>,
    pub pfnGetCvarString: ::core::option::Option<
        unsafe extern "C" fn(szName: *const ::core::ffi::c_char) -> *const ::core::ffi::c_char,
    >,
    pub pfnAddCommand: ::core::option::Option<
        unsafe extern "C" fn(
            cmd_name: *const ::core::ffi::c_char,
            function: ::core::option::Option<unsafe extern "C" fn()>,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnHookUserMsg: ::core::option::Option<
        unsafe extern "C" fn(
            szMsgName: *const ::core::ffi::c_char,
            pfn: pfnUserMsgHook,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnServerCmd: ::core::option::Option<
        unsafe extern "C" fn(szCmdString: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub pfnClientCmd: ::core::option::Option<
        unsafe extern "C" fn(szCmdString: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub pfnGetPlayerInfo: ::core::option::Option<
        unsafe extern "C" fn(ent_num: ::core::ffi::c_int, pinfo: *mut hud_player_info_t),
    >,
    pub pfnPlaySoundByName: ::core::option::Option<
        unsafe extern "C" fn(szSound: *const ::core::ffi::c_char, volume: f32),
    >,
    pub pfnPlaySoundByIndex:
        ::core::option::Option<unsafe extern "C" fn(iSound: ::core::ffi::c_int, volume: f32)>,
    pub pfnAngleVectors: ::core::option::Option<
        unsafe extern "C" fn(
            vecAngles: *const f32,
            forward: *mut f32,
            right: *mut f32,
            up: *mut f32,
        ),
    >,
    pub pfnTextMessageGet: ::core::option::Option<
        unsafe extern "C" fn(pName: *const ::core::ffi::c_char) -> *mut client_textmessage_t,
    >,
    pub pfnDrawCharacter: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            number: ::core::ffi::c_int,
            r: ::core::ffi::c_int,
            g: ::core::ffi::c_int,
            b: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnDrawConsoleString: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            string: *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnDrawSetTextColor: ::core::option::Option<unsafe extern "C" fn(r: f32, g: f32, b: f32)>,
    pub pfnDrawConsoleStringLen: ::core::option::Option<
        unsafe extern "C" fn(
            string: *const ::core::ffi::c_char,
            length: *mut ::core::ffi::c_int,
            height: *mut ::core::ffi::c_int,
        ),
    >,
    pub pfnConsolePrint:
        ::core::option::Option<unsafe extern "C" fn(string: *const ::core::ffi::c_char)>,
    pub pfnCenterPrint:
        ::core::option::Option<unsafe extern "C" fn(string: *const ::core::ffi::c_char)>,
    pub GetWindowCenterX: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub GetWindowCenterY: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub GetViewAngles: ::core::option::Option<unsafe extern "C" fn(arg1: *mut f32)>,
    pub SetViewAngles: ::core::option::Option<unsafe extern "C" fn(arg1: *mut f32)>,
    pub GetMaxClients: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub Cvar_SetValue:
        ::core::option::Option<unsafe extern "C" fn(cvar: *const ::core::ffi::c_char, value: f32)>,
    pub Cmd_Argc: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub Cmd_Argv: ::core::option::Option<
        unsafe extern "C" fn(arg: ::core::ffi::c_int) -> *const ::core::ffi::c_char,
    >,
    pub Con_Printf:
        ::core::option::Option<unsafe extern "C" fn(fmt: *const ::core::ffi::c_char, ...)>,
    pub Con_DPrintf:
        ::core::option::Option<unsafe extern "C" fn(fmt: *const ::core::ffi::c_char, ...)>,
    pub Con_NPrintf: ::core::option::Option<
        unsafe extern "C" fn(pos: ::core::ffi::c_int, fmt: *const ::core::ffi::c_char, ...),
    >,
    pub Con_NXPrintf: ::core::option::Option<
        unsafe extern "C" fn(info: *mut con_nprint_s, fmt: *const ::core::ffi::c_char, ...),
    >,
    pub PhysInfo_ValueForKey: ::core::option::Option<
        unsafe extern "C" fn(key: *const ::core::ffi::c_char) -> *const ::core::ffi::c_char,
    >,
    pub ServerInfo_ValueForKey: ::core::option::Option<
        unsafe extern "C" fn(key: *const ::core::ffi::c_char) -> *const ::core::ffi::c_char,
    >,
    pub GetClientMaxspeed: ::core::option::Option<unsafe extern "C" fn() -> f32>,
    pub CheckParm: ::core::option::Option<
        unsafe extern "C" fn(
            parm: *mut ::core::ffi::c_char,
            ppnext: *mut *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int,
    >,
    pub Key_Event: ::core::option::Option<
        unsafe extern "C" fn(key: ::core::ffi::c_int, down: ::core::ffi::c_int),
    >,
    pub GetMousePosition: ::core::option::Option<
        unsafe extern "C" fn(mx: *mut ::core::ffi::c_int, my: *mut ::core::ffi::c_int),
    >,
    pub IsNoClipping: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub GetLocalPlayer: ::core::option::Option<unsafe extern "C" fn() -> *mut cl_entity_s>,
    pub GetViewModel: ::core::option::Option<unsafe extern "C" fn() -> *mut cl_entity_s>,
    pub GetEntityByIndex:
        ::core::option::Option<unsafe extern "C" fn(idx: ::core::ffi::c_int) -> *mut cl_entity_s>,
    pub GetClientTime: ::core::option::Option<unsafe extern "C" fn() -> f32>,
    pub V_CalcShake: ::core::option::Option<unsafe extern "C" fn()>,
    pub V_ApplyShake: ::core::option::Option<
        unsafe extern "C" fn(origin: *mut f32, angles: *mut f32, factor: f32),
    >,
    pub PM_PointContents: ::core::option::Option<
        unsafe extern "C" fn(
            point: *const f32,
            truecontents: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub PM_WaterEntity:
        ::core::option::Option<unsafe extern "C" fn(p: *const f32) -> ::core::ffi::c_int>,
    pub PM_TraceLine: ::core::option::Option<
        unsafe extern "C" fn(
            start: *mut f32,
            end: *mut f32,
            flags: ::core::ffi::c_int,
            usehull: ::core::ffi::c_int,
            ignore_pe: ::core::ffi::c_int,
        ) -> *mut pmtrace_s,
    >,
    pub CL_LoadModel: ::core::option::Option<
        unsafe extern "C" fn(
            modelname: *const ::core::ffi::c_char,
            index: *mut ::core::ffi::c_int,
        ) -> *mut model_s,
    >,
    pub CL_CreateVisibleEntity: ::core::option::Option<
        unsafe extern "C" fn(
            type_: ::core::ffi::c_int,
            ent: *mut cl_entity_s,
        ) -> ::core::ffi::c_int,
    >,
    pub GetSpritePointer:
        ::core::option::Option<unsafe extern "C" fn(hSprite: HSPRITE) -> *const model_s>,
    pub pfnPlaySoundByNameAtLocation: ::core::option::Option<
        unsafe extern "C" fn(szSound: *mut ::core::ffi::c_char, volume: f32, origin: *mut f32),
    >,
    pub pfnPrecacheEvent: ::core::option::Option<
        unsafe extern "C" fn(
            type_: ::core::ffi::c_int,
            psz: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_ushort,
    >,
    pub pfnPlaybackEvent: ::core::option::Option<
        unsafe extern "C" fn(
            flags: ::core::ffi::c_int,
            pInvoker: *const edict_s,
            eventindex: ::core::ffi::c_ushort,
            delay: f32,
            origin: *mut f32,
            angles: *mut f32,
            fparam1: f32,
            fparam2: f32,
            iparam1: ::core::ffi::c_int,
            iparam2: ::core::ffi::c_int,
            bparam1: ::core::ffi::c_int,
            bparam2: ::core::ffi::c_int,
        ),
    >,
    pub pfnWeaponAnim: ::core::option::Option<
        unsafe extern "C" fn(iAnim: ::core::ffi::c_int, body: ::core::ffi::c_int),
    >,
    pub pfnRandomFloat:
        ::core::option::Option<unsafe extern "C" fn(flLow: f32, flHigh: f32) -> f32>,
    pub pfnRandomLong: ::core::option::Option<
        unsafe extern "C" fn(
            lLow: ::core::ffi::c_int,
            lHigh: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnHookEvent: ::core::option::Option<
        unsafe extern "C" fn(
            name: *const ::core::ffi::c_char,
            pfnEvent: ::core::option::Option<unsafe extern "C" fn(args: *mut event_args_s)>,
        ),
    >,
    pub Con_IsVisible: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnGetGameDirectory:
        ::core::option::Option<unsafe extern "C" fn() -> *const ::core::ffi::c_char>,
    pub pfnGetCvarPointer: ::core::option::Option<
        unsafe extern "C" fn(szName: *const ::core::ffi::c_char) -> *mut cvar_s,
    >,
    pub Key_LookupBinding: ::core::option::Option<
        unsafe extern "C" fn(pBinding: *const ::core::ffi::c_char) -> *const ::core::ffi::c_char,
    >,
    pub pfnGetLevelName:
        ::core::option::Option<unsafe extern "C" fn() -> *const ::core::ffi::c_char>,
    pub pfnGetScreenFade: ::core::option::Option<unsafe extern "C" fn(fade: *mut screenfade_s)>,
    pub pfnSetScreenFade: ::core::option::Option<unsafe extern "C" fn(fade: *mut screenfade_s)>,
    pub VGui_GetPanel: ::core::option::Option<unsafe extern "C" fn() -> *mut ::core::ffi::c_void>,
    pub VGui_ViewportPaintBackground:
        ::core::option::Option<unsafe extern "C" fn(extents: *mut [::core::ffi::c_int; 4usize])>,
    pub COM_LoadFile: ::core::option::Option<
        unsafe extern "C" fn(
            path: *const ::core::ffi::c_char,
            usehunk: ::core::ffi::c_int,
            pLength: *mut ::core::ffi::c_int,
        ) -> *mut byte,
    >,
    pub COM_ParseFile: ::core::option::Option<
        unsafe extern "C" fn(
            data: *mut ::core::ffi::c_char,
            token: *mut ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char,
    >,
    pub COM_FreeFile:
        ::core::option::Option<unsafe extern "C" fn(buffer: *mut ::core::ffi::c_void)>,
    pub pTriAPI: *mut triangleapi_s,
    pub pEfxAPI: *mut efx_api_s,
    pub pEventAPI: *mut event_api_s,
    pub pDemoAPI: *mut demo_api_s,
    pub pNetAPI: *mut net_api_s,
    pub pVoiceTweak: *mut IVoiceTweak_s,
    pub IsSpectateOnly: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub LoadMapSprite: ::core::option::Option<
        unsafe extern "C" fn(filename: *const ::core::ffi::c_char) -> *mut model_s,
    >,
    pub COM_AddAppDirectoryToSearchPath: ::core::option::Option<
        unsafe extern "C" fn(
            pszBaseDir: *const ::core::ffi::c_char,
            appName: *const ::core::ffi::c_char,
        ),
    >,
    pub COM_ExpandFilename: ::core::option::Option<
        unsafe extern "C" fn(
            fileName: *const ::core::ffi::c_char,
            nameOutBuffer: *mut ::core::ffi::c_char,
            nameOutBufferSize: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub PlayerInfo_ValueForKey: ::core::option::Option<
        unsafe extern "C" fn(
            playerNum: ::core::ffi::c_int,
            key: *const ::core::ffi::c_char,
        ) -> *const ::core::ffi::c_char,
    >,
    pub PlayerInfo_SetValueForKey: ::core::option::Option<
        unsafe extern "C" fn(key: *const ::core::ffi::c_char, value: *const ::core::ffi::c_char),
    >,
    pub GetPlayerUniqueID: ::core::option::Option<
        unsafe extern "C" fn(
            iPlayer: ::core::ffi::c_int,
            playerID: *mut [::core::ffi::c_char; 16usize],
        ) -> qboolean,
    >,
    pub GetTrackerIDForPlayer: ::core::option::Option<
        unsafe extern "C" fn(playerSlot: ::core::ffi::c_int) -> ::core::ffi::c_int,
    >,
    pub GetPlayerForTrackerID: ::core::option::Option<
        unsafe extern "C" fn(trackerID: ::core::ffi::c_int) -> ::core::ffi::c_int,
    >,
    pub pfnServerCmdUnreliable: ::core::option::Option<
        unsafe extern "C" fn(szCmdString: *mut ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub pfnGetMousePos: ::core::option::Option<unsafe extern "C" fn(ppt: *mut tagPOINT)>,
    pub pfnSetMousePos:
        ::core::option::Option<unsafe extern "C" fn(x: ::core::ffi::c_int, y: ::core::ffi::c_int)>,
    pub pfnSetMouseEnable: ::core::option::Option<unsafe extern "C" fn(fEnable: qboolean)>,
    pub pfnGetFirstCvarPtr: ::core::option::Option<unsafe extern "C" fn() -> *mut cvar_s>,
    pub pfnGetFirstCmdFunctionHandle:
        ::core::option::Option<unsafe extern "C" fn() -> *mut ::core::ffi::c_void>,
    pub pfnGetNextCmdFunctionHandle: ::core::option::Option<
        unsafe extern "C" fn(cmdhandle: *mut ::core::ffi::c_void) -> *mut ::core::ffi::c_void,
    >,
    pub pfnGetCmdFunctionName: ::core::option::Option<
        unsafe extern "C" fn(cmdhandle: *mut ::core::ffi::c_void) -> *const ::core::ffi::c_char,
    >,
    pub pfnGetClientOldTime: ::core::option::Option<unsafe extern "C" fn() -> f32>,
    pub pfnGetGravity: ::core::option::Option<unsafe extern "C" fn() -> f32>,
    pub pfnGetModelByIndex:
        ::core::option::Option<unsafe extern "C" fn(index: ::core::ffi::c_int) -> *mut model_s>,
    pub pfnSetFilterMode: ::core::option::Option<unsafe extern "C" fn(mode: ::core::ffi::c_int)>,
    pub pfnSetFilterColor:
        ::core::option::Option<unsafe extern "C" fn(red: f32, green: f32, blue: f32)>,
    pub pfnSetFilterBrightness: ::core::option::Option<unsafe extern "C" fn(brightness: f32)>,
    pub pfnSequenceGet: ::core::option::Option<
        unsafe extern "C" fn(
            fileName: *const ::core::ffi::c_char,
            entryName: *const ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_void,
    >,
    pub pfnSPR_DrawGeneric: ::core::option::Option<
        unsafe extern "C" fn(
            frame: ::core::ffi::c_int,
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            prc: *const wrect_t,
            blendsrc: ::core::ffi::c_int,
            blenddst: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
        ),
    >,
    pub pfnSequencePickSentence: ::core::option::Option<
        unsafe extern "C" fn(
            groupName: *const ::core::ffi::c_char,
            pickMethod: ::core::ffi::c_int,
            entryPicked: *mut ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_void,
    >,
    pub pfnDrawString: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            str_: *const ::core::ffi::c_char,
            r: ::core::ffi::c_int,
            g: ::core::ffi::c_int,
            b: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnDrawStringReverse: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            str_: *const ::core::ffi::c_char,
            r: ::core::ffi::c_int,
            g: ::core::ffi::c_int,
            b: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub LocalPlayerInfo_ValueForKey: ::core::option::Option<
        unsafe extern "C" fn(key: *const ::core::ffi::c_char) -> *const ::core::ffi::c_char,
    >,
    pub pfnVGUI2DrawCharacter: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            ch: ::core::ffi::c_int,
            font: ::core::ffi::c_uint,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnVGUI2DrawCharacterAdditive: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            ch: ::core::ffi::c_int,
            r: ::core::ffi::c_int,
            g: ::core::ffi::c_int,
            b: ::core::ffi::c_int,
            font: ::core::ffi::c_uint,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnGetApproxWavePlayLen: ::core::option::Option<
        unsafe extern "C" fn(filename: *const ::core::ffi::c_char) -> ::core::ffi::c_uint,
    >,
    pub GetCareerGameUI: ::core::option::Option<unsafe extern "C" fn() -> *mut ::core::ffi::c_void>,
    pub Cvar_Set: ::core::option::Option<
        unsafe extern "C" fn(name: *const ::core::ffi::c_char, value: *const ::core::ffi::c_char),
    >,
    pub pfnIsPlayingCareerMatch:
        ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnPlaySoundVoiceByName: ::core::option::Option<
        unsafe extern "C" fn(
            szSound: *mut ::core::ffi::c_char,
            volume: f32,
            pitch: ::core::ffi::c_int,
        ),
    >,
    pub pfnPrimeMusicStream: ::core::option::Option<
        unsafe extern "C" fn(filename: *mut ::core::ffi::c_char, looping: ::core::ffi::c_int),
    >,
    pub pfnSys_FloatTime: ::core::option::Option<unsafe extern "C" fn() -> f64>,
    pub pfnProcessTutorMessageDecayBuffer: ::core::option::Option<
        unsafe extern "C" fn(buffer: *mut ::core::ffi::c_int, buflen: ::core::ffi::c_int),
    >,
    pub pfnConstructTutorMessageDecayBuffer: ::core::option::Option<
        unsafe extern "C" fn(buffer: *mut ::core::ffi::c_int, buflen: ::core::ffi::c_int),
    >,
    pub pfnResetTutorMessageDecayData: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnPlaySoundByNameAtPitch: ::core::option::Option<
        unsafe extern "C" fn(
            szSound: *mut ::core::ffi::c_char,
            volume: f32,
            pitch: ::core::ffi::c_int,
        ),
    >,
    pub pfnFillRGBABlend: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::core::ffi::c_int,
            y: ::core::ffi::c_int,
            width: ::core::ffi::c_int,
            height: ::core::ffi::c_int,
            r: ::core::ffi::c_int,
            g: ::core::ffi::c_int,
            b: ::core::ffi::c_int,
            a: ::core::ffi::c_int,
        ),
    >,
    pub pfnGetAppID: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnGetAliases: ::core::option::Option<unsafe extern "C" fn() -> *mut cmdalias_t>,
    pub pfnVguiWrap2_GetMouseDelta: ::core::option::Option<
        unsafe extern "C" fn(x: *mut ::core::ffi::c_int, y: *mut ::core::ffi::c_int),
    >,
    pub pfnFilteredClientCmd: ::core::option::Option<
        unsafe extern "C" fn(cmd: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
}
pub type cl_enginefunc_t = cl_enginefuncs_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cldll_func_s {
    pub pfnInitialize: ::core::option::Option<
        unsafe extern "C" fn(
            pEnginefuncs: *mut cl_enginefunc_t,
            iVersion: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnInit: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnVidInit: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnRedraw: ::core::option::Option<
        unsafe extern "C" fn(flTime: f32, intermission: ::core::ffi::c_int) -> ::core::ffi::c_int,
    >,
    pub pfnUpdateClientData: ::core::option::Option<
        unsafe extern "C" fn(cdata: *mut client_data_t, flTime: f32) -> ::core::ffi::c_int,
    >,
    pub pfnReset: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnPlayerMove: ::core::option::Option<
        unsafe extern "C" fn(ppmove: *mut playermove_s, server: ::core::ffi::c_int),
    >,
    pub pfnPlayerMoveInit: ::core::option::Option<unsafe extern "C" fn(ppmove: *mut playermove_s)>,
    pub pfnPlayerMoveTexture: ::core::option::Option<
        unsafe extern "C" fn(name: *mut ::core::ffi::c_char) -> ::core::ffi::c_char,
    >,
    pub IN_ActivateMouse: ::core::option::Option<unsafe extern "C" fn()>,
    pub IN_DeactivateMouse: ::core::option::Option<unsafe extern "C" fn()>,
    pub IN_MouseEvent: ::core::option::Option<unsafe extern "C" fn(mstate: ::core::ffi::c_int)>,
    pub IN_ClearStates: ::core::option::Option<unsafe extern "C" fn()>,
    pub IN_Accumulate: ::core::option::Option<unsafe extern "C" fn()>,
    pub CL_CreateMove: ::core::option::Option<
        unsafe extern "C" fn(frametime: f32, cmd: *mut usercmd_s, active: ::core::ffi::c_int),
    >,
    pub CL_IsThirdPerson: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub CL_CameraOffset: ::core::option::Option<unsafe extern "C" fn(ofs: *mut f32)>,
    pub KB_Find: ::core::option::Option<
        unsafe extern "C" fn(name: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_void,
    >,
    pub CAM_Think: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnCalcRefdef: ::core::option::Option<unsafe extern "C" fn(pparams: *mut ref_params_t)>,
    pub pfnAddEntity: ::core::option::Option<
        unsafe extern "C" fn(
            type_: ::core::ffi::c_int,
            ent: *mut cl_entity_t,
            modelname: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnCreateEntities: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnDrawNormalTriangles: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnDrawTransparentTriangles: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnStudioEvent: ::core::option::Option<
        unsafe extern "C" fn(event: *const mstudioevent_s, entity: *const cl_entity_t),
    >,
    pub pfnPostRunCmd: ::core::option::Option<
        unsafe extern "C" fn(
            from: *mut local_state_s,
            to: *mut local_state_s,
            cmd: *mut usercmd_t,
            runfuncs: ::core::ffi::c_int,
            time: f64,
            random_seed: ::core::ffi::c_uint,
        ),
    >,
    pub pfnShutdown: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnTxferLocalOverrides: ::core::option::Option<
        unsafe extern "C" fn(state: *mut entity_state_t, client: *const clientdata_t),
    >,
    pub pfnProcessPlayerState: ::core::option::Option<
        unsafe extern "C" fn(dst: *mut entity_state_t, src: *const entity_state_t),
    >,
    pub pfnTxferPredictionData: ::core::option::Option<
        unsafe extern "C" fn(
            ps: *mut entity_state_t,
            pps: *const entity_state_t,
            pcd: *mut clientdata_t,
            ppcd: *const clientdata_t,
            wd: *mut weapon_data_t,
            pwd: *const weapon_data_t,
        ),
    >,
    pub pfnDemo_ReadBuffer:
        ::core::option::Option<unsafe extern "C" fn(size: ::core::ffi::c_int, buffer: *mut byte)>,
    pub pfnConnectionlessPacket: ::core::option::Option<
        unsafe extern "C" fn(
            net_from: *const netadr_s,
            args: *const ::core::ffi::c_char,
            buffer: *mut ::core::ffi::c_char,
            size: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnGetHullBounds: ::core::option::Option<
        unsafe extern "C" fn(
            hullnumber: ::core::ffi::c_int,
            mins: *mut f32,
            maxs: *mut f32,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnFrame: ::core::option::Option<unsafe extern "C" fn(time: f64)>,
    pub pfnKey_Event: ::core::option::Option<
        unsafe extern "C" fn(
            eventcode: ::core::ffi::c_int,
            keynum: ::core::ffi::c_int,
            pszCurrentBinding: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnTempEntUpdate: ::core::option::Option<
        unsafe extern "C" fn(
            frametime: f64,
            client_time: f64,
            cl_gravity: f64,
            ppTempEntFree: *mut *mut tempent_s,
            ppTempEntActive: *mut *mut tempent_s,
            Callback_AddVisibleEntity: ::core::option::Option<
                unsafe extern "C" fn(pEntity: *mut cl_entity_t) -> ::core::ffi::c_int,
            >,
            Callback_TempEntPlaySound: ::core::option::Option<
                unsafe extern "C" fn(pTemp: *mut tempent_s, damp: f32),
            >,
        ),
    >,
    pub pfnGetUserEntity:
        ::core::option::Option<unsafe extern "C" fn(index: ::core::ffi::c_int) -> *mut cl_entity_t>,
    pub pfnVoiceStatus: ::core::option::Option<
        unsafe extern "C" fn(entindex: ::core::ffi::c_int, bTalking: qboolean),
    >,
    pub pfnDirectorMessage: ::core::option::Option<
        unsafe extern "C" fn(iSize: ::core::ffi::c_int, pbuf: *mut ::core::ffi::c_void),
    >,
    pub pfnGetStudioModelInterface: ::core::option::Option<
        unsafe extern "C" fn(
            version: ::core::ffi::c_int,
            ppinterface: *mut *mut r_studio_interface_s,
            pstudio: *mut engine_studio_api_s,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnChatInputPosition: ::core::option::Option<
        unsafe extern "C" fn(x: *mut ::core::ffi::c_int, y: *mut ::core::ffi::c_int),
    >,
    pub pfnGetRenderInterface: ::core::option::Option<
        unsafe extern "C" fn(
            version: ::core::ffi::c_int,
            renderfuncs: *mut render_api_t,
            callback: *mut render_interface_t,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnClipMoveToEntity: ::core::option::Option<
        unsafe extern "C" fn(
            pe: *mut physent_s,
            start: *const vec3_t,
            mins: *mut vec3_t,
            maxs: *mut vec3_t,
            end: *const vec3_t,
            tr: *mut pmtrace_s,
        ),
    >,
    pub pfnTouchEvent: ::core::option::Option<
        unsafe extern "C" fn(
            type_: ::core::ffi::c_int,
            fingerID: ::core::ffi::c_int,
            x: f32,
            y: f32,
            dx: f32,
            dy: f32,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnMoveEvent: ::core::option::Option<unsafe extern "C" fn(forwardmove: f32, sidemove: f32)>,
    pub pfnLookEvent: ::core::option::Option<unsafe extern "C" fn(relyaw: f32, relpitch: f32)>,
}
pub type cldll_func_t = cldll_func_s;
