/* automatically generated by rust-bindgen 0.72.0 */

pub const MAX_ENT_LEAFS_32: i32 = 24;
pub const MAX_ENT_LEAFS_16: i32 = 48;
pub const INTERFACE_VERSION: i32 = 140;
pub const MAX_LEVEL_CONNECTIONS: i32 = 16;
pub const FENTTABLE_PLAYER: i64 = 2147483648;
pub const FENTTABLE_REMOVED: i32 = 1073741824;
pub const FENTTABLE_MOVEABLE: i32 = 536870912;
pub const FENTTABLE_GLOBAL: i32 = 268435456;
pub const FTYPEDESC_GLOBAL: i32 = 1;
pub const FTYPEDESC_SAVE: i32 = 2;
pub const FTYPEDESC_KEY: i32 = 4;
pub const FTYPEDESC_FUNCTIONTABLE: i32 = 8;
pub const NEW_DLL_FUNCTIONS_VERSION: i32 = 1;
pub type edict_t = edict_s;
#[repr(C)]
pub struct globalvars_t {
    pub time: f32,
    pub frametime: f32,
    pub force_retouch: f32,
    pub mapname: string_t,
    pub startspot: string_t,
    pub deathmatch: f32,
    pub coop: f32,
    pub teamplay: f32,
    pub serverflags: f32,
    pub found_secrets: f32,
    pub v_forward: vec3_t,
    pub v_up: vec3_t,
    pub v_right: vec3_t,
    pub trace_allsolid: f32,
    pub trace_startsolid: f32,
    pub trace_fraction: f32,
    pub trace_endpos: vec3_t,
    pub trace_plane_normal: vec3_t,
    pub trace_plane_dist: f32,
    pub trace_ent: *mut edict_t,
    pub trace_inopen: f32,
    pub trace_inwater: f32,
    pub trace_hitgroup: ::core::ffi::c_int,
    pub trace_flags: ::core::ffi::c_int,
    pub changelevel: ::core::ffi::c_int,
    pub cdAudioTrack: ::core::ffi::c_int,
    pub maxClients: ::core::ffi::c_int,
    pub maxEntities: ::core::ffi::c_int,
    pub pStringBase: *const ::core::ffi::c_char,
    pub pSaveData: *mut ::core::ffi::c_void,
    pub vecLandmarkOffset: vec3_t,
}
#[repr(C)]
pub struct entvars_s {
    pub classname: string_t,
    pub globalname: string_t,
    pub origin: vec3_t,
    pub oldorigin: vec3_t,
    pub velocity: vec3_t,
    pub basevelocity: vec3_t,
    pub clbasevelocity: vec3_t,
    pub movedir: vec3_t,
    pub angles: vec3_t,
    pub avelocity: vec3_t,
    pub punchangle: vec3_t,
    pub v_angle: vec3_t,
    pub endpos: vec3_t,
    pub startpos: vec3_t,
    pub impacttime: f32,
    pub starttime: f32,
    pub fixangle: ::core::ffi::c_int,
    pub idealpitch: f32,
    pub pitch_speed: f32,
    pub ideal_yaw: f32,
    pub yaw_speed: f32,
    pub modelindex: ::core::ffi::c_int,
    pub model: string_t,
    pub viewmodel: ::core::ffi::c_int,
    pub weaponmodel: ::core::ffi::c_int,
    pub absmin: vec3_t,
    pub absmax: vec3_t,
    pub mins: vec3_t,
    pub maxs: vec3_t,
    pub size: vec3_t,
    pub ltime: f32,
    pub nextthink: f32,
    pub movetype: ::core::ffi::c_int,
    pub solid: ::core::ffi::c_int,
    pub skin: ::core::ffi::c_int,
    pub body: ::core::ffi::c_int,
    pub effects: ::core::ffi::c_int,
    pub gravity: f32,
    pub friction: f32,
    pub light_level: ::core::ffi::c_int,
    pub sequence: ::core::ffi::c_int,
    pub gaitsequence: ::core::ffi::c_int,
    pub frame: f32,
    pub animtime: f32,
    pub framerate: f32,
    pub controller: [byte; 4usize],
    pub blending: [byte; 2usize],
    pub scale: f32,
    pub rendermode: ::core::ffi::c_int,
    pub renderamt: f32,
    pub rendercolor: vec3_t,
    pub renderfx: ::core::ffi::c_int,
    pub health: f32,
    pub frags: f32,
    pub weapons: ::core::ffi::c_int,
    pub takedamage: f32,
    pub deadflag: ::core::ffi::c_int,
    pub view_ofs: vec3_t,
    pub button: ::core::ffi::c_int,
    pub impulse: ::core::ffi::c_int,
    pub chain: *mut edict_t,
    pub dmg_inflictor: *mut edict_t,
    pub enemy: *mut edict_t,
    pub aiment: *mut edict_t,
    pub owner: *mut edict_t,
    pub groundentity: *mut edict_t,
    pub spawnflags: ::core::ffi::c_int,
    pub flags: ::core::ffi::c_int,
    pub colormap: ::core::ffi::c_int,
    pub team: ::core::ffi::c_int,
    pub max_health: f32,
    pub teleport_time: f32,
    pub armortype: f32,
    pub armorvalue: f32,
    pub waterlevel: ::core::ffi::c_int,
    pub watertype: ::core::ffi::c_int,
    pub target: string_t,
    pub targetname: string_t,
    pub netname: string_t,
    pub message: string_t,
    pub dmg_take: f32,
    pub dmg_save: f32,
    pub dmg: f32,
    pub dmgtime: f32,
    pub noise: string_t,
    pub noise1: string_t,
    pub noise2: string_t,
    pub noise3: string_t,
    pub speed: f32,
    pub air_finished: f32,
    pub pain_finished: f32,
    pub radsuit_finished: f32,
    pub pContainingEntity: *mut edict_t,
    pub playerclass: ::core::ffi::c_int,
    pub maxspeed: f32,
    pub fov: f32,
    pub weaponanim: ::core::ffi::c_int,
    pub pushmsec: ::core::ffi::c_int,
    pub bInDuck: ::core::ffi::c_int,
    pub flTimeStepSound: ::core::ffi::c_int,
    pub flSwimTime: ::core::ffi::c_int,
    pub flDuckTime: ::core::ffi::c_int,
    pub iStepLeft: ::core::ffi::c_int,
    pub flFallVelocity: f32,
    pub gamestate: ::core::ffi::c_int,
    pub oldbuttons: ::core::ffi::c_int,
    pub groupinfo: ::core::ffi::c_int,
    pub iuser1: ::core::ffi::c_int,
    pub iuser2: ::core::ffi::c_int,
    pub iuser3: ::core::ffi::c_int,
    pub iuser4: ::core::ffi::c_int,
    pub fuser1: f32,
    pub fuser2: f32,
    pub fuser3: f32,
    pub fuser4: f32,
    pub vuser1: vec3_t,
    pub vuser2: vec3_t,
    pub vuser3: vec3_t,
    pub vuser4: vec3_t,
    pub euser1: *mut edict_t,
    pub euser2: *mut edict_t,
    pub euser3: *mut edict_t,
    pub euser4: *mut edict_t,
}
pub type entvars_t = entvars_s;
#[repr(C)]
pub struct edict_s {
    pub free: qboolean,
    pub serialnumber: ::core::ffi::c_int,
    pub area: link_t,
    pub headnode: ::core::ffi::c_int,
    pub num_leafs: ::core::ffi::c_int,
    pub __bindgen_anon_1: edict_s__bindgen_ty_1,
    pub freetime: f32,
    pub pvPrivateData: *mut ::core::ffi::c_void,
    pub v: entvars_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union edict_s__bindgen_ty_1 {
    pub leafnums32: [::core::ffi::c_int; 24usize],
    pub leafnums16: [::core::ffi::c_short; 48usize],
}
pub const ALERT_TYPE_at_notice: ALERT_TYPE = 0;
pub const ALERT_TYPE_at_console: ALERT_TYPE = 1;
pub const ALERT_TYPE_at_aiconsole: ALERT_TYPE = 2;
pub const ALERT_TYPE_at_warning: ALERT_TYPE = 3;
pub const ALERT_TYPE_at_error: ALERT_TYPE = 4;
pub const ALERT_TYPE_at_logged: ALERT_TYPE = 5;
pub type ALERT_TYPE = ::core::ffi::c_uint;
pub const PRINT_TYPE_print_console: PRINT_TYPE = 0;
pub const PRINT_TYPE_print_center: PRINT_TYPE = 1;
pub const PRINT_TYPE_print_chat: PRINT_TYPE = 2;
pub type PRINT_TYPE = ::core::ffi::c_uint;
pub const FORCE_TYPE_force_exactfile: FORCE_TYPE = 0;
pub const FORCE_TYPE_force_model_samebounds: FORCE_TYPE = 1;
pub const FORCE_TYPE_force_model_specifybounds: FORCE_TYPE = 2;
pub const FORCE_TYPE_force_model_specifybounds_if_avail: FORCE_TYPE = 3;
pub type FORCE_TYPE = ::core::ffi::c_uint;
#[repr(C)]
pub struct TraceResult {
    pub fAllSolid: ::core::ffi::c_int,
    pub fStartSolid: ::core::ffi::c_int,
    pub fInOpen: ::core::ffi::c_int,
    pub fInWater: ::core::ffi::c_int,
    pub flFraction: f32,
    pub vecEndPos: vec3_t,
    pub flPlaneDist: f32,
    pub vecPlaneNormal: vec3_t,
    pub pHit: *mut edict_t,
    pub iHitgroup: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CDStatus {
    pub fPlaying: ::core::ffi::c_int,
    pub fWasPlaying: ::core::ffi::c_int,
    pub fInitialized: ::core::ffi::c_int,
    pub fEnabled: ::core::ffi::c_int,
    pub fPlayLooping: ::core::ffi::c_int,
    pub cdvolume: f32,
    pub fCDRom: ::core::ffi::c_int,
    pub fPlayTrack: ::core::ffi::c_int,
}
pub type CRC32_t = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct delta_s {
    _unused: [u8; 0],
}
pub type delta_t = delta_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct enginefuncs_s {
    pub pfnPrecacheModel: ::core::option::Option<
        unsafe extern "C" fn(s: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub pfnPrecacheSound: ::core::option::Option<
        unsafe extern "C" fn(s: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub pfnSetModel: ::core::option::Option<
        unsafe extern "C" fn(e: *mut edict_t, m: *const ::core::ffi::c_char),
    >,
    pub pfnModelIndex: ::core::option::Option<
        unsafe extern "C" fn(m: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub pfnModelFrames: ::core::option::Option<
        unsafe extern "C" fn(modelIndex: ::core::ffi::c_int) -> ::core::ffi::c_int,
    >,
    pub pfnSetSize: ::core::option::Option<
        unsafe extern "C" fn(e: *mut edict_t, rgflMin: *const f32, rgflMax: *const f32),
    >,
    pub pfnChangeLevel: ::core::option::Option<
        unsafe extern "C" fn(s1: *const ::core::ffi::c_char, s2: *const ::core::ffi::c_char),
    >,
    pub pfnGetSpawnParms: ::core::option::Option<unsafe extern "C" fn(ent: *mut edict_t)>,
    pub pfnSaveSpawnParms: ::core::option::Option<unsafe extern "C" fn(ent: *mut edict_t)>,
    pub pfnVecToYaw: ::core::option::Option<unsafe extern "C" fn(rgflVector: *const f32) -> f32>,
    pub pfnVecToAngles: ::core::option::Option<
        unsafe extern "C" fn(rgflVectorIn: *const f32, rgflVectorOut: *mut f32),
    >,
    pub pfnMoveToOrigin: ::core::option::Option<
        unsafe extern "C" fn(
            ent: *mut edict_t,
            pflGoal: *const f32,
            dist: f32,
            iMoveType: ::core::ffi::c_int,
        ),
    >,
    pub pfnChangeYaw: ::core::option::Option<unsafe extern "C" fn(ent: *mut edict_t)>,
    pub pfnChangePitch: ::core::option::Option<unsafe extern "C" fn(ent: *mut edict_t)>,
    pub pfnFindEntityByString: ::core::option::Option<
        unsafe extern "C" fn(
            pEdictStartSearchAfter: *mut edict_t,
            pszField: *const ::core::ffi::c_char,
            pszValue: *const ::core::ffi::c_char,
        ) -> *mut edict_t,
    >,
    pub pfnGetEntityIllum:
        ::core::option::Option<unsafe extern "C" fn(pEnt: *mut edict_t) -> ::core::ffi::c_int>,
    pub pfnFindEntityInSphere: ::core::option::Option<
        unsafe extern "C" fn(
            pEdictStartSearchAfter: *mut edict_t,
            org: *const f32,
            rad: f32,
        ) -> *mut edict_t,
    >,
    pub pfnFindClientInPVS:
        ::core::option::Option<unsafe extern "C" fn(pEdict: *mut edict_t) -> *mut edict_t>,
    pub pfnEntitiesInPVS:
        ::core::option::Option<unsafe extern "C" fn(pplayer: *mut edict_t) -> *mut edict_t>,
    pub pfnMakeVectors: ::core::option::Option<unsafe extern "C" fn(rgflVector: *const f32)>,
    pub pfnAngleVectors: ::core::option::Option<
        unsafe extern "C" fn(
            rgflVector: *const f32,
            forward: *mut f32,
            right: *mut f32,
            up: *mut f32,
        ),
    >,
    pub pfnCreateEntity: ::core::option::Option<unsafe extern "C" fn() -> *mut edict_t>,
    pub pfnRemoveEntity: ::core::option::Option<unsafe extern "C" fn(e: *mut edict_t)>,
    pub pfnCreateNamedEntity:
        ::core::option::Option<unsafe extern "C" fn(className: ::core::ffi::c_int) -> *mut edict_t>,
    pub pfnMakeStatic: ::core::option::Option<unsafe extern "C" fn(ent: *mut edict_t)>,
    pub pfnEntIsOnFloor:
        ::core::option::Option<unsafe extern "C" fn(e: *mut edict_t) -> ::core::ffi::c_int>,
    pub pfnDropToFloor:
        ::core::option::Option<unsafe extern "C" fn(e: *mut edict_t) -> ::core::ffi::c_int>,
    pub pfnWalkMove: ::core::option::Option<
        unsafe extern "C" fn(
            ent: *mut edict_t,
            yaw: f32,
            dist: f32,
            iMode: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnSetOrigin:
        ::core::option::Option<unsafe extern "C" fn(e: *mut edict_t, rgflOrigin: *const f32)>,
    pub pfnEmitSound: ::core::option::Option<
        unsafe extern "C" fn(
            entity: *mut edict_t,
            channel: ::core::ffi::c_int,
            sample: *const ::core::ffi::c_char,
            volume: f32,
            attenuation: f32,
            fFlags: ::core::ffi::c_int,
            pitch: ::core::ffi::c_int,
        ),
    >,
    pub pfnEmitAmbientSound: ::core::option::Option<
        unsafe extern "C" fn(
            entity: *mut edict_t,
            pos: *mut f32,
            samp: *const ::core::ffi::c_char,
            vol: f32,
            attenuation: f32,
            fFlags: ::core::ffi::c_int,
            pitch: ::core::ffi::c_int,
        ),
    >,
    pub pfnTraceLine: ::core::option::Option<
        unsafe extern "C" fn(
            v1: *const f32,
            v2: *const f32,
            fNoMonsters: ::core::ffi::c_int,
            pentToSkip: *mut edict_t,
            ptr: *mut TraceResult,
        ),
    >,
    pub pfnTraceToss: ::core::option::Option<
        unsafe extern "C" fn(pent: *mut edict_t, pentToIgnore: *mut edict_t, ptr: *mut TraceResult),
    >,
    pub pfnTraceMonsterHull: ::core::option::Option<
        unsafe extern "C" fn(
            pEdict: *mut edict_t,
            v1: *const f32,
            v2: *const f32,
            fNoMonsters: ::core::ffi::c_int,
            pentToSkip: *mut edict_t,
            ptr: *mut TraceResult,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnTraceHull: ::core::option::Option<
        unsafe extern "C" fn(
            v1: *const f32,
            v2: *const f32,
            fNoMonsters: ::core::ffi::c_int,
            hullNumber: ::core::ffi::c_int,
            pentToSkip: *mut edict_t,
            ptr: *mut TraceResult,
        ),
    >,
    pub pfnTraceModel: ::core::option::Option<
        unsafe extern "C" fn(
            v1: *const f32,
            v2: *const f32,
            hullNumber: ::core::ffi::c_int,
            pent: *mut edict_t,
            ptr: *mut TraceResult,
        ),
    >,
    pub pfnTraceTexture: ::core::option::Option<
        unsafe extern "C" fn(
            pTextureEntity: *mut edict_t,
            v1: *const f32,
            v2: *const f32,
        ) -> *const ::core::ffi::c_char,
    >,
    pub pfnTraceSphere: ::core::option::Option<
        unsafe extern "C" fn(
            v1: *const f32,
            v2: *const f32,
            fNoMonsters: ::core::ffi::c_int,
            radius: f32,
            pentToSkip: *mut edict_t,
            ptr: *mut TraceResult,
        ),
    >,
    pub pfnGetAimVector: ::core::option::Option<
        unsafe extern "C" fn(ent: *mut edict_t, speed: f32, rgflReturn: *mut f32),
    >,
    pub pfnServerCommand:
        ::core::option::Option<unsafe extern "C" fn(str_: *const ::core::ffi::c_char)>,
    pub pfnServerExecute: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnClientCommand: ::core::option::Option<
        unsafe extern "C" fn(pEdict: *mut edict_t, szFmt: *mut ::core::ffi::c_char, ...),
    >,
    pub pfnParticleEffect: ::core::option::Option<
        unsafe extern "C" fn(org: *const f32, dir: *const f32, color: f32, count: f32),
    >,
    pub pfnLightStyle: ::core::option::Option<
        unsafe extern "C" fn(style: ::core::ffi::c_int, val: *const ::core::ffi::c_char),
    >,
    pub pfnDecalIndex: ::core::option::Option<
        unsafe extern "C" fn(name: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub pfnPointContents:
        ::core::option::Option<unsafe extern "C" fn(rgflVector: *const f32) -> ::core::ffi::c_int>,
    pub pfnMessageBegin: ::core::option::Option<
        unsafe extern "C" fn(
            msg_dest: ::core::ffi::c_int,
            msg_type: ::core::ffi::c_int,
            pOrigin: *const f32,
            ed: *mut edict_t,
        ),
    >,
    pub pfnMessageEnd: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnWriteByte: ::core::option::Option<unsafe extern "C" fn(iValue: ::core::ffi::c_int)>,
    pub pfnWriteChar: ::core::option::Option<unsafe extern "C" fn(iValue: ::core::ffi::c_int)>,
    pub pfnWriteShort: ::core::option::Option<unsafe extern "C" fn(iValue: ::core::ffi::c_int)>,
    pub pfnWriteLong: ::core::option::Option<unsafe extern "C" fn(iValue: ::core::ffi::c_int)>,
    pub pfnWriteAngle: ::core::option::Option<unsafe extern "C" fn(flValue: f32)>,
    pub pfnWriteCoord: ::core::option::Option<unsafe extern "C" fn(flValue: f32)>,
    pub pfnWriteString:
        ::core::option::Option<unsafe extern "C" fn(sz: *const ::core::ffi::c_char)>,
    pub pfnWriteEntity: ::core::option::Option<unsafe extern "C" fn(iValue: ::core::ffi::c_int)>,
    pub pfnCVarRegister: ::core::option::Option<unsafe extern "C" fn(pCvar: *mut cvar_t)>,
    pub pfnCVarGetFloat:
        ::core::option::Option<unsafe extern "C" fn(szVarName: *const ::core::ffi::c_char) -> f32>,
    pub pfnCVarGetString: ::core::option::Option<
        unsafe extern "C" fn(szVarName: *const ::core::ffi::c_char) -> *const ::core::ffi::c_char,
    >,
    pub pfnCVarSetFloat: ::core::option::Option<
        unsafe extern "C" fn(szVarName: *const ::core::ffi::c_char, flValue: f32),
    >,
    pub pfnCVarSetString: ::core::option::Option<
        unsafe extern "C" fn(
            szVarName: *const ::core::ffi::c_char,
            szValue: *const ::core::ffi::c_char,
        ),
    >,
    pub pfnAlertMessage: ::core::option::Option<
        unsafe extern "C" fn(atype: ALERT_TYPE, szFmt: *mut ::core::ffi::c_char, ...),
    >,
    pub pfnEngineFprintf: ::core::option::Option<
        unsafe extern "C" fn(pfile: *mut FILE, szFmt: *mut ::core::ffi::c_char, ...),
    >,
    pub pfnPvAllocEntPrivateData: ::core::option::Option<
        unsafe extern "C" fn(
            pEdict: *mut edict_t,
            cb: ::core::ffi::c_long,
        ) -> *mut ::core::ffi::c_void,
    >,
    pub pfnPvEntPrivateData: ::core::option::Option<
        unsafe extern "C" fn(pEdict: *mut edict_t) -> *mut ::core::ffi::c_void,
    >,
    pub pfnFreeEntPrivateData: ::core::option::Option<unsafe extern "C" fn(pEdict: *mut edict_t)>,
    pub pfnSzFromIndex: ::core::option::Option<
        unsafe extern "C" fn(iString: ::core::ffi::c_int) -> *const ::core::ffi::c_char,
    >,
    pub pfnAllocString: ::core::option::Option<
        unsafe extern "C" fn(szValue: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub pfnGetVarsOfEnt:
        ::core::option::Option<unsafe extern "C" fn(pEdict: *mut edict_t) -> *mut entvars_s>,
    pub pfnPEntityOfEntOffset: ::core::option::Option<
        unsafe extern "C" fn(iEntOffset: ::core::ffi::c_int) -> *mut edict_t,
    >,
    pub pfnEntOffsetOfPEntity:
        ::core::option::Option<unsafe extern "C" fn(pEdict: *const edict_t) -> ::core::ffi::c_int>,
    pub pfnIndexOfEdict:
        ::core::option::Option<unsafe extern "C" fn(pEdict: *const edict_t) -> ::core::ffi::c_int>,
    pub pfnPEntityOfEntIndex:
        ::core::option::Option<unsafe extern "C" fn(iEntIndex: ::core::ffi::c_int) -> *mut edict_t>,
    pub pfnFindEntityByVars:
        ::core::option::Option<unsafe extern "C" fn(pvars: *mut entvars_s) -> *mut edict_t>,
    pub pfnGetModelPtr: ::core::option::Option<
        unsafe extern "C" fn(pEdict: *mut edict_t) -> *mut ::core::ffi::c_void,
    >,
    pub pfnRegUserMsg: ::core::option::Option<
        unsafe extern "C" fn(
            pszName: *const ::core::ffi::c_char,
            iSize: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnAnimationAutomove:
        ::core::option::Option<unsafe extern "C" fn(pEdict: *const edict_t, flTime: f32)>,
    pub pfnGetBonePosition: ::core::option::Option<
        unsafe extern "C" fn(
            pEdict: *const edict_t,
            iBone: ::core::ffi::c_int,
            rgflOrigin: *mut f32,
            rgflAngles: *mut f32,
        ),
    >,
    pub pfnFunctionFromName: ::core::option::Option<
        unsafe extern "C" fn(pName: *const ::core::ffi::c_char) -> ::core::ffi::c_ulong,
    >,
    pub pfnNameForFunction: ::core::option::Option<
        unsafe extern "C" fn(function: ::core::ffi::c_ulong) -> *const ::core::ffi::c_char,
    >,
    pub pfnClientPrintf: ::core::option::Option<
        unsafe extern "C" fn(
            pEdict: *mut edict_t,
            ptype: PRINT_TYPE,
            szMsg: *const ::core::ffi::c_char,
        ),
    >,
    pub pfnServerPrint:
        ::core::option::Option<unsafe extern "C" fn(szMsg: *const ::core::ffi::c_char)>,
    pub pfnCmd_Args: ::core::option::Option<unsafe extern "C" fn() -> *const ::core::ffi::c_char>,
    pub pfnCmd_Argv: ::core::option::Option<
        unsafe extern "C" fn(argc: ::core::ffi::c_int) -> *const ::core::ffi::c_char,
    >,
    pub pfnCmd_Argc: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnGetAttachment: ::core::option::Option<
        unsafe extern "C" fn(
            pEdict: *const edict_t,
            iAttachment: ::core::ffi::c_int,
            rgflOrigin: *mut f32,
            rgflAngles: *mut f32,
        ),
    >,
    pub pfnCRC32_Init: ::core::option::Option<unsafe extern "C" fn(pulCRC: *mut CRC32_t)>,
    pub pfnCRC32_ProcessBuffer: ::core::option::Option<
        unsafe extern "C" fn(
            pulCRC: *mut CRC32_t,
            p: *const ::core::ffi::c_void,
            len: ::core::ffi::c_int,
        ),
    >,
    pub pfnCRC32_ProcessByte: ::core::option::Option<
        unsafe extern "C" fn(pulCRC: *mut CRC32_t, ch: ::core::ffi::c_uchar),
    >,
    pub pfnCRC32_Final: ::core::option::Option<unsafe extern "C" fn(pulCRC: CRC32_t) -> CRC32_t>,
    pub pfnRandomLong: ::core::option::Option<
        unsafe extern "C" fn(
            lLow: ::core::ffi::c_int,
            lHigh: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnRandomFloat:
        ::core::option::Option<unsafe extern "C" fn(flLow: f32, flHigh: f32) -> f32>,
    pub pfnSetView: ::core::option::Option<
        unsafe extern "C" fn(pClient: *const edict_t, pViewent: *const edict_t),
    >,
    pub pfnTime: ::core::option::Option<unsafe extern "C" fn() -> f32>,
    pub pfnCrosshairAngle:
        ::core::option::Option<unsafe extern "C" fn(pClient: *const edict_t, pitch: f32, yaw: f32)>,
    pub pfnLoadFileForMe: ::core::option::Option<
        unsafe extern "C" fn(
            filename: *const ::core::ffi::c_char,
            pLength: *mut ::core::ffi::c_int,
        ) -> *mut byte,
    >,
    pub pfnFreeFile: ::core::option::Option<unsafe extern "C" fn(buffer: *mut ::core::ffi::c_void)>,
    pub pfnEndSection:
        ::core::option::Option<unsafe extern "C" fn(pszSectionName: *const ::core::ffi::c_char)>,
    pub pfnCompareFileTime: ::core::option::Option<
        unsafe extern "C" fn(
            filename1: *const ::core::ffi::c_char,
            filename2: *const ::core::ffi::c_char,
            iCompare: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnGetGameDir:
        ::core::option::Option<unsafe extern "C" fn(szGetGameDir: *mut ::core::ffi::c_char)>,
    pub pfnCvar_RegisterVariable:
        ::core::option::Option<unsafe extern "C" fn(variable: *mut cvar_t)>,
    pub pfnFadeClientVolume: ::core::option::Option<
        unsafe extern "C" fn(
            pEdict: *const edict_t,
            fadePercent: ::core::ffi::c_int,
            fadeOutSeconds: ::core::ffi::c_int,
            holdTime: ::core::ffi::c_int,
            fadeInSeconds: ::core::ffi::c_int,
        ),
    >,
    pub pfnSetClientMaxspeed:
        ::core::option::Option<unsafe extern "C" fn(pEdict: *const edict_t, fNewMaxspeed: f32)>,
    pub pfnCreateFakeClient: ::core::option::Option<
        unsafe extern "C" fn(netname: *const ::core::ffi::c_char) -> *mut edict_t,
    >,
    pub pfnRunPlayerMove: ::core::option::Option<
        unsafe extern "C" fn(
            fakeclient: *mut edict_t,
            viewangles: *const f32,
            forwardmove: f32,
            sidemove: f32,
            upmove: f32,
            buttons: ::core::ffi::c_ushort,
            impulse: byte,
            msec: byte,
        ),
    >,
    pub pfnNumberOfEntities: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnGetInfoKeyBuffer:
        ::core::option::Option<unsafe extern "C" fn(e: *mut edict_t) -> *mut ::core::ffi::c_char>,
    pub pfnInfoKeyValue: ::core::option::Option<
        unsafe extern "C" fn(
            infobuffer: *const ::core::ffi::c_char,
            key: *const ::core::ffi::c_char,
        ) -> *const ::core::ffi::c_char,
    >,
    pub pfnSetKeyValue: ::core::option::Option<
        unsafe extern "C" fn(
            infobuffer: *mut ::core::ffi::c_char,
            key: *mut ::core::ffi::c_char,
            value: *mut ::core::ffi::c_char,
        ),
    >,
    pub pfnSetClientKeyValue: ::core::option::Option<
        unsafe extern "C" fn(
            clientIndex: ::core::ffi::c_int,
            infobuffer: *mut ::core::ffi::c_char,
            key: *mut ::core::ffi::c_char,
            value: *mut ::core::ffi::c_char,
        ),
    >,
    pub pfnIsMapValid: ::core::option::Option<
        unsafe extern "C" fn(filename: *mut ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub pfnStaticDecal: ::core::option::Option<
        unsafe extern "C" fn(
            origin: *const f32,
            decalIndex: ::core::ffi::c_int,
            entityIndex: ::core::ffi::c_int,
            modelIndex: ::core::ffi::c_int,
        ),
    >,
    pub pfnPrecacheGeneric: ::core::option::Option<
        unsafe extern "C" fn(s: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub pfnGetPlayerUserId:
        ::core::option::Option<unsafe extern "C" fn(e: *mut edict_t) -> ::core::ffi::c_int>,
    pub pfnBuildSoundMsg: ::core::option::Option<
        unsafe extern "C" fn(
            entity: *mut edict_t,
            channel: ::core::ffi::c_int,
            sample: *const ::core::ffi::c_char,
            volume: f32,
            attenuation: f32,
            fFlags: ::core::ffi::c_int,
            pitch: ::core::ffi::c_int,
            msg_dest: ::core::ffi::c_int,
            msg_type: ::core::ffi::c_int,
            pOrigin: *const f32,
            ed: *mut edict_t,
        ),
    >,
    pub pfnIsDedicatedServer: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnCVarGetPointer: ::core::option::Option<
        unsafe extern "C" fn(szVarName: *const ::core::ffi::c_char) -> *mut cvar_t,
    >,
    pub pfnGetPlayerWONId:
        ::core::option::Option<unsafe extern "C" fn(e: *mut edict_t) -> ::core::ffi::c_uint>,
    pub pfnInfo_RemoveKey: ::core::option::Option<
        unsafe extern "C" fn(s: *mut ::core::ffi::c_char, key: *const ::core::ffi::c_char),
    >,
    pub pfnGetPhysicsKeyValue: ::core::option::Option<
        unsafe extern "C" fn(
            pClient: *const edict_t,
            key: *const ::core::ffi::c_char,
        ) -> *const ::core::ffi::c_char,
    >,
    pub pfnSetPhysicsKeyValue: ::core::option::Option<
        unsafe extern "C" fn(
            pClient: *const edict_t,
            key: *const ::core::ffi::c_char,
            value: *const ::core::ffi::c_char,
        ),
    >,
    pub pfnGetPhysicsInfoString: ::core::option::Option<
        unsafe extern "C" fn(pClient: *const edict_t) -> *const ::core::ffi::c_char,
    >,
    pub pfnPrecacheEvent: ::core::option::Option<
        unsafe extern "C" fn(
            type_: ::core::ffi::c_int,
            psz: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_ushort,
    >,
    pub pfnPlaybackEvent: ::core::option::Option<
        unsafe extern "C" fn(
            flags: ::core::ffi::c_int,
            pInvoker: *const edict_t,
            eventindex: ::core::ffi::c_ushort,
            delay: f32,
            origin: *mut f32,
            angles: *mut f32,
            fparam1: f32,
            fparam2: f32,
            iparam1: ::core::ffi::c_int,
            iparam2: ::core::ffi::c_int,
            bparam1: ::core::ffi::c_int,
            bparam2: ::core::ffi::c_int,
        ),
    >,
    pub pfnSetFatPVS:
        ::core::option::Option<unsafe extern "C" fn(org: *const f32) -> *mut ::core::ffi::c_uchar>,
    pub pfnSetFatPAS:
        ::core::option::Option<unsafe extern "C" fn(org: *const f32) -> *mut ::core::ffi::c_uchar>,
    pub pfnCheckVisibility: ::core::option::Option<
        unsafe extern "C" fn(
            entity: *const edict_t,
            pset: *mut ::core::ffi::c_uchar,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnDeltaSetField: ::core::option::Option<
        unsafe extern "C" fn(pFields: *mut delta_s, fieldname: *const ::core::ffi::c_char),
    >,
    pub pfnDeltaUnsetField: ::core::option::Option<
        unsafe extern "C" fn(pFields: *mut delta_s, fieldname: *const ::core::ffi::c_char),
    >,
    pub pfnDeltaAddEncoder: ::core::option::Option<
        unsafe extern "C" fn(
            name: *mut ::core::ffi::c_char,
            conditionalencode: ::core::option::Option<
                unsafe extern "C" fn(
                    pFields: *mut delta_s,
                    from: *const ::core::ffi::c_uchar,
                    to: *const ::core::ffi::c_uchar,
                ),
            >,
        ),
    >,
    pub pfnGetCurrentPlayer: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnCanSkipPlayer:
        ::core::option::Option<unsafe extern "C" fn(player: *const edict_t) -> ::core::ffi::c_int>,
    pub pfnDeltaFindField: ::core::option::Option<
        unsafe extern "C" fn(
            pFields: *mut delta_s,
            fieldname: *const ::core::ffi::c_char,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnDeltaSetFieldByIndex: ::core::option::Option<
        unsafe extern "C" fn(pFields: *mut delta_s, fieldNumber: ::core::ffi::c_int),
    >,
    pub pfnDeltaUnsetFieldByIndex: ::core::option::Option<
        unsafe extern "C" fn(pFields: *mut delta_s, fieldNumber: ::core::ffi::c_int),
    >,
    pub pfnSetGroupMask: ::core::option::Option<
        unsafe extern "C" fn(mask: ::core::ffi::c_int, op: ::core::ffi::c_int),
    >,
    pub pfnCreateInstancedBaseline: ::core::option::Option<
        unsafe extern "C" fn(
            classname: ::core::ffi::c_int,
            baseline: *mut entity_state_s,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnCvar_DirectSet: ::core::option::Option<
        unsafe extern "C" fn(var: *mut cvar_s, value: *const ::core::ffi::c_char),
    >,
    pub pfnForceUnmodified: ::core::option::Option<
        unsafe extern "C" fn(
            type_: FORCE_TYPE,
            mins: *mut f32,
            maxs: *mut f32,
            filename: *const ::core::ffi::c_char,
        ),
    >,
    pub pfnGetPlayerStats: ::core::option::Option<
        unsafe extern "C" fn(
            pClient: *const edict_t,
            ping: *mut ::core::ffi::c_int,
            packet_loss: *mut ::core::ffi::c_int,
        ),
    >,
    pub pfnAddServerCommand: ::core::option::Option<
        unsafe extern "C" fn(
            cmd_name: *const ::core::ffi::c_char,
            function: ::core::option::Option<unsafe extern "C" fn()>,
        ),
    >,
    pub pfnVoice_GetClientListening: ::core::option::Option<
        unsafe extern "C" fn(
            iReceiver: ::core::ffi::c_int,
            iSender: ::core::ffi::c_int,
        ) -> qboolean,
    >,
    pub pfnVoice_SetClientListening: ::core::option::Option<
        unsafe extern "C" fn(
            iReceiver: ::core::ffi::c_int,
            iSender: ::core::ffi::c_int,
            bListen: qboolean,
        ) -> qboolean,
    >,
    pub pfnGetPlayerAuthId:
        ::core::option::Option<unsafe extern "C" fn(e: *mut edict_t) -> *const ::core::ffi::c_char>,
    pub pfnSequenceGet: ::core::option::Option<
        unsafe extern "C" fn(
            fileName: *const ::core::ffi::c_char,
            entryName: *const ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_void,
    >,
    pub pfnSequencePickSentence: ::core::option::Option<
        unsafe extern "C" fn(
            groupName: *const ::core::ffi::c_char,
            pickMethod: ::core::ffi::c_int,
            picked: *mut ::core::ffi::c_int,
        ) -> *mut ::core::ffi::c_void,
    >,
    pub pfnGetFileSize: ::core::option::Option<
        unsafe extern "C" fn(filename: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub pfnGetApproxWavePlayLen: ::core::option::Option<
        unsafe extern "C" fn(filepath: *const ::core::ffi::c_char) -> ::core::ffi::c_uint,
    >,
    pub pfnIsCareerMatch: ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
    pub pfnGetLocalizedStringLength: ::core::option::Option<
        unsafe extern "C" fn(label: *const ::core::ffi::c_char) -> ::core::ffi::c_int,
    >,
    pub pfnRegisterTutorMessageShown:
        ::core::option::Option<unsafe extern "C" fn(mid: ::core::ffi::c_int)>,
    pub pfnGetTimesTutorMessageShown:
        ::core::option::Option<unsafe extern "C" fn(mid: ::core::ffi::c_int) -> ::core::ffi::c_int>,
    pub pfnProcessTutorMessageDecayBuffer: ::core::option::Option<
        unsafe extern "C" fn(buffer: *mut ::core::ffi::c_int, bufferLength: ::core::ffi::c_int),
    >,
    pub pfnConstructTutorMessageDecayBuffer: ::core::option::Option<
        unsafe extern "C" fn(buffer: *mut ::core::ffi::c_int, bufferLength: ::core::ffi::c_int),
    >,
    pub pfnResetTutorMessageDecayData: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnQueryClientCvarValue: ::core::option::Option<
        unsafe extern "C" fn(player: *const edict_t, cvarName: *const ::core::ffi::c_char),
    >,
    pub pfnQueryClientCvarValue2: ::core::option::Option<
        unsafe extern "C" fn(
            player: *const edict_t,
            cvarName: *const ::core::ffi::c_char,
            requestID: ::core::ffi::c_int,
        ),
    >,
    pub pfnCheckParm: ::core::option::Option<
        unsafe extern "C" fn(
            parm: *mut ::core::ffi::c_char,
            ppnext: *mut *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnPEntityOfEntIndexAllEntities:
        ::core::option::Option<unsafe extern "C" fn(iEntIndex: ::core::ffi::c_int) -> *mut edict_t>,
}
pub type enginefuncs_t = enginefuncs_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct KeyValueData_s {
    pub szClassName: *mut ::core::ffi::c_char,
    pub szKeyName: *mut ::core::ffi::c_char,
    pub szValue: *mut ::core::ffi::c_char,
    pub fHandled: ::core::ffi::c_int,
}
pub type KeyValueData = KeyValueData_s;
#[repr(C)]
pub struct LEVELLIST {
    pub mapName: [::core::ffi::c_char; 32usize],
    pub landmarkName: [::core::ffi::c_char; 32usize],
    pub pentLandmark: *mut edict_t,
    pub vecLandmarkOrigin: vec3_t,
}
#[repr(C)]
pub struct ENTITYTABLE {
    pub id: ::core::ffi::c_int,
    pub pent: *mut edict_t,
    pub location: ::core::ffi::c_int,
    pub size: ::core::ffi::c_int,
    pub flags: ::core::ffi::c_int,
    pub classname: string_t,
}
#[repr(C)]
pub struct saverestore_s {
    pub pBaseData: *mut ::core::ffi::c_char,
    pub pCurrentData: *mut ::core::ffi::c_char,
    pub size: ::core::ffi::c_int,
    pub bufferSize: ::core::ffi::c_int,
    pub tokenSize: ::core::ffi::c_int,
    pub tokenCount: ::core::ffi::c_int,
    pub pTokens: *mut *mut ::core::ffi::c_char,
    pub currentIndex: ::core::ffi::c_int,
    pub tableCount: ::core::ffi::c_int,
    pub connectionCount: ::core::ffi::c_int,
    pub pTable: *mut ENTITYTABLE,
    pub levelList: [LEVELLIST; 16usize],
    pub fUseLandmark: ::core::ffi::c_int,
    pub szLandmarkName: [::core::ffi::c_char; 20usize],
    pub vecLandmarkOffset: vec3_t,
    pub time: f32,
    pub szCurrentMapName: [::core::ffi::c_char; 32usize],
}
pub type SAVERESTOREDATA = saverestore_s;
pub const _fieldtypes_FIELD_FLOAT: _fieldtypes = 0;
pub const _fieldtypes_FIELD_STRING: _fieldtypes = 1;
pub const _fieldtypes_FIELD_ENTITY: _fieldtypes = 2;
pub const _fieldtypes_FIELD_CLASSPTR: _fieldtypes = 3;
pub const _fieldtypes_FIELD_EHANDLE: _fieldtypes = 4;
pub const _fieldtypes_FIELD_EVARS: _fieldtypes = 5;
pub const _fieldtypes_FIELD_EDICT: _fieldtypes = 6;
pub const _fieldtypes_FIELD_VECTOR: _fieldtypes = 7;
pub const _fieldtypes_FIELD_POSITION_VECTOR: _fieldtypes = 8;
pub const _fieldtypes_FIELD_POINTER: _fieldtypes = 9;
pub const _fieldtypes_FIELD_INTEGER: _fieldtypes = 10;
pub const _fieldtypes_FIELD_FUNCTION: _fieldtypes = 11;
pub const _fieldtypes_FIELD_BOOLEAN: _fieldtypes = 12;
pub const _fieldtypes_FIELD_SHORT: _fieldtypes = 13;
pub const _fieldtypes_FIELD_CHARACTER: _fieldtypes = 14;
pub const _fieldtypes_FIELD_TIME: _fieldtypes = 15;
pub const _fieldtypes_FIELD_MODELNAME: _fieldtypes = 16;
pub const _fieldtypes_FIELD_SOUNDNAME: _fieldtypes = 17;
pub const _fieldtypes_FIELD_TYPECOUNT: _fieldtypes = 18;
pub type _fieldtypes = ::core::ffi::c_uint;
pub use self::_fieldtypes as FIELDTYPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TYPEDESCRIPTION {
    pub fieldType: FIELDTYPE,
    pub fieldName: *const ::core::ffi::c_char,
    pub fieldOffset: ::core::ffi::c_int,
    pub fieldSize: ::core::ffi::c_short,
    pub flags: ::core::ffi::c_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DLL_FUNCTIONS {
    pub pfnGameInit: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnSpawn:
        ::core::option::Option<unsafe extern "C" fn(pent: *mut edict_t) -> ::core::ffi::c_int>,
    pub pfnThink: ::core::option::Option<unsafe extern "C" fn(pent: *mut edict_t)>,
    pub pfnUse: ::core::option::Option<
        unsafe extern "C" fn(pentUsed: *mut edict_t, pentOther: *mut edict_t),
    >,
    pub pfnTouch: ::core::option::Option<
        unsafe extern "C" fn(pentTouched: *mut edict_t, pentOther: *mut edict_t),
    >,
    pub pfnBlocked: ::core::option::Option<
        unsafe extern "C" fn(pentBlocked: *mut edict_t, pentOther: *mut edict_t),
    >,
    pub pfnKeyValue: ::core::option::Option<
        unsafe extern "C" fn(pentKeyvalue: *mut edict_t, pkvd: *mut KeyValueData),
    >,
    pub pfnSave: ::core::option::Option<
        unsafe extern "C" fn(pent: *mut edict_t, pSaveData: *mut SAVERESTOREDATA),
    >,
    pub pfnRestore: ::core::option::Option<
        unsafe extern "C" fn(
            pent: *mut edict_t,
            pSaveData: *mut SAVERESTOREDATA,
            globalEntity: ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnSetAbsBox: ::core::option::Option<unsafe extern "C" fn(pent: *mut edict_t)>,
    pub pfnSaveWriteFields: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut SAVERESTOREDATA,
            arg2: *const ::core::ffi::c_char,
            arg3: *mut ::core::ffi::c_void,
            arg4: *mut TYPEDESCRIPTION,
            arg5: ::core::ffi::c_int,
        ),
    >,
    pub pfnSaveReadFields: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut SAVERESTOREDATA,
            arg2: *const ::core::ffi::c_char,
            arg3: *mut ::core::ffi::c_void,
            arg4: *mut TYPEDESCRIPTION,
            arg5: ::core::ffi::c_int,
        ),
    >,
    pub pfnSaveGlobalState:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut SAVERESTOREDATA)>,
    pub pfnRestoreGlobalState:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut SAVERESTOREDATA)>,
    pub pfnResetGlobalState: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnClientConnect: ::core::option::Option<
        unsafe extern "C" fn(
            pEntity: *mut edict_t,
            pszName: *const ::core::ffi::c_char,
            pszAddress: *const ::core::ffi::c_char,
            szRejectReason: *mut [::core::ffi::c_char; 128usize],
        ) -> qboolean,
    >,
    pub pfnClientDisconnect: ::core::option::Option<unsafe extern "C" fn(pEntity: *mut edict_t)>,
    pub pfnClientKill: ::core::option::Option<unsafe extern "C" fn(pEntity: *mut edict_t)>,
    pub pfnClientPutInServer: ::core::option::Option<unsafe extern "C" fn(pEntity: *mut edict_t)>,
    pub pfnClientCommand: ::core::option::Option<unsafe extern "C" fn(pEntity: *mut edict_t)>,
    pub pfnClientUserInfoChanged: ::core::option::Option<
        unsafe extern "C" fn(pEntity: *mut edict_t, infobuffer: *mut ::core::ffi::c_char),
    >,
    pub pfnServerActivate: ::core::option::Option<
        unsafe extern "C" fn(
            pEdictList: *mut edict_t,
            edictCount: ::core::ffi::c_int,
            clientMax: ::core::ffi::c_int,
        ),
    >,
    pub pfnServerDeactivate: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnPlayerPreThink: ::core::option::Option<unsafe extern "C" fn(pEntity: *mut edict_t)>,
    pub pfnPlayerPostThink: ::core::option::Option<unsafe extern "C" fn(pEntity: *mut edict_t)>,
    pub pfnStartFrame: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnParmsNewLevel: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnParmsChangeLevel: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnGetGameDescription:
        ::core::option::Option<unsafe extern "C" fn() -> *const ::core::ffi::c_char>,
    pub pfnPlayerCustomization: ::core::option::Option<
        unsafe extern "C" fn(pEntity: *mut edict_t, pCustom: *mut customization_t),
    >,
    pub pfnSpectatorConnect: ::core::option::Option<unsafe extern "C" fn(pEntity: *mut edict_t)>,
    pub pfnSpectatorDisconnect: ::core::option::Option<unsafe extern "C" fn(pEntity: *mut edict_t)>,
    pub pfnSpectatorThink: ::core::option::Option<unsafe extern "C" fn(pEntity: *mut edict_t)>,
    pub pfnSys_Error:
        ::core::option::Option<unsafe extern "C" fn(error_string: *const ::core::ffi::c_char)>,
    pub pfnPM_Move:
        ::core::option::Option<unsafe extern "C" fn(ppmove: *mut playermove_s, server: qboolean)>,
    pub pfnPM_Init: ::core::option::Option<unsafe extern "C" fn(ppmove: *mut playermove_s)>,
    pub pfnPM_FindTextureType: ::core::option::Option<
        unsafe extern "C" fn(name: *mut ::core::ffi::c_char) -> ::core::ffi::c_char,
    >,
    pub pfnSetupVisibility: ::core::option::Option<
        unsafe extern "C" fn(
            pViewEntity: *mut edict_s,
            pClient: *mut edict_s,
            pvs: *mut *mut ::core::ffi::c_uchar,
            pas: *mut *mut ::core::ffi::c_uchar,
        ),
    >,
    pub pfnUpdateClientData: ::core::option::Option<
        unsafe extern "C" fn(
            ent: *const edict_s,
            sendweapons: ::core::ffi::c_int,
            cd: *mut clientdata_s,
        ),
    >,
    pub pfnAddToFullPack: ::core::option::Option<
        unsafe extern "C" fn(
            state: *mut entity_state_s,
            e: ::core::ffi::c_int,
            ent: *mut edict_t,
            host: *mut edict_t,
            hostflags: ::core::ffi::c_int,
            player: ::core::ffi::c_int,
            pSet: *mut ::core::ffi::c_uchar,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnCreateBaseline: ::core::option::Option<
        unsafe extern "C" fn(
            player: ::core::ffi::c_int,
            eindex: ::core::ffi::c_int,
            baseline: *mut entity_state_s,
            entity: *mut edict_s,
            playermodelindex: ::core::ffi::c_int,
            player_mins: *mut vec3_t,
            player_maxs: *mut vec3_t,
        ),
    >,
    pub pfnRegisterEncoders: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnGetWeaponData: ::core::option::Option<
        unsafe extern "C" fn(player: *mut edict_s, info: *mut weapon_data_s) -> ::core::ffi::c_int,
    >,
    pub pfnCmdStart: ::core::option::Option<
        unsafe extern "C" fn(
            player: *const edict_t,
            cmd: *const usercmd_s,
            random_seed: ::core::ffi::c_uint,
        ),
    >,
    pub pfnCmdEnd: ::core::option::Option<unsafe extern "C" fn(player: *const edict_t)>,
    pub pfnConnectionlessPacket: ::core::option::Option<
        unsafe extern "C" fn(
            net_from: *const netadr_s,
            args: *const ::core::ffi::c_char,
            response_buffer: *mut ::core::ffi::c_char,
            response_buffer_size: *mut ::core::ffi::c_int,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnGetHullBounds: ::core::option::Option<
        unsafe extern "C" fn(
            hullnumber: ::core::ffi::c_int,
            mins: *mut f32,
            maxs: *mut f32,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnCreateInstancedBaselines: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnInconsistentFile: ::core::option::Option<
        unsafe extern "C" fn(
            player: *const edict_s,
            filename: *const ::core::ffi::c_char,
            disconnect_message: *mut ::core::ffi::c_char,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnAllowLagCompensation:
        ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NEW_DLL_FUNCTIONS {
    pub pfnOnFreeEntPrivateData: ::core::option::Option<unsafe extern "C" fn(pEnt: *mut edict_t)>,
    pub pfnGameShutdown: ::core::option::Option<unsafe extern "C" fn()>,
    pub pfnShouldCollide: ::core::option::Option<
        unsafe extern "C" fn(
            pentTouched: *mut edict_t,
            pentOther: *mut edict_t,
        ) -> ::core::ffi::c_int,
    >,
    pub pfnCvarValue: ::core::option::Option<
        unsafe extern "C" fn(pEnt: *const edict_t, value: *const ::core::ffi::c_char),
    >,
    pub pfnCvarValue2: ::core::option::Option<
        unsafe extern "C" fn(
            pEnt: *const edict_t,
            requestID: ::core::ffi::c_int,
            cvarName: *const ::core::ffi::c_char,
            value: *const ::core::ffi::c_char,
        ),
    >,
}
pub type NEW_DLL_FUNCTIONS_FN = ::core::option::Option<
    unsafe extern "C" fn(
        pFunctionTable: *mut NEW_DLL_FUNCTIONS,
        interfaceVersion: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int,
>;
pub type APIFUNCTION = ::core::option::Option<
    unsafe extern "C" fn(
        pFunctionTable: *mut DLL_FUNCTIONS,
        interfaceVersion: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int,
>;
pub type APIFUNCTION2 = ::core::option::Option<
    unsafe extern "C" fn(
        pFunctionTable: *mut DLL_FUNCTIONS,
        interfaceVersion: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int,
>;
